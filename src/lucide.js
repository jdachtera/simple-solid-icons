import { template as _$template } from "solid-js/web";
import { getNextElement as _$getNextElement } from "solid-js/web";
import { runHydrationEvents as _$runHydrationEvents } from "solid-js/web";
import { spread as _$spread } from "solid-js/web";
import { mergeProps as _$mergeProps } from "solid-js/web";
import { memo as _$memo } from "solid-js/web";
var _tmpl$ = /*#__PURE__*/_$template(`<svg><path d="M3.5 13h6"></path><path d="m2 16 4.5-9 4.5 9"></path><path d="M18 7v9"></path><path d="m14 12 4 4 4-4">`),
  _tmpl$2 = /*#__PURE__*/_$template(`<svg><path d="M3.5 13h6"></path><path d="m2 16 4.5-9 4.5 9"></path><path d="M18 16V7"></path><path d="m14 11 4-4 4 4">`),
  _tmpl$3 = /*#__PURE__*/_$template(`<svg><path d="M21 14h-5"></path><path d="M16 16v-3.5a2.5 2.5 0 0 1 5 0V16"></path><path d="M4.5 13h6"></path><path d="m3 16 4.5-9 4.5 9">`),
  _tmpl$4 = /*#__PURE__*/_$template(`<svg><circle cx=16 cy=4 r=1></circle><path d="m18 19 1-7-6 1"></path><path d="m5 8 3-3 5.5 3-2.36 3.5"></path><path d="M4.24 14.5a5 5 0 0 0 6.88 6"></path><path d="M13.76 17.5a5 5 0 0 0-6.88-6">`),
  _tmpl$5 = /*#__PURE__*/_$template(`<svg><path d="M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2">`),
  _tmpl$6 = /*#__PURE__*/_$template(`<svg><path d="M18 17.5a2.5 2.5 0 1 1-4 2.03V12"></path><path d="M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><path d="M6 8h12"></path><path d="M6.6 15.572A2 2 0 1 0 10 17v-5">`),
  _tmpl$7 = /*#__PURE__*/_$template(`<svg><path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"></path><path d="m12 15 5 6H7Z">`),
  _tmpl$8 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=13 r=8></circle><path d="M5 3 2 6"></path><path d="m22 6-3-3"></path><path d="M6.38 18.7 4 21"></path><path d="M17.64 18.67 20 21"></path><path d="m9 13 2 2 4-4">`),
  _tmpl$9 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=13 r=8></circle><path d="M5 3 2 6"></path><path d="m22 6-3-3"></path><path d="M6.38 18.7 4 21"></path><path d="M17.64 18.67 20 21"></path><path d="M9 13h6">`),
  _tmpl$0 = /*#__PURE__*/_$template(`<svg><path d="M6.87 6.87a8 8 0 1 0 11.26 11.26"></path><path d="M19.9 14.25a8 8 0 0 0-9.15-9.15"></path><path d="m22 6-3-3"></path><path d="M6.26 18.67 4 21"></path><path d="m2 2 20 20"></path><path d="M4 4 2 6">`),
  _tmpl$1 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=13 r=8></circle><path d="M5 3 2 6"></path><path d="m22 6-3-3"></path><path d="M6.38 18.7 4 21"></path><path d="M17.64 18.67 20 21"></path><path d="M12 10v6"></path><path d="M9 13h6">`),
  _tmpl$10 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=13 r=8></circle><path d="M12 9v4l2 2"></path><path d="M5 3 2 6"></path><path d="m22 6-3-3"></path><path d="M6.38 18.7 4 21"></path><path d="M17.64 18.67 20 21">`),
  _tmpl$11 = /*#__PURE__*/_$template(`<svg><path d="M11 21c0-2.5 2-2.5 2-5"></path><path d="M16 21c0-2.5 2-2.5 2-5"></path><path d="m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8"></path><path d="M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z"></path><path d="M6 21c0-2.5 2-2.5 2-5">`),
  _tmpl$12 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><polyline points="11 3 11 11 14 8 17 11 17 3">`),
  _tmpl$13 = /*#__PURE__*/_$template(`<svg><path d="M2 12h20"></path><path d="M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4"></path><path d="M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4"></path><path d="M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1"></path><path d="M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1">`),
  _tmpl$14 = /*#__PURE__*/_$template(`<svg><path d="M12 2v20"></path><path d="M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4"></path><path d="M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4"></path><path d="M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1"></path><path d="M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1">`),
  _tmpl$15 = /*#__PURE__*/_$template(`<svg><path d="M17 12H7"></path><path d="M19 18H5"></path><path d="M21 6H3">`),
  _tmpl$16 = /*#__PURE__*/_$template(`<svg><rect width=6 height=16 x=4 y=2 rx=2></rect><rect width=6 height=9 x=14 y=9 rx=2></rect><path d="M22 22H2">`),
  _tmpl$17 = /*#__PURE__*/_$template(`<svg><rect width=16 height=6 x=2 y=4 rx=2></rect><rect width=9 height=6 x=9 y=14 rx=2></rect><path d="M22 22V2">`),
  _tmpl$18 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=4 y=5 rx=2></rect><rect width=6 height=10 x=14 y=7 rx=2></rect><path d="M17 22v-5"></path><path d="M17 7V2"></path><path d="M7 22v-3"></path><path d="M7 5V2">`),
  _tmpl$19 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=4 y=5 rx=2></rect><rect width=6 height=10 x=14 y=7 rx=2></rect><path d="M10 2v20"></path><path d="M20 2v20">`),
  _tmpl$20 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=4 y=5 rx=2></rect><rect width=6 height=10 x=14 y=7 rx=2></rect><path d="M4 2v20"></path><path d="M14 2v20">`),
  _tmpl$21 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=2 y=5 rx=2></rect><rect width=6 height=10 x=16 y=7 rx=2></rect><path d="M12 2v20">`),
  _tmpl$22 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=2 y=5 rx=2></rect><rect width=6 height=10 x=12 y=7 rx=2></rect><path d="M22 2v20">`),
  _tmpl$23 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=6 y=5 rx=2></rect><rect width=6 height=10 x=16 y=7 rx=2></rect><path d="M2 2v20">`),
  _tmpl$24 = /*#__PURE__*/_$template(`<svg><rect width=6 height=10 x=9 y=7 rx=2></rect><path d="M4 22V2"></path><path d="M20 22V2">`),
  _tmpl$25 = /*#__PURE__*/_$template(`<svg><rect width=6 height=14 x=3 y=5 rx=2></rect><rect width=6 height=10 x=15 y=7 rx=2></rect><path d="M3 2v20"></path><path d="M21 2v20">`),
  _tmpl$26 = /*#__PURE__*/_$template(`<svg><path d="M3 12h18"></path><path d="M3 18h18"></path><path d="M3 6h18">`),
  _tmpl$27 = /*#__PURE__*/_$template(`<svg><path d="M15 12H3"></path><path d="M17 18H3"></path><path d="M21 6H3">`),
  _tmpl$28 = /*#__PURE__*/_$template(`<svg><path d="M21 12H9"></path><path d="M21 18H7"></path><path d="M21 6H3">`),
  _tmpl$29 = /*#__PURE__*/_$template(`<svg><rect width=6 height=16 x=4 y=6 rx=2></rect><rect width=6 height=9 x=14 y=6 rx=2></rect><path d="M22 2H2">`),
  _tmpl$30 = /*#__PURE__*/_$template(`<svg><rect width=9 height=6 x=6 y=14 rx=2></rect><rect width=16 height=6 x=6 y=4 rx=2></rect><path d="M2 2v20">`),
  _tmpl$31 = /*#__PURE__*/_$template(`<svg><path d="M22 17h-3"></path><path d="M22 7h-5"></path><path d="M5 17H2"></path><path d="M7 7H2"></path><rect x=5 y=14 width=14 height=6 rx=2></rect><rect x=7 y=4 width=10 height=6 rx=2>`),
  _tmpl$32 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=14 rx=2></rect><rect width=10 height=6 x=7 y=4 rx=2></rect><path d="M2 20h20"></path><path d="M2 10h20">`),
  _tmpl$33 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=14 rx=2></rect><rect width=10 height=6 x=7 y=4 rx=2></rect><path d="M2 14h20"></path><path d="M2 4h20">`),
  _tmpl$34 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=16 rx=2></rect><rect width=10 height=6 x=7 y=2 rx=2></rect><path d="M2 12h20">`),
  _tmpl$35 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=12 rx=2></rect><rect width=10 height=6 x=7 y=2 rx=2></rect><path d="M2 22h20">`),
  _tmpl$36 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=16 rx=2></rect><rect width=10 height=6 x=7 y=6 rx=2></rect><path d="M2 2h20">`),
  _tmpl$37 = /*#__PURE__*/_$template(`<svg><rect width=10 height=6 x=7 y=9 rx=2></rect><path d="M22 20H2"></path><path d="M22 4H2">`),
  _tmpl$38 = /*#__PURE__*/_$template(`<svg><rect width=14 height=6 x=5 y=15 rx=2></rect><rect width=10 height=6 x=7 y=3 rx=2></rect><path d="M2 21h20"></path><path d="M2 3h20">`),
  _tmpl$39 = /*#__PURE__*/_$template(`<svg><path d="M10 10H6"></path><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"></path><path d="M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14"></path><path d="M8 8v4"></path><path d="M9 18h6"></path><circle cx=17 cy=18 r=2></circle><circle cx=7 cy=18 r=2>`),
  _tmpl$40 = /*#__PURE__*/_$template(`<svg><path d="M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13"></path><path d="M16 12h3">`),
  _tmpl$41 = /*#__PURE__*/_$template(`<svg><path d="M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5"></path><path d="M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5">`),
  _tmpl$42 = /*#__PURE__*/_$template(`<svg><path d="M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8"></path><path d="M10 5H8a2 2 0 0 0 0 4h.68"></path><path d="M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8"></path><path d="M14 5h2a2 2 0 0 1 0 4h-.68"></path><path d="M18 22H6"></path><path d="M9 2h6">`),
  _tmpl$43 = /*#__PURE__*/_$template(`<svg><path d="M12 22V8"></path><path d="M5 12H2a10 10 0 0 0 20 0h-3"></path><circle cx=12 cy=5 r=3>`),
  _tmpl$44 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><path d="M7.5 8 10 9"></path><path d="m14 9 2.5-1"></path><path d="M9 10h.01"></path><path d="M15 10h.01">`),
  _tmpl$45 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M8 15h8"></path><path d="M8 9h2"></path><path d="M14 9h2">`),
  _tmpl$46 = /*#__PURE__*/_$template(`<svg><path d="M2 12 7 2"></path><path d="m7 12 5-10"></path><path d="m12 12 5-10"></path><path d="m17 12 5-10"></path><path d="M4.5 7h15"></path><path d="M12 16v6">`),
  _tmpl$47 = /*#__PURE__*/_$template(`<svg><path d="M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4"></path><path d="M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z"></path><path d="M9 12v5"></path><path d="M15 12v5"></path><path d="M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1">`),
  _tmpl$48 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m14.31 8 5.74 9.94"></path><path d="M9.69 8h11.48"></path><path d="m7.38 12 5.74-9.94"></path><path d="M9.69 16 3.95 6.06"></path><path d="M14.31 16H2.83"></path><path d="m16.62 12-5.74 9.94">`),
  _tmpl$49 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M6 8h.01"></path><path d="M10 8h.01"></path><path d="M14 8h.01">`),
  _tmpl$50 = /*#__PURE__*/_$template(`<svg><rect x=2 y=4 width=20 height=16 rx=2></rect><path d="M10 4v4"></path><path d="M2 8h20"></path><path d="M6 4v4">`),
  _tmpl$51 = /*#__PURE__*/_$template(`<svg><path d="M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z"></path><path d="M10 2c1 .5 2 2 2 5">`),
  _tmpl$52 = /*#__PURE__*/_$template(`<svg><rect width=20 height=5 x=2 y=3 rx=1></rect><path d="M4 8v11a2 2 0 0 0 2 2h2"></path><path d="M20 8v11a2 2 0 0 1-2 2h-2"></path><path d="m9 15 3-3 3 3"></path><path d="M12 12v9">`),
  _tmpl$53 = /*#__PURE__*/_$template(`<svg><rect width=20 height=5 x=2 y=3 rx=1></rect><path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8"></path><path d="m9.5 17 5-5"></path><path d="m9.5 12 5 5">`),
  _tmpl$54 = /*#__PURE__*/_$template(`<svg><rect width=20 height=5 x=2 y=3 rx=1></rect><path d="M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8"></path><path d="M10 12h4">`),
  _tmpl$55 = /*#__PURE__*/_$template(`<svg><path d="M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3"></path><path d="M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"></path><path d="M5 18v2"></path><path d="M19 18v2">`),
  _tmpl$56 = /*#__PURE__*/_$template(`<svg><path d="M15 5H9"></path><path d="M15 9v3h4l-7 7-7-7h4V9z">`),
  _tmpl$57 = /*#__PURE__*/_$template(`<svg><path d="M15 6v6h4l-7 7-7-7h4V6h6z">`),
  _tmpl$58 = /*#__PURE__*/_$template(`<svg><path d="M19 15V9"></path><path d="M15 15h-3v4l-7-7 7-7v4h3v6z">`),
  _tmpl$59 = /*#__PURE__*/_$template(`<svg><path d="M18 15h-6v4l-7-7 7-7v4h6v6z">`),
  _tmpl$60 = /*#__PURE__*/_$template(`<svg><path d="M5 9v6"></path><path d="M9 9h3V5l7 7-7 7v-4H9V9z">`),
  _tmpl$61 = /*#__PURE__*/_$template(`<svg><path d="M6 9h6V5l7 7-7 7v-4H6V9z">`),
  _tmpl$62 = /*#__PURE__*/_$template(`<svg><path d="M9 19h6"></path><path d="M9 15v-3H5l7-7 7 7h-4v3H9z">`),
  _tmpl$63 = /*#__PURE__*/_$template(`<svg><path d="M9 18v-6H5l7-7 7 7h-4v6H9z">`),
  _tmpl$64 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><rect x=15 y=4 width=4 height=6 ry=2></rect><path d="M17 20v-6h-2"></path><path d="M15 20h4">`),
  _tmpl$65 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="M17 10V4h-2"></path><path d="M15 10h4"></path><rect x=15 y=14 width=4 height=6 ry=2>`),
  _tmpl$66 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="M20 8h-5"></path><path d="M15 10V6.5a2.5 2.5 0 0 1 5 0V10"></path><path d="M15 14h5l-5 6h5">`),
  _tmpl$67 = /*#__PURE__*/_$template(`<svg><path d="M19 3H5"></path><path d="M12 21V7"></path><path d="m6 15 6 6 6-6">`),
  _tmpl$68 = /*#__PURE__*/_$template(`<svg><path d="M17 7 7 17"></path><path d="M17 17H7V7">`),
  _tmpl$69 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="M11 4h4"></path><path d="M11 8h7"></path><path d="M11 12h10">`),
  _tmpl$70 = /*#__PURE__*/_$template(`<svg><path d="m7 7 10 10"></path><path d="M17 7v10H7">`),
  _tmpl$71 = /*#__PURE__*/_$template(`<svg><path d="M12 2v14"></path><path d="m19 9-7 7-7-7"></path><circle cx=12 cy=21 r=1>`),
  _tmpl$72 = /*#__PURE__*/_$template(`<svg><path d="M12 17V3"></path><path d="m6 11 6 6 6-6"></path><path d="M19 21H5">`),
  _tmpl$73 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="m21 8-4-4-4 4"></path><path d="M17 4v16">`),
  _tmpl$74 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 20V4"></path><path d="M11 4h10"></path><path d="M11 8h7"></path><path d="M11 12h4">`),
  _tmpl$75 = /*#__PURE__*/_$template(`<svg><path d="m3 16 4 4 4-4"></path><path d="M7 4v16"></path><path d="M15 4h5l-5 6h5"></path><path d="M15 20v-3.5a2.5 2.5 0 0 1 5 0V20"></path><path d="M20 18h-5">`),
  _tmpl$76 = /*#__PURE__*/_$template(`<svg><path d="M12 5v14"></path><path d="m19 12-7 7-7-7">`),
  _tmpl$77 = /*#__PURE__*/_$template(`<svg><path d="m9 6-6 6 6 6"></path><path d="M3 12h14"></path><path d="M21 19V5">`),
  _tmpl$78 = /*#__PURE__*/_$template(`<svg><path d="M8 3 4 7l4 4"></path><path d="M4 7h16"></path><path d="m16 21 4-4-4-4"></path><path d="M20 17H4">`),
  _tmpl$79 = /*#__PURE__*/_$template(`<svg><path d="M3 19V5"></path><path d="m13 6-6 6 6 6"></path><path d="M7 12h14">`),
  _tmpl$80 = /*#__PURE__*/_$template(`<svg><path d="m12 19-7-7 7-7"></path><path d="M19 12H5">`),
  _tmpl$81 = /*#__PURE__*/_$template(`<svg><path d="M3 5v14"></path><path d="M21 12H7"></path><path d="m15 18 6-6-6-6">`),
  _tmpl$82 = /*#__PURE__*/_$template(`<svg><path d="m16 3 4 4-4 4"></path><path d="M20 7H4"></path><path d="m8 21-4-4 4-4"></path><path d="M4 17h16">`),
  _tmpl$83 = /*#__PURE__*/_$template(`<svg><path d="M17 12H3"></path><path d="m11 18 6-6-6-6"></path><path d="M21 5v14">`),
  _tmpl$84 = /*#__PURE__*/_$template(`<svg><path d="M5 12h14"></path><path d="m12 5 7 7-7 7">`),
  _tmpl$85 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><rect x=15 y=4 width=4 height=6 ry=2></rect><path d="M17 20v-6h-2"></path><path d="M15 20h4">`),
  _tmpl$86 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><path d="M17 10V4h-2"></path><path d="M15 10h4"></path><rect x=15 y=14 width=4 height=6 ry=2>`),
  _tmpl$87 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><path d="M20 8h-5"></path><path d="M15 10V6.5a2.5 2.5 0 0 1 5 0V10"></path><path d="M15 14h5l-5 6h5">`),
  _tmpl$88 = /*#__PURE__*/_$template(`<svg><path d="m21 16-4 4-4-4"></path><path d="M17 20V4"></path><path d="m3 8 4-4 4 4"></path><path d="M7 4v16">`),
  _tmpl$89 = /*#__PURE__*/_$template(`<svg><path d="m5 9 7-7 7 7"></path><path d="M12 16V2"></path><circle cx=12 cy=21 r=1>`),
  _tmpl$90 = /*#__PURE__*/_$template(`<svg><path d="m18 9-6-6-6 6"></path><path d="M12 3v14"></path><path d="M5 21h14">`),
  _tmpl$91 = /*#__PURE__*/_$template(`<svg><path d="M7 17V7h10"></path><path d="M17 17 7 7">`),
  _tmpl$92 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><path d="M11 12h4"></path><path d="M11 16h7"></path><path d="M11 20h10">`),
  _tmpl$93 = /*#__PURE__*/_$template(`<svg><path d="M7 7h10v10"></path><path d="M7 17 17 7">`),
  _tmpl$94 = /*#__PURE__*/_$template(`<svg><path d="M5 3h14"></path><path d="m18 13-6-6-6 6"></path><path d="M12 7v14">`),
  _tmpl$95 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><path d="M11 12h10"></path><path d="M11 16h7"></path><path d="M11 20h4">`),
  _tmpl$96 = /*#__PURE__*/_$template(`<svg><path d="m3 8 4-4 4 4"></path><path d="M7 4v16"></path><path d="M15 4h5l-5 6h5"></path><path d="M15 20v-3.5a2.5 2.5 0 0 1 5 0V20"></path><path d="M20 18h-5">`),
  _tmpl$97 = /*#__PURE__*/_$template(`<svg><path d="m5 12 7-7 7 7"></path><path d="M12 19V5">`),
  _tmpl$98 = /*#__PURE__*/_$template(`<svg><path d="m4 6 3-3 3 3"></path><path d="M7 17V3"></path><path d="m14 6 3-3 3 3"></path><path d="M17 17V3"></path><path d="M4 21h16">`),
  _tmpl$99 = /*#__PURE__*/_$template(`<svg><path d="M12 6v12"></path><path d="M17.196 9 6.804 15"></path><path d="m6.804 9 10.392 6">`),
  _tmpl$100 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=4></circle><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8">`),
  _tmpl$101 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=1></circle><path d="M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z"></path><path d="M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z">`),
  _tmpl$102 = /*#__PURE__*/_$template(`<svg><path d="M2 10v3"></path><path d="M6 6v11"></path><path d="M10 3v18"></path><path d="M14 8v7"></path><path d="M18 5v13"></path><path d="M22 10v3">`),
  _tmpl$103 = /*#__PURE__*/_$template(`<svg><path d="M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2">`),
  _tmpl$104 = /*#__PURE__*/_$template(`<svg><path d="m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526"></path><circle cx=12 cy=8 r=6>`),
  _tmpl$105 = /*#__PURE__*/_$template(`<svg><path d="m14 12-8.381 8.38a1 1 0 0 1-3.001-3L11 9"></path><path d="M15 15.5a.5.5 0 0 0 .5.5A6.5 6.5 0 0 0 22 9.5a.5.5 0 0 0-.5-.5h-1.672a2 2 0 0 1-1.414-.586l-5.062-5.062a1.205 1.205 0 0 0-1.704 0L9.352 5.648a1.205 1.205 0 0 0 0 1.704l5.062 5.062A2 2 0 0 1 15 13.828z">`),
  _tmpl$106 = /*#__PURE__*/_$template(`<svg><path d="M13.5 10.5 15 9"></path><path d="M4 4v15a1 1 0 0 0 1 1h15"></path><path d="M4.293 19.707 6 18"></path><path d="m9 15 1.5-1.5">`),
  _tmpl$107 = /*#__PURE__*/_$template(`<svg><path d="M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5"></path><path d="M15 12h.01"></path><path d="M19.38 6.813A9 9 0 0 1 20.8 10.2a2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1"></path><path d="M9 12h.01">`),
  _tmpl$108 = /*#__PURE__*/_$template(`<svg><path d="M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z"></path><path d="M8 10h8"></path><path d="M8 18h8"></path><path d="M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6"></path><path d="M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2">`),
  _tmpl$109 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><line x1=12 x2=12 y1=8 y2=12></line><line x1=12 x2=12.01 y1=16 y2=16>`),
  _tmpl$110 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M12 7v10"></path><path d="M15.4 10a4 4 0 1 0 0 4">`),
  _tmpl$111 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="m9 12 2 2 4-4">`),
  _tmpl$112 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"></path><path d="M12 18V6">`),
  _tmpl$113 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M7 12h5"></path><path d="M15 9.4a4 4 0 1 0 0 5.2">`),
  _tmpl$114 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M8 8h8"></path><path d="M8 12h8"></path><path d="m13 17-5-1h1a4 4 0 0 0 0-8">`),
  _tmpl$115 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><line x1=12 x2=12 y1=16 y2=12></line><line x1=12 x2=12.01 y1=8 y2=8>`),
  _tmpl$116 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="m9 8 3 3v7"></path><path d="m12 11 3-3"></path><path d="M9 12h6"></path><path d="M9 16h6">`),
  _tmpl$117 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><line x1=8 x2=16 y1=12 y2=12>`),
  _tmpl$118 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="m15 9-6 6"></path><path d="M9 9h.01"></path><path d="M15 15h.01">`),
  _tmpl$119 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><line x1=12 x2=12 y1=8 y2=16></line><line x1=8 x2=16 y1=12 y2=12>`),
  _tmpl$120 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M8 12h4"></path><path d="M10 16V9.5a2.5 2.5 0 0 1 5 0"></path><path d="M8 16h7">`),
  _tmpl$121 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1=12 x2=12.01 y1=17 y2=17>`),
  _tmpl$122 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M9 16h5"></path><path d="M9 12h5a2 2 0 1 0 0-4h-3v9">`),
  _tmpl$123 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><path d="M11 17V8h4"></path><path d="M11 12h3"></path><path d="M9 16h4">`),
  _tmpl$124 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"></path><line x1=15 x2=9 y1=9 y2=15></line><line x1=9 x2=15 y1=9 y2=15>`),
  _tmpl$125 = /*#__PURE__*/_$template(`<svg><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z">`),
  _tmpl$126 = /*#__PURE__*/_$template(`<svg><path d="M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2"></path><path d="M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10"></path><rect width=13 height=8 x=8 y=6 rx=1></rect><circle cx=18 cy=20 r=2></circle><circle cx=9 cy=20 r=2>`),
  _tmpl$127 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m4.9 4.9 14.2 14.2">`),
  _tmpl$128 = /*#__PURE__*/_$template(`<svg><path d="M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5"></path><path d="M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z">`),
  _tmpl$129 = /*#__PURE__*/_$template(`<svg><path d="M10 10.01h.01"></path><path d="M10 14.01h.01"></path><path d="M14 10.01h.01"></path><path d="M14 14.01h.01"></path><path d="M18 6v11.5"></path><path d="M6 6v12"></path><rect x=2 y=6 width=20 height=12 rx=2>`),
  _tmpl$130 = /*#__PURE__*/_$template(`<svg><path d="M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"></path><path d="m16 19 3 3 3-3"></path><path d="M18 12h.01"></path><path d="M19 16v6"></path><path d="M6 12h.01"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$131 = /*#__PURE__*/_$template(`<svg><path d="M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"></path><path d="M18 12h.01"></path><path d="M19 22v-6"></path><path d="m22 19-3-3-3 3"></path><path d="M6 12h.01"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$132 = /*#__PURE__*/_$template(`<svg><path d="M13 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"></path><path d="m17 17 5 5"></path><path d="M18 12h.01"></path><path d="m22 17-5 5"></path><path d="M6 12h.01"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$133 = /*#__PURE__*/_$template(`<svg><rect width=20 height=12 x=2 y=6 rx=2></rect><circle cx=12 cy=12 r=2></circle><path d="M6 12h.01M18 12h.01">`),
  _tmpl$134 = /*#__PURE__*/_$template(`<svg><path d="M3 5v14"></path><path d="M8 5v14"></path><path d="M12 5v14"></path><path d="M17 5v14"></path><path d="M21 5v14">`),
  _tmpl$135 = /*#__PURE__*/_$template(`<svg><path d="M10 3a41 41 0 0 0 0 18"></path><path d="M14 3a41 41 0 0 1 0 18"></path><path d="M17 3a2 2 0 0 1 1.68.92 15.25 15.25 0 0 1 0 16.16A2 2 0 0 1 17 21H7a2 2 0 0 1-1.68-.92 15.25 15.25 0 0 1 0-16.16A2 2 0 0 1 7 3z"></path><path d="M3.84 17h16.32"></path><path d="M3.84 7h16.32">`),
  _tmpl$136 = /*#__PURE__*/_$template(`<svg><path d="M4 20h16"></path><path d="m6 16 6-12 6 12"></path><path d="M8 12h8">`),
  _tmpl$137 = /*#__PURE__*/_$template(`<svg><path d="M10 4 8 6"></path><path d="M17 19v2"></path><path d="M2 12h20"></path><path d="M7 19v2"></path><path d="M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5">`),
  _tmpl$138 = /*#__PURE__*/_$template(`<svg><path d="m11 7-3 5h4l-3 5"></path><path d="M14.856 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.935"></path><path d="M22 14v-4"></path><path d="M5.14 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2.936">`),
  _tmpl$139 = /*#__PURE__*/_$template(`<svg><path d="M10 10v4"></path><path d="M14 10v4"></path><path d="M22 14v-4"></path><path d="M6 10v4"></path><rect x=2 y=6 width=16 height=12 rx=2>`),
  _tmpl$140 = /*#__PURE__*/_$template(`<svg><path d="M22 14v-4"></path><path d="M6 14v-4"></path><rect x=2 y=6 width=16 height=12 rx=2>`),
  _tmpl$141 = /*#__PURE__*/_$template(`<svg><path d="M10 14v-4"></path><path d="M22 14v-4"></path><path d="M6 14v-4"></path><rect x=2 y=6 width=16 height=12 rx=2>`),
  _tmpl$142 = /*#__PURE__*/_$template(`<svg><path d="M10 9v6"></path><path d="M12.543 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.605"></path><path d="M22 14v-4"></path><path d="M7 12h6"></path><path d="M7.606 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.606">`),
  _tmpl$143 = /*#__PURE__*/_$template(`<svg><path d="M10 17h.01"></path><path d="M10 7v6"></path><path d="M14 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2"></path><path d="M22 14v-4"></path><path d="M6 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2">`),
  _tmpl$144 = /*#__PURE__*/_$template(`<svg><path d="M 22 14 L 22 10"></path><rect x=2 y=6 width=16 height=12 rx=2>`),
  _tmpl$145 = /*#__PURE__*/_$template(`<svg><path d="M4.5 3h15"></path><path d="M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3"></path><path d="M6 14h12">`),
  _tmpl$146 = /*#__PURE__*/_$template(`<svg><path d="M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1"></path><path d="M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66"></path><path d="M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$147 = /*#__PURE__*/_$template(`<svg><path d="M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z"></path><path d="M5.341 10.62a4 4 0 1 0 5.279-5.28">`),
  _tmpl$148 = /*#__PURE__*/_$template(`<svg><path d="M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8"></path><path d="M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4"></path><path d="M12 4v6"></path><path d="M2 18h20">`),
  _tmpl$149 = /*#__PURE__*/_$template(`<svg><path d="M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8"></path><path d="M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4"></path><path d="M3 18h18">`),
  _tmpl$150 = /*#__PURE__*/_$template(`<svg><path d="M2 4v16"></path><path d="M2 8h18a2 2 0 0 1 2 2v10"></path><path d="M2 17h20"></path><path d="M6 8v9">`),
  _tmpl$151 = /*#__PURE__*/_$template(`<svg><path d="M16.4 13.7A6.5 6.5 0 1 0 6.28 6.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3"></path><path d="m18.5 6 2.19 4.5a6.48 6.48 0 0 1-2.29 7.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5"></path><circle cx=12.5 cy=8.5 r=2.5>`),
  _tmpl$152 = /*#__PURE__*/_$template(`<svg><path d="M13 13v5"></path><path d="M17 11.47V8"></path><path d="M17 11h1a3 3 0 0 1 2.745 4.211"></path><path d="m2 2 20 20"></path><path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3"></path><path d="M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268"></path><path d="M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12"></path><path d="M9 14.6V18">`),
  _tmpl$153 = /*#__PURE__*/_$template(`<svg><path d="M17 11h1a3 3 0 0 1 0 6h-1"></path><path d="M9 12v6"></path><path d="M13 12v6"></path><path d="M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z"></path><path d="M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8">`),
  _tmpl$154 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M13.916 2.314A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.74 7.327A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673 9 9 0 0 1-.585-.665"></path><circle cx=18 cy=8 r=3>`),
  _tmpl$155 = /*#__PURE__*/_$template(`<svg><path d="M18.518 17.347A7 7 0 0 1 14 19"></path><path d="M18.8 4A11 11 0 0 1 20 9"></path><path d="M9 9h.01"></path><circle cx=20 cy=16 r=2></circle><circle cx=9 cy=9 r=7></circle><rect x=4 y=16 width=10 height=6 rx=2>`),
  _tmpl$156 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M15 8h6"></path><path d="M16.243 3.757A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673A9.4 9.4 0 0 1 18.667 12">`),
  _tmpl$157 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M17 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 .258-1.742"></path><path d="m2 2 20 20"></path><path d="M8.668 3.01A6 6 0 0 1 18 8c0 2.687.77 4.653 1.707 6.05">`),
  _tmpl$158 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M15 8h6"></path><path d="M18 5v6"></path><path d="M20.002 14.464a9 9 0 0 0 .738.863A1 1 0 0 1 20 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 8.75-5.332">`),
  _tmpl$159 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M22 8c0-2.3-.8-4.3-2-6"></path><path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"></path><path d="M4 2C2.8 3.7 2 5.7 2 8">`),
  _tmpl$160 = /*#__PURE__*/_$template(`<svg><path d="M10.268 21a2 2 0 0 0 3.464 0"></path><path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326">`),
  _tmpl$161 = /*#__PURE__*/_$template(`<svg><rect width=13 height=7 x=3 y=3 rx=1></rect><path d="m22 15-3-3 3-3"></path><rect width=13 height=7 x=3 y=14 rx=1>`),
  _tmpl$162 = /*#__PURE__*/_$template(`<svg><rect width=13 height=7 x=8 y=3 rx=1></rect><path d="m2 9 3 3-3 3"></path><rect width=13 height=7 x=8 y=14 rx=1>`),
  _tmpl$163 = /*#__PURE__*/_$template(`<svg><rect width=7 height=13 x=3 y=3 rx=1></rect><path d="m9 22 3-3 3 3"></path><rect width=7 height=13 x=14 y=3 rx=1>`),
  _tmpl$164 = /*#__PURE__*/_$template(`<svg><rect width=7 height=13 x=3 y=8 rx=1></rect><path d="m15 2-3 3-3-3"></path><rect width=7 height=13 x=14 y=8 rx=1>`),
  _tmpl$165 = /*#__PURE__*/_$template(`<svg><path d="M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1"></path><path d="M15 14a5 5 0 0 0-7.584 2"></path><path d="M9.964 6.825C8.019 7.977 9.5 13 8 15">`),
  _tmpl$166 = /*#__PURE__*/_$template(`<svg><circle cx=18.5 cy=17.5 r=3.5></circle><circle cx=5.5 cy=17.5 r=3.5></circle><circle cx=15 cy=5 r=1></circle><path d="M12 17.5V14l-3-3 4-3 2 3h2">`),
  _tmpl$167 = /*#__PURE__*/_$template(`<svg><rect x=14 y=14 width=4 height=6 rx=2></rect><rect x=6 y=4 width=4 height=6 rx=2></rect><path d="M6 20h4"></path><path d="M14 10h4"></path><path d="M6 14h2v6"></path><path d="M14 4h2v6">`),
  _tmpl$168 = /*#__PURE__*/_$template(`<svg><path d="M10 10h4"></path><path d="M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3"></path><path d="M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z"></path><path d="M 22 16 L 2 16"></path><path d="M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z"></path><path d="M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3">`),
  _tmpl$169 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=11.9 r=2></circle><path d="M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6"></path><path d="m8.9 10.1 1.4.8"></path><path d="M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5"></path><path d="m15.1 10.1-1.4.8"></path><path d="M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2"></path><path d="M12 13.9v1.6"></path><path d="M13.5 5.4c-1-.2-2-.2-3 0"></path><path d="M17 16.4c.7-.7 1.2-1.6 1.5-2.5"></path><path d="M5.5 13.9c.3.9.8 1.8 1.5 2.5">`),
  _tmpl$170 = /*#__PURE__*/_$template(`<svg><path d="M16 7h.01"></path><path d="M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20"></path><path d="m20 7 2 .5-2 .5"></path><path d="M10 18v3"></path><path d="M14 17.75V21"></path><path d="M7 18a6 6 0 0 0 3.84-10.61">`),
  _tmpl$171 = /*#__PURE__*/_$template(`<svg><path d="M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727">`),
  _tmpl$172 = /*#__PURE__*/_$template(`<svg><circle cx=9 cy=9 r=7></circle><circle cx=15 cy=15 r=7>`),
  _tmpl$173 = /*#__PURE__*/_$template(`<svg><path d="M3 3h18"></path><path d="M20 7H8"></path><path d="M20 11H8"></path><path d="M10 19h10"></path><path d="M8 15h12"></path><path d="M4 3v14"></path><circle cx=4 cy=19 r=2>`),
  _tmpl$174 = /*#__PURE__*/_$template(`<svg><path d="M10 22V7a1 1 0 0 0-1-1H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5a1 1 0 0 0-1-1H2"></path><rect x=14 y=2 width=8 height=8 rx=1>`),
  _tmpl$175 = /*#__PURE__*/_$template(`<svg><path d="m7 7 10 10-5 5V2l5 5L7 17"></path><line x1=18 x2=21 y1=12 y2=12></line><line x1=3 x2=6 y1=12 y2=12>`),
  _tmpl$176 = /*#__PURE__*/_$template(`<svg><path d="m17 17-5 5V12l-5 5"></path><path d="m2 2 20 20"></path><path d="M14.5 9.5 17 7l-5-5v4.5">`),
  _tmpl$177 = /*#__PURE__*/_$template(`<svg><path d="m7 7 10 10-5 5V2l5 5L7 17"></path><path d="M20.83 14.83a4 4 0 0 0 0-5.66"></path><path d="M18 12h.01">`),
  _tmpl$178 = /*#__PURE__*/_$template(`<svg><path d="m7 7 10 10-5 5V2l5 5L7 17">`),
  _tmpl$179 = /*#__PURE__*/_$template(`<svg><path d="M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8">`),
  _tmpl$180 = /*#__PURE__*/_$template(`<svg><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><circle cx=12 cy=12 r=4>`),
  _tmpl$181 = /*#__PURE__*/_$template(`<svg><circle cx=11 cy=13 r=9></circle><path d="M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95"></path><path d="m22 2-1.5 1.5">`),
  _tmpl$182 = /*#__PURE__*/_$template(`<svg><path d="M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z">`),
  _tmpl$183 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="m8 13 4-7 4 7"></path><path d="M9.1 11h5.7">`),
  _tmpl$184 = /*#__PURE__*/_$template(`<svg><path d="M12 13h.01"></path><path d="M12 6v3"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20">`),
  _tmpl$185 = /*#__PURE__*/_$template(`<svg><path d="M12 6v7"></path><path d="M16 8v3"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M8 8v3">`),
  _tmpl$186 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="m9 9.5 2 2 4-4">`),
  _tmpl$187 = /*#__PURE__*/_$template(`<svg><path d="M2 16V4a2 2 0 0 1 2-2h11"></path><path d="M22 18H11a2 2 0 1 0 0 4h10.5a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5H11a2 2 0 0 0-2 2v12"></path><path d="M5 14H4a2 2 0 1 0 0 4h1">`),
  _tmpl$188 = /*#__PURE__*/_$template(`<svg><path d="M12 17h1.5"></path><path d="M12 22h1.5"></path><path d="M12 2h1.5"></path><path d="M17.5 22H19a1 1 0 0 0 1-1"></path><path d="M17.5 2H19a1 1 0 0 1 1 1v1.5"></path><path d="M20 14v3h-2.5"></path><path d="M20 8.5V10"></path><path d="M4 10V8.5"></path><path d="M4 19.5V14"></path><path d="M4 4.5A2.5 2.5 0 0 1 6.5 2H8"></path><path d="M8 22H6.5a1 1 0 0 1 0-5H8">`),
  _tmpl$189 = /*#__PURE__*/_$template(`<svg><path d="M12 13V7"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="m9 10 3 3 3-3">`),
  _tmpl$190 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M8 12v-2a4 4 0 0 1 8 0v2"></path><circle cx=15 cy=12 r=1></circle><circle cx=9 cy=12 r=1>`),
  _tmpl$191 = /*#__PURE__*/_$template(`<svg><path d="M16 8.2A2.22 2.22 0 0 0 13.8 6c-.8 0-1.4.3-1.8.9-.4-.6-1-.9-1.8-.9A2.22 2.22 0 0 0 8 8.2c0 .6.3 1.2.7 1.6A226.652 226.652 0 0 0 12 13a404 404 0 0 0 3.3-3.1 2.413 2.413 0 0 0 .7-1.7"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20">`),
  _tmpl$192 = /*#__PURE__*/_$template(`<svg><path d="m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><circle cx=10 cy=8 r=2>`),
  _tmpl$193 = /*#__PURE__*/_$template(`<svg><path d="m19 3 1 1"></path><path d="m20 2-4.5 4.5"></path><path d="M20 7.898V21a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2h7.844"></path><circle cx=14 cy=8 r=2>`),
  _tmpl$194 = /*#__PURE__*/_$template(`<svg><path d="M18 6V4a2 2 0 1 0-4 0v2"></path><path d="M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10"></path><rect x=12 y=6 width=8 height=5 rx=1>`),
  _tmpl$195 = /*#__PURE__*/_$template(`<svg><path d="M10 2v8l3-3 3 3V2"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20">`),
  _tmpl$196 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M9 10h6">`),
  _tmpl$197 = /*#__PURE__*/_$template(`<svg><path d="M12 21V7"></path><path d="m16 12 2 2 4-4"></path><path d="M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3">`),
  _tmpl$198 = /*#__PURE__*/_$template(`<svg><path d="M12 7v14"></path><path d="M16 12h2"></path><path d="M16 8h2"></path><path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"></path><path d="M6 12h2"></path><path d="M6 8h2">`),
  _tmpl$199 = /*#__PURE__*/_$template(`<svg><path d="M12 7v14"></path><path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z">`),
  _tmpl$200 = /*#__PURE__*/_$template(`<svg><path d="M12 7v6"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M9 10h6">`),
  _tmpl$201 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M8 11h8"></path><path d="M8 7h6">`),
  _tmpl$202 = /*#__PURE__*/_$template(`<svg><path d="M10 13h4"></path><path d="M12 6v7"></path><path d="M16 8V6H8v2"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20">`),
  _tmpl$203 = /*#__PURE__*/_$template(`<svg><path d="M12 13V7"></path><path d="M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2"></path><path d="m9 10 3-3 3 3"></path><path d="m9 5 3-3 3 3">`),
  _tmpl$204 = /*#__PURE__*/_$template(`<svg><path d="M12 13V7"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="m9 10 3-3 3 3">`),
  _tmpl$205 = /*#__PURE__*/_$template(`<svg><path d="M15 13a3 3 0 1 0-6 0"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><circle cx=12 cy=8 r=2>`),
  _tmpl$206 = /*#__PURE__*/_$template(`<svg><path d="m14.5 7-5 5"></path><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"></path><path d="m9.5 7 5 5">`),
  _tmpl$207 = /*#__PURE__*/_$template(`<svg><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20">`),
  _tmpl$208 = /*#__PURE__*/_$template(`<svg><path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z"></path><path d="m9 10 2 2 4-4">`),
  _tmpl$209 = /*#__PURE__*/_$template(`<svg><path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path><line x1=15 x2=9 y1=10 y2=10>`),
  _tmpl$210 = /*#__PURE__*/_$template(`<svg><path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path><line x1=12 x2=12 y1=7 y2=13></line><line x1=15 x2=9 y1=10 y2=10>`),
  _tmpl$211 = /*#__PURE__*/_$template(`<svg><path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z"></path><path d="m14.5 7.5-5 5"></path><path d="m9.5 7.5 5 5">`),
  _tmpl$212 = /*#__PURE__*/_$template(`<svg><path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z">`),
  _tmpl$213 = /*#__PURE__*/_$template(`<svg><path d="M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4"></path><path d="M8 8v1"></path><path d="M12 8v1"></path><path d="M16 8v1"></path><rect width=20 height=12 x=2 y=9 rx=2></rect><circle cx=8 cy=15 r=2></circle><circle cx=16 cy=15 r=2>`),
  _tmpl$214 = /*#__PURE__*/_$template(`<svg><path d="M12 6V2H8"></path><path d="m8 18-4 4V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2Z"></path><path d="M2 12h2"></path><path d="M9 11v2"></path><path d="M15 11v2"></path><path d="M20 12h2">`),
  _tmpl$215 = /*#__PURE__*/_$template(`<svg><path d="M13.67 8H18a2 2 0 0 1 2 2v4.33"></path><path d="M2 14h2"></path><path d="M20 14h2"></path><path d="M22 22 2 2"></path><path d="M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586"></path><path d="M9 13v2"></path><path d="M9.67 4H12v2.33">`),
  _tmpl$216 = /*#__PURE__*/_$template(`<svg><path d="M12 8V4H8"></path><rect width=16 height=12 x=4 y=8 rx=2></rect><path d="M2 14h2"></path><path d="M20 14h2"></path><path d="M15 13v2"></path><path d="M9 13v2">`),
  _tmpl$217 = /*#__PURE__*/_$template(`<svg><path d="M10 3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a6 6 0 0 0 1.2 3.6l.6.8A6 6 0 0 1 17 13v8a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-8a6 6 0 0 1 1.2-3.6l.6-.8A6 6 0 0 0 10 5z"></path><path d="M17 13h-4a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h4">`),
  _tmpl$218 = /*#__PURE__*/_$template(`<svg><path d="M17 3h4v4"></path><path d="M18.575 11.082a13 13 0 0 1 1.048 9.027 1.17 1.17 0 0 1-1.914.597L14 17"></path><path d="M7 10 3.29 6.29a1.17 1.17 0 0 1 .6-1.91 13 13 0 0 1 9.03 1.05"></path><path d="M7 14a1.7 1.7 0 0 0-1.207.5l-2.646 2.646A.5.5 0 0 0 3.5 18H5a1 1 0 0 1 1 1v1.5a.5.5 0 0 0 .854.354L9.5 18.207A1.7 1.7 0 0 0 10 17v-2a1 1 0 0 0-1-1z"></path><path d="M9.707 14.293 21 3">`),
  _tmpl$219 = /*#__PURE__*/_$template(`<svg><path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"></path><path d="m3.3 7 8.7 5 8.7-5"></path><path d="M12 22V12">`),
  _tmpl$220 = /*#__PURE__*/_$template(`<svg><path d="M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z"></path><path d="m7 16.5-4.74-2.85"></path><path d="m7 16.5 5-3"></path><path d="M7 16.5v5.17"></path><path d="M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z"></path><path d="m17 16.5-5-3"></path><path d="m17 16.5 4.74-2.85"></path><path d="M17 16.5v5.17"></path><path d="M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z"></path><path d="M12 8 7.26 5.15"></path><path d="m12 8 4.74-2.85"></path><path d="M12 13.5V8">`),
  _tmpl$221 = /*#__PURE__*/_$template(`<svg><path d="M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1"></path><path d="M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1">`),
  _tmpl$222 = /*#__PURE__*/_$template(`<svg><path d="M16 3h3a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-3"></path><path d="M8 21H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h3">`),
  _tmpl$223 = /*#__PURE__*/_$template(`<svg><path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"></path><path d="M9 13a4.5 4.5 0 0 0 3-4"></path><path d="M6.003 5.125A3 3 0 0 0 6.401 6.5"></path><path d="M3.477 10.896a4 4 0 0 1 .585-.396"></path><path d="M6 18a4 4 0 0 1-1.967-.516"></path><path d="M12 13h4"></path><path d="M12 18h6a2 2 0 0 1 2 2v1"></path><path d="M12 8h8"></path><path d="M16 8V5a2 2 0 0 1 2-2"></path><circle cx=16 cy=13 r=.5></circle><circle cx=18 cy=3 r=.5></circle><circle cx=20 cy=21 r=.5></circle><circle cx=20 cy=8 r=.5>`),
  _tmpl$224 = /*#__PURE__*/_$template(`<svg><path d="m10.852 14.772-.383.923"></path><path d="m10.852 9.228-.383-.923"></path><path d="m13.148 14.772.382.924"></path><path d="m13.531 8.305-.383.923"></path><path d="m14.772 10.852.923-.383"></path><path d="m14.772 13.148.923.383"></path><path d="M17.598 6.5A3 3 0 1 0 12 5a3 3 0 0 0-5.63-1.446 3 3 0 0 0-.368 1.571 4 4 0 0 0-2.525 5.771"></path><path d="M17.998 5.125a4 4 0 0 1 2.525 5.771"></path><path d="M19.505 10.294a4 4 0 0 1-1.5 7.706"></path><path d="M4.032 17.483A4 4 0 0 0 11.464 20c.18-.311.892-.311 1.072 0a4 4 0 0 0 7.432-2.516"></path><path d="M4.5 10.291A4 4 0 0 0 6 18"></path><path d="M6.002 5.125a3 3 0 0 0 .4 1.375"></path><path d="m9.228 10.852-.923-.383"></path><path d="m9.228 13.148-.923.383"></path><circle cx=12 cy=12 r=3>`),
  _tmpl$225 = /*#__PURE__*/_$template(`<svg><path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"></path><path d="M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z"></path><path d="M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4"></path><path d="M17.599 6.5a3 3 0 0 0 .399-1.375"></path><path d="M6.003 5.125A3 3 0 0 0 6.401 6.5"></path><path d="M3.477 10.896a4 4 0 0 1 .585-.396"></path><path d="M19.938 10.5a4 4 0 0 1 .585.396"></path><path d="M6 18a4 4 0 0 1-1.967-.516"></path><path d="M19.967 17.484A4 4 0 0 1 18 18">`),
  _tmpl$226 = /*#__PURE__*/_$template(`<svg><path d="M16 3v2.107"></path><path d="M17 9c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 22 17a5 5 0 0 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C13 11.5 16 9 17 9"></path><path d="M21 8.274V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.938"></path><path d="M3 15h5.253"></path><path d="M3 9h8.228"></path><path d="M8 15v6"></path><path d="M8 3v6">`),
  _tmpl$227 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M12 9v6"></path><path d="M16 15v6"></path><path d="M16 3v6"></path><path d="M3 15h18"></path><path d="M3 9h18"></path><path d="M8 15v6"></path><path d="M8 3v6">`),
  _tmpl$228 = /*#__PURE__*/_$template(`<svg><path d="M12 12h.01"></path><path d="M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2"></path><path d="M22 13a18.15 18.15 0 0 1-20 0"></path><rect width=20 height=14 x=2 y=6 rx=2>`),
  _tmpl$229 = /*#__PURE__*/_$template(`<svg><path d="M10 20v2"></path><path d="M14 20v2"></path><path d="M18 20v2"></path><path d="M21 20H3"></path><path d="M6 20v2"></path><path d="M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12"></path><rect x=4 y=6 width=16 height=10 rx=2>`),
  _tmpl$230 = /*#__PURE__*/_$template(`<svg><path d="M12 11v4"></path><path d="M14 13h-4"></path><path d="M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2"></path><path d="M18 6v14"></path><path d="M6 6v14"></path><rect width=20 height=14 x=2 y=6 rx=2>`),
  _tmpl$231 = /*#__PURE__*/_$template(`<svg><path d="M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path><rect width=20 height=14 x=2 y=6 rx=2>`),
  _tmpl$232 = /*#__PURE__*/_$template(`<svg><rect x=8 y=8 width=8 height=8 rx=2></rect><path d="M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2"></path><path d="M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2">`),
  _tmpl$233 = /*#__PURE__*/_$template(`<svg><path d="m16 22-1-4"></path><path d="M19 13.99a1 1 0 0 0 1-1V12a2 2 0 0 0-2-2h-3a1 1 0 0 1-1-1V4a2 2 0 0 0-4 0v5a1 1 0 0 1-1 1H6a2 2 0 0 0-2 2v.99a1 1 0 0 0 1 1"></path><path d="M5 14h14l1.973 6.767A1 1 0 0 1 20 22H4a1 1 0 0 1-.973-1.233z"></path><path d="m8 22 1-4">`),
  _tmpl$234 = /*#__PURE__*/_$template(`<svg><path d="m11 10 3 3"></path><path d="M6.5 21A3.5 3.5 0 1 0 3 17.5a2.62 2.62 0 0 1-.708 1.792A1 1 0 0 0 3 21z"></path><path d="M9.969 17.031 21.378 5.624a1 1 0 0 0-3.002-3.002L6.967 14.031">`),
  _tmpl$235 = /*#__PURE__*/_$template(`<svg><path d="M7.2 14.8a2 2 0 0 1 2 2"></path><circle cx=18.5 cy=8.5 r=3.5></circle><circle cx=7.5 cy=16.5 r=5.5></circle><circle cx=7.5 cy=4.5 r=2.5>`),
  _tmpl$236 = /*#__PURE__*/_$template(`<svg><path d="M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2"></path><path d="M14.12 3.88 16 2"></path><path d="M22 13h-4v-2a4 4 0 0 0-4-4h-1.3"></path><path d="M20.97 5c0 2.1-1.6 3.8-3.5 4"></path><path d="m2 2 20 20"></path><path d="M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13"></path><path d="M12 20v-8"></path><path d="M6 13H2"></path><path d="M3 21c0-2.1 1.7-3.9 3.8-4">`),
  _tmpl$237 = /*#__PURE__*/_$template(`<svg><path d="M12.765 21.522a.5.5 0 0 1-.765-.424v-8.196a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z"></path><path d="M14.12 3.88 16 2"></path><path d="M18 11a4 4 0 0 0-4-4h-4a4 4 0 0 0-4 4v3a6.1 6.1 0 0 0 2 4.5"></path><path d="M20.97 5c0 2.1-1.6 3.8-3.5 4"></path><path d="M3 21c0-2.1 1.7-3.9 3.8-4"></path><path d="M6 13H2"></path><path d="M6.53 9C4.6 8.8 3 7.1 3 5"></path><path d="m8 2 1.88 1.88"></path><path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1">`),
  _tmpl$238 = /*#__PURE__*/_$template(`<svg><path d="m8 2 1.88 1.88"></path><path d="M14.12 3.88 16 2"></path><path d="M9 7.13v-1a3.003 3.003 0 1 1 6 0v1"></path><path d="M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6"></path><path d="M12 20v-9"></path><path d="M6.53 9C4.6 8.8 3 7.1 3 5"></path><path d="M6 13H2"></path><path d="M3 21c0-2.1 1.7-3.9 3.8-4"></path><path d="M20.97 5c0 2.1-1.6 3.8-3.5 4"></path><path d="M22 13h-4"></path><path d="M17.2 17c2.1.1 3.8 1.9 3.8 4">`),
  _tmpl$239 = /*#__PURE__*/_$template(`<svg><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"></path><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"></path><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"></path><path d="M10 6h4"></path><path d="M10 10h4"></path><path d="M10 14h4"></path><path d="M10 18h4">`),
  _tmpl$240 = /*#__PURE__*/_$template(`<svg><rect width=16 height=20 x=4 y=2 rx=2 ry=2></rect><path d="M9 22v-4h6v4"></path><path d="M8 6h.01"></path><path d="M16 6h.01"></path><path d="M12 6h.01"></path><path d="M12 10h.01"></path><path d="M12 14h.01"></path><path d="M16 10h.01"></path><path d="M16 14h.01"></path><path d="M8 10h.01"></path><path d="M8 14h.01">`),
  _tmpl$241 = /*#__PURE__*/_$template(`<svg><path d="M4 6 2 7"></path><path d="M10 6h4"></path><path d="m22 7-2-1"></path><rect width=16 height=16 x=4 y=3 rx=2></rect><path d="M4 11h16"></path><path d="M8 15h.01"></path><path d="M16 15h.01"></path><path d="M6 19v2"></path><path d="M18 21v-2">`),
  _tmpl$242 = /*#__PURE__*/_$template(`<svg><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx=7 cy=18 r=2></circle><path d="M9 18h5"></path><circle cx=16 cy=18 r=2>`),
  _tmpl$243 = /*#__PURE__*/_$template(`<svg><path d="M10 3h.01"></path><path d="M14 2h.01"></path><path d="m2 9 20-5"></path><path d="M12 12V6.5"></path><rect width=16 height=10 x=4 y=12 rx=3></rect><path d="M9 12v5"></path><path d="M15 12v5"></path><path d="M4 17h16">`),
  _tmpl$244 = /*#__PURE__*/_$template(`<svg><path d="M17 21v-2a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1"></path><path d="M19 15V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V9"></path><path d="M21 21v-2h-4"></path><path d="M3 5h4V3"></path><path d="M7 5a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1V3">`),
  _tmpl$245 = /*#__PURE__*/_$template(`<svg><circle cx=9 cy=7 r=2></circle><path d="M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6"></path><path d="M16 13H3"></path><path d="M16 17H3">`),
  _tmpl$246 = /*#__PURE__*/_$template(`<svg><path d="M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8"></path><path d="M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1"></path><path d="M2 21h20"></path><path d="M7 8v3"></path><path d="M12 8v3"></path><path d="M17 8v3"></path><path d="M7 4h.01"></path><path d="M12 4h.01"></path><path d="M17 4h.01">`),
  _tmpl$247 = /*#__PURE__*/_$template(`<svg><rect width=16 height=20 x=4 y=2 rx=2></rect><line x1=8 x2=16 y1=6 y2=6></line><line x1=16 x2=16 y1=14 y2=18></line><path d="M16 10h.01"></path><path d="M12 10h.01"></path><path d="M8 10h.01"></path><path d="M12 14h.01"></path><path d="M8 14h.01"></path><path d="M12 18h.01"></path><path d="M8 18h.01">`),
  _tmpl$248 = /*#__PURE__*/_$template(`<svg><path d="M11 14h1v4"></path><path d="M16 2v4"></path><path d="M3 10h18"></path><path d="M8 2v4"></path><rect x=3 y=4 width=18 height=18 rx=2>`),
  _tmpl$249 = /*#__PURE__*/_$template(`<svg><path d="m14 18 4 4 4-4"></path><path d="M16 2v4"></path><path d="M18 14v8"></path><path d="M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343"></path><path d="M3 10h18"></path><path d="M8 2v4">`),
  _tmpl$250 = /*#__PURE__*/_$template(`<svg><path d="m14 18 4-4 4 4"></path><path d="M16 2v4"></path><path d="M18 22v-8"></path><path d="M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9"></path><path d="M3 10h18"></path><path d="M8 2v4">`),
  _tmpl$251 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><path d="M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"></path><path d="M3 10h18"></path><path d="m16 20 2 2 4-4">`),
  _tmpl$252 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18"></path><path d="m9 16 2 2 4-4">`),
  _tmpl$253 = /*#__PURE__*/_$template(`<svg><path d="M16 14v2.2l1.6 1"></path><path d="M16 2v4"></path><path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5"></path><path d="M3 10h5"></path><path d="M8 2v4"></path><circle cx=16 cy=16 r=6>`),
  _tmpl$254 = /*#__PURE__*/_$template(`<svg><path d="m15.228 16.852-.923-.383"></path><path d="m15.228 19.148-.923.383"></path><path d="M16 2v4"></path><path d="m16.47 14.305.382.923"></path><path d="m16.852 20.772-.383.924"></path><path d="m19.148 15.228.383-.923"></path><path d="m19.53 21.696-.382-.924"></path><path d="m20.772 16.852.924-.383"></path><path d="m20.772 19.148.924.383"></path><path d="M21 11V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"></path><path d="M3 10h18"></path><path d="M8 2v4"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$255 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18"></path><path d="M8 14h.01"></path><path d="M12 14h.01"></path><path d="M16 14h.01"></path><path d="M8 18h.01"></path><path d="M12 18h.01"></path><path d="M16 18h.01">`),
  _tmpl$256 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><path d="M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"></path><path d="M3 10h18"></path><path d="M15 22v-4a2 2 0 0 1 2-2h4">`),
  _tmpl$257 = /*#__PURE__*/_$template(`<svg><path d="M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7"></path><path d="M8 2v4"></path><path d="M16 2v4"></path><path d="M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z">`),
  _tmpl$258 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18"></path><path d="M10 16h4">`),
  _tmpl$259 = /*#__PURE__*/_$template(`<svg><path d="M16 19h6"></path><path d="M16 2v4"></path><path d="M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5"></path><path d="M3 10h18"></path><path d="M8 2v4">`),
  _tmpl$260 = /*#__PURE__*/_$template(`<svg><path d="M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18"></path><path d="M21 15.5V6a2 2 0 0 0-2-2H9.5"></path><path d="M16 2v4"></path><path d="M3 10h7"></path><path d="M21 10h-5.5"></path><path d="m2 2 20 20">`),
  _tmpl$261 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18"></path><path d="M10 16h4"></path><path d="M12 14v4">`),
  _tmpl$262 = /*#__PURE__*/_$template(`<svg><path d="M16 19h6"></path><path d="M16 2v4"></path><path d="M19 16v6"></path><path d="M21 12.598V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5"></path><path d="M3 10h18"></path><path d="M8 2v4">`),
  _tmpl$263 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M16 2v4"></path><path d="M3 10h18"></path><path d="M8 2v4"></path><path d="M17 14h-6"></path><path d="M13 18H7"></path><path d="M7 14h.01"></path><path d="M17 18h.01">`),
  _tmpl$264 = /*#__PURE__*/_$template(`<svg><path d="M16 2v4"></path><path d="M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25"></path><path d="m22 22-1.875-1.875"></path><path d="M3 10h18"></path><path d="M8 2v4"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$265 = /*#__PURE__*/_$template(`<svg><path d="M11 10v4h4"></path><path d="m11 14 1.535-1.605a5 5 0 0 1 8 1.5"></path><path d="M16 2v4"></path><path d="m21 18-1.535 1.605a5 5 0 0 1-8-1.5"></path><path d="M21 22v-4h-4"></path><path d="M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3"></path><path d="M3 10h4"></path><path d="M8 2v4">`),
  _tmpl$266 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><path d="M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"></path><path d="M3 10h18"></path><path d="m17 22 5-5"></path><path d="m17 17 5 5">`),
  _tmpl$267 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18"></path><path d="m14 14-4 4"></path><path d="m10 14 4 4">`),
  _tmpl$268 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M16 2v4"></path><rect width=18 height=18 x=3 y=4 rx=2></rect><path d="M3 10h18">`),
  _tmpl$269 = /*#__PURE__*/_$template(`<svg><line x1=2 x2=22 y1=2 y2=22></line><path d="M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16"></path><path d="M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5"></path><path d="M14.121 15.121A3 3 0 1 1 9.88 10.88">`),
  _tmpl$270 = /*#__PURE__*/_$template(`<svg><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"></path><circle cx=12 cy=13 r=3>`),
  _tmpl$271 = /*#__PURE__*/_$template(`<svg><path d="M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z"></path><path d="M17.75 7 15 2.1"></path><path d="M10.9 4.8 13 9"></path><path d="m7.9 9.7 2 4.4"></path><path d="M4.9 14.7 7 18.9">`),
  _tmpl$272 = /*#__PURE__*/_$template(`<svg><path d="M10 10v7.9"></path><path d="M11.802 6.145a5 5 0 0 1 6.053 6.053"></path><path d="M14 6.1v2.243"></path><path d="m15.5 15.571-.964.964a5 5 0 0 1-7.071 0 5 5 0 0 1 0-7.07l.964-.965"></path><path d="M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"></path><path d="m2 2 20 20"></path><path d="M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4">`),
  _tmpl$273 = /*#__PURE__*/_$template(`<svg><path d="M10 7v10.9"></path><path d="M14 6.1V17"></path><path d="M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"></path><path d="M16.536 7.465a5 5 0 0 0-7.072 0l-2 2a5 5 0 0 0 0 7.07 5 5 0 0 0 7.072 0l2-2a5 5 0 0 0 0-7.07"></path><path d="M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4">`),
  _tmpl$274 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-4"></path><path d="M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6">`),
  _tmpl$275 = /*#__PURE__*/_$template(`<svg><path d="M10.5 5H19a2 2 0 0 1 2 2v8.5"></path><path d="M17 11h-.5"></path><path d="M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2"></path><path d="m2 2 20 20"></path><path d="M7 11h4"></path><path d="M7 15h2.5">`),
  _tmpl$276 = /*#__PURE__*/_$template(`<svg><rect width=18 height=14 x=3 y=5 rx=2 ry=2></rect><path d="M7 15h4M15 15h2M7 11h2M13 11h4">`),
  _tmpl$277 = /*#__PURE__*/_$template(`<svg><path d="m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"></path><path d="M7 14h.01"></path><path d="M17 14h.01"></path><rect width=18 height=8 x=3 y=10 rx=2></rect><path d="M5 18v2"></path><path d="M19 18v2">`),
  _tmpl$278 = /*#__PURE__*/_$template(`<svg><path d="M10 2h4"></path><path d="m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"></path><path d="M7 14h.01"></path><path d="M17 14h.01"></path><rect width=18 height=8 x=3 y=10 rx=2></rect><path d="M5 18v2"></path><path d="M19 18v2">`),
  _tmpl$279 = /*#__PURE__*/_$template(`<svg><path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2"></path><circle cx=7 cy=17 r=2></circle><path d="M9 17h6"></path><circle cx=17 cy=17 r=2>`),
  _tmpl$280 = /*#__PURE__*/_$template(`<svg><path d="M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2"></path><path d="M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2"></path><path d="M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9"></path><circle cx=8 cy=19 r=2>`),
  _tmpl$281 = /*#__PURE__*/_$template(`<svg><path d="M12 14v4"></path><path d="M14.172 2a2 2 0 0 1 1.414.586l3.828 3.828A2 2 0 0 1 20 7.828V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z"></path><path d="M8 14h8"></path><rect x=8 y=10 width=8 height=8 rx=1>`),
  _tmpl$282 = /*#__PURE__*/_$template(`<svg><path d="M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46"></path><path d="M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z"></path><path d="M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z">`),
  _tmpl$283 = /*#__PURE__*/_$template(`<svg><circle cx=7 cy=12 r=3></circle><path d="M10 9v6"></path><circle cx=17 cy=12 r=3></circle><path d="M14 7v8">`),
  _tmpl$284 = /*#__PURE__*/_$template(`<svg><path d="m3 15 4-8 4 8"></path><path d="M4 13h6"></path><circle cx=18 cy=12 r=3></circle><path d="M21 9v6">`),
  _tmpl$285 = /*#__PURE__*/_$template(`<svg><path d="m3 15 4-8 4 8"></path><path d="M4 13h6"></path><path d="M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4">`),
  _tmpl$286 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><circle cx=8 cy=10 r=2></circle><path d="M8 12h8"></path><circle cx=16 cy=10 r=2></circle><path d="m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3">`),
  _tmpl$287 = /*#__PURE__*/_$template(`<svg><path d="M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"></path><path d="M2 12a9 9 0 0 1 8 8"></path><path d="M2 16a5 5 0 0 1 4 4"></path><line x1=2 x2=2.01 y1=20 y2=20>`),
  _tmpl$288 = /*#__PURE__*/_$template(`<svg><path d="M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z"></path><path d="M18 11V4H6v7"></path><path d="M15 22v-4a3 3 0 0 0-3-3a3 3 0 0 0-3 3v4"></path><path d="M22 11V9"></path><path d="M2 11V9"></path><path d="M6 4V2"></path><path d="M18 4V2"></path><path d="M10 4V2"></path><path d="M14 4V2">`),
  _tmpl$289 = /*#__PURE__*/_$template(`<svg><path d="M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z"></path><path d="M8 14v.5"></path><path d="M16 14v.5"></path><path d="M11.25 16.25h1.5L12 17l-.75-.75Z">`),
  _tmpl$290 = /*#__PURE__*/_$template(`<svg><path d="M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97"></path><path d="M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z"></path><path d="M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15"></path><path d="M2 21v-4"></path><path d="M7 9h.01">`),
  _tmpl$291 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z">`),
  _tmpl$292 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><rect x=7 y=13 width=9 height=4 rx=1></rect><rect x=7 y=5 width=12 height=4 rx=1>`),
  _tmpl$293 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M7 11h8"></path><path d="M7 16h3"></path><path d="M7 6h12">`),
  _tmpl$294 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M7 11h8"></path><path d="M7 16h12"></path><path d="M7 6h3">`),
  _tmpl$295 = /*#__PURE__*/_$template(`<svg><path d="M11 13v4"></path><path d="M15 5v4"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><rect x=7 y=13 width=9 height=4 rx=1></rect><rect x=7 y=5 width=12 height=4 rx=1>`),
  _tmpl$296 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M7 16h8"></path><path d="M7 11h12"></path><path d="M7 6h3">`),
  _tmpl$297 = /*#__PURE__*/_$template(`<svg><path d="M9 5v4"></path><rect width=4 height=6 x=7 y=9 rx=1></rect><path d="M9 15v2"></path><path d="M17 3v2"></path><rect width=4 height=8 x=15 y=5 rx=1></rect><path d="M17 13v3"></path><path d="M3 3v16a2 2 0 0 0 2 2h16">`),
  _tmpl$298 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><rect x=15 y=5 width=4 height=12 rx=1></rect><rect x=7 y=8 width=4 height=9 rx=1>`),
  _tmpl$299 = /*#__PURE__*/_$template(`<svg><path d="M13 17V9"></path><path d="M18 17v-3"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M8 17V5">`),
  _tmpl$300 = /*#__PURE__*/_$template(`<svg><path d="M13 17V9"></path><path d="M18 17V5"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M8 17v-3">`),
  _tmpl$301 = /*#__PURE__*/_$template(`<svg><path d="M11 13H7"></path><path d="M19 9h-4"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><rect x=15 y=5 width=4 height=12 rx=1></rect><rect x=7 y=8 width=4 height=9 rx=1>`),
  _tmpl$302 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M18 17V9"></path><path d="M13 17V5"></path><path d="M8 17v-3">`),
  _tmpl$303 = /*#__PURE__*/_$template(`<svg><path d="M10 6h8"></path><path d="M12 16h6"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M8 11h7">`),
  _tmpl$304 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="m19 9-5 5-4-4-3 3">`),
  _tmpl$305 = /*#__PURE__*/_$template(`<svg><path d="m13.11 7.664 1.78 2.672"></path><path d="m14.162 12.788-3.324 1.424"></path><path d="m20 4-6.06 1.515"></path><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><circle cx=12 cy=6 r=2></circle><circle cx=16 cy=12 r=2></circle><circle cx=9 cy=15 r=2>`),
  _tmpl$306 = /*#__PURE__*/_$template(`<svg><path d="M12 20V10"></path><path d="M18 20v-4"></path><path d="M6 20V4">`),
  _tmpl$307 = /*#__PURE__*/_$template(`<svg><line x1=12 x2=12 y1=20 y2=10></line><line x1=18 x2=18 y1=20 y2=4></line><line x1=6 x2=6 y1=20 y2=16>`),
  _tmpl$308 = /*#__PURE__*/_$template(`<svg><line x1=18 x2=18 y1=20 y2=10></line><line x1=12 x2=12 y1=20 y2=4></line><line x1=6 x2=6 y1=20 y2=14>`),
  _tmpl$309 = /*#__PURE__*/_$template(`<svg><path d="M12 16v5"></path><path d="M16 14v7"></path><path d="M20 10v11"></path><path d="m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15"></path><path d="M4 18v3"></path><path d="M8 14v7">`),
  _tmpl$310 = /*#__PURE__*/_$template(`<svg><path d="M8 6h10"></path><path d="M6 12h9"></path><path d="M11 18h7">`),
  _tmpl$311 = /*#__PURE__*/_$template(`<svg><path d="M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z"></path><path d="M21.21 15.89A10 10 0 1 1 8 2.83">`),
  _tmpl$312 = /*#__PURE__*/_$template(`<svg><circle cx=7.5 cy=7.5 r=.5 fill=currentColor></circle><circle cx=18.5 cy=5.5 r=.5 fill=currentColor></circle><circle cx=11.5 cy=11.5 r=.5 fill=currentColor></circle><circle cx=7.5 cy=16.5 r=.5 fill=currentColor></circle><circle cx=17.5 cy=14.5 r=.5 fill=currentColor></circle><path d="M3 3v16a2 2 0 0 0 2 2h16">`),
  _tmpl$313 = /*#__PURE__*/_$template(`<svg><path d="M3 3v16a2 2 0 0 0 2 2h16"></path><path d="M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7">`),
  _tmpl$314 = /*#__PURE__*/_$template(`<svg><path d="M18 6 7 17l-5-5"></path><path d="m22 10-7.5 7.5L13 16">`),
  _tmpl$315 = /*#__PURE__*/_$template(`<svg><path d="M20 4L9 15"></path><path d="M21 19L3 19"></path><path d="M9 15L4 10">`),
  _tmpl$316 = /*#__PURE__*/_$template(`<svg><path d="M20 6 9 17l-5-5">`),
  _tmpl$317 = /*#__PURE__*/_$template(`<svg><path d="M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z"></path><path d="M6 17h12">`),
  _tmpl$318 = /*#__PURE__*/_$template(`<svg><path d="M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"></path><path d="M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"></path><path d="M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12"></path><path d="M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z">`),
  _tmpl$319 = /*#__PURE__*/_$template(`<svg><path d="m6 9 6 6 6-6">`),
  _tmpl$320 = /*#__PURE__*/_$template(`<svg><path d="m17 18-6-6 6-6"></path><path d="M7 6v12">`),
  _tmpl$321 = /*#__PURE__*/_$template(`<svg><path d="m7 18 6-6-6-6"></path><path d="M17 6v12">`),
  _tmpl$322 = /*#__PURE__*/_$template(`<svg><path d="m15 18-6-6 6-6">`),
  _tmpl$323 = /*#__PURE__*/_$template(`<svg><path d="m9 18 6-6-6-6">`),
  _tmpl$324 = /*#__PURE__*/_$template(`<svg><path d="m18 15-6-6-6 6">`),
  _tmpl$325 = /*#__PURE__*/_$template(`<svg><path d="m7 20 5-5 5 5"></path><path d="m7 4 5 5 5-5">`),
  _tmpl$326 = /*#__PURE__*/_$template(`<svg><path d="m7 6 5 5 5-5"></path><path d="m7 13 5 5 5-5">`),
  _tmpl$327 = /*#__PURE__*/_$template(`<svg><path d="M12 12h.01"></path><path d="M16 12h.01"></path><path d="m17 7 5 5-5 5"></path><path d="m7 7-5 5 5 5"></path><path d="M8 12h.01">`),
  _tmpl$328 = /*#__PURE__*/_$template(`<svg><path d="m9 7-5 5 5 5"></path><path d="m15 7 5 5-5 5">`),
  _tmpl$329 = /*#__PURE__*/_$template(`<svg><path d="m11 17-5-5 5-5"></path><path d="m18 17-5-5 5-5">`),
  _tmpl$330 = /*#__PURE__*/_$template(`<svg><path d="m20 17-5-5 5-5"></path><path d="m4 17 5-5-5-5">`),
  _tmpl$331 = /*#__PURE__*/_$template(`<svg><path d="m6 17 5-5-5-5"></path><path d="m13 17 5-5-5-5">`),
  _tmpl$332 = /*#__PURE__*/_$template(`<svg><path d="m7 15 5 5 5-5"></path><path d="m7 9 5-5 5 5">`),
  _tmpl$333 = /*#__PURE__*/_$template(`<svg><path d="m17 11-5-5-5 5"></path><path d="m17 18-5-5-5 5">`),
  _tmpl$334 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=12 r=4></circle><line x1=21.17 x2=12 y1=8 y2=8></line><line x1=3.95 x2=8.54 y1=6.06 y2=14></line><line x1=10.88 x2=15.46 y1=21.94 y2=14>`),
  _tmpl$335 = /*#__PURE__*/_$template(`<svg><path d="M10 9h4"></path><path d="M12 7v5"></path><path d="M14 22v-4a2 2 0 0 0-4 0v4"></path><path d="M18 22V5.618a1 1 0 0 0-.553-.894l-4.553-2.277a2 2 0 0 0-1.788 0L6.553 4.724A1 1 0 0 0 6 5.618V22"></path><path d="m18 7 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.618a1 1 0 0 1 .553-.894L6 7">`),
  _tmpl$336 = /*#__PURE__*/_$template(`<svg><path d="M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13"></path><path d="M18 8c0-2.5-2-2.5-2-5"></path><path d="m2 2 20 20"></path><path d="M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866"></path><path d="M22 8c0-2.5-2-2.5-2-5"></path><path d="M7 12v4">`),
  _tmpl$337 = /*#__PURE__*/_$template(`<svg><path d="M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14"></path><path d="M18 8c0-2.5-2-2.5-2-5"></path><path d="M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"></path><path d="M22 8c0-2.5-2-2.5-2-5"></path><path d="M7 12v4">`),
  _tmpl$338 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><line x1=12 x2=12 y1=8 y2=12></line><line x1=12 x2=12.01 y1=16 y2=16>`),
  _tmpl$339 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M12 8v8"></path><path d="m8 12 4 4 4-4">`),
  _tmpl$340 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m12 8-4 4 4 4"></path><path d="M16 12H8">`),
  _tmpl$341 = /*#__PURE__*/_$template(`<svg><path d="M2 12a10 10 0 1 1 10 10"></path><path d="m2 22 10-10"></path><path d="M8 22H2v-6">`),
  _tmpl$342 = /*#__PURE__*/_$template(`<svg><path d="M12 22a10 10 0 1 1 10-10"></path><path d="M22 22 12 12"></path><path d="M22 16v6h-6">`),
  _tmpl$343 = /*#__PURE__*/_$template(`<svg><path d="M2 8V2h6"></path><path d="m2 2 10 10"></path><path d="M12 2A10 10 0 1 1 2 12">`),
  _tmpl$344 = /*#__PURE__*/_$template(`<svg><path d="M22 12A10 10 0 1 1 12 2"></path><path d="M22 2 12 12"></path><path d="M16 2h6v6">`),
  _tmpl$345 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m12 16 4-4-4-4"></path><path d="M8 12h8">`),
  _tmpl$346 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m16 12-4-4-4 4"></path><path d="M12 16V8">`),
  _tmpl$347 = /*#__PURE__*/_$template(`<svg><path d="M21.801 10A10 10 0 1 1 17 3.335"></path><path d="m9 11 3 3L22 4">`),
  _tmpl$348 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m9 12 2 2 4-4">`),
  _tmpl$349 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m16 10-4 4-4-4">`),
  _tmpl$350 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m14 16-4-4 4-4">`),
  _tmpl$351 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m10 8 4 4-4 4">`),
  _tmpl$352 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m8 14 4-4 4 4">`),
  _tmpl$353 = /*#__PURE__*/_$template(`<svg><path d="M10.1 2.182a10 10 0 0 1 3.8 0"></path><path d="M13.9 21.818a10 10 0 0 1-3.8 0"></path><path d="M17.609 3.721a10 10 0 0 1 2.69 2.7"></path><path d="M2.182 13.9a10 10 0 0 1 0-3.8"></path><path d="M20.279 17.609a10 10 0 0 1-2.7 2.69"></path><path d="M21.818 10.1a10 10 0 0 1 0 3.8"></path><path d="M3.721 6.391a10 10 0 0 1 2.7-2.69"></path><path d="M6.391 20.279a10 10 0 0 1-2.69-2.7">`),
  _tmpl$354 = /*#__PURE__*/_$template(`<svg><line x1=8 x2=16 y1=12 y2=12></line><line x1=12 x2=12 y1=16 y2=16></line><line x1=12 x2=12 y1=8 y2=8></line><circle cx=12 cy=12 r=10>`),
  _tmpl$355 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"></path><path d="M12 18V6">`),
  _tmpl$356 = /*#__PURE__*/_$template(`<svg><path d="M10.1 2.18a9.93 9.93 0 0 1 3.8 0"></path><path d="M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7"></path><path d="M21.82 10.1a9.93 9.93 0 0 1 0 3.8"></path><path d="M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69"></path><path d="M13.9 21.82a9.94 9.94 0 0 1-3.8 0"></path><path d="M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7"></path><path d="M2.18 13.9a9.93 9.93 0 0 1 0-3.8"></path><path d="M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69"></path><circle cx=12 cy=12 r=1>`),
  _tmpl$357 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=12 r=1>`),
  _tmpl$358 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M17 12h.01"></path><path d="M12 12h.01"></path><path d="M7 12h.01">`),
  _tmpl$359 = /*#__PURE__*/_$template(`<svg><path d="M7 10h10"></path><path d="M7 14h10"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$360 = /*#__PURE__*/_$template(`<svg><path d="M12 2a10 10 0 0 1 7.38 16.75"></path><path d="m16 12-4-4-4 4"></path><path d="M12 16V8"></path><path d="M2.5 8.875a10 10 0 0 0-.5 3"></path><path d="M2.83 16a10 10 0 0 0 2.43 3.4"></path><path d="M4.636 5.235a10 10 0 0 1 .891-.857"></path><path d="M8.644 21.42a10 10 0 0 0 7.631-.38">`),
  _tmpl$361 = /*#__PURE__*/_$template(`<svg><path d="M12 2a10 10 0 0 1 7.38 16.75"></path><path d="M12 8v8"></path><path d="M16 12H8"></path><path d="M2.5 8.875a10 10 0 0 0-.5 3"></path><path d="M2.83 16a10 10 0 0 0 2.43 3.4"></path><path d="M4.636 5.235a10 10 0 0 1 .891-.857"></path><path d="M8.644 21.42a10 10 0 0 0 7.631-.38">`),
  _tmpl$362 = /*#__PURE__*/_$template(`<svg><path d="M15.6 2.7a10 10 0 1 0 5.7 5.7"></path><circle cx=12 cy=12 r=2></circle><path d="M13.4 10.6 19 5">`),
  _tmpl$363 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M8 12h8">`),
  _tmpl$364 = /*#__PURE__*/_$template(`<svg><path d="m2 2 20 20"></path><path d="M8.35 2.69A10 10 0 0 1 21.3 15.65"></path><path d="M19.08 19.08A10 10 0 1 1 4.92 4.92">`),
  _tmpl$365 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m5 5 14 14"></path><path d="M13 13a3 3 0 1 0 0-6H9v2"></path><path d="M9 17v-2.34">`),
  _tmpl$366 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M9 17V7h4a3 3 0 0 1 0 6H9">`),
  _tmpl$367 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><line x1=10 x2=10 y1=15 y2=9></line><line x1=14 x2=14 y1=15 y2=9>`),
  _tmpl$368 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m15 9-6 6"></path><path d="M9 9h.01"></path><path d="M15 15h.01">`),
  _tmpl$369 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><polygon points="10 8 16 12 10 16 10 8">`),
  _tmpl$370 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M8 12h8"></path><path d="M12 8v8">`),
  _tmpl$371 = /*#__PURE__*/_$template(`<svg><path d="M10 16V9.5a1 1 0 0 1 5 0"></path><path d="M8 12h4"></path><path d="M8 16h7"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$372 = /*#__PURE__*/_$template(`<svg><path d="M12 7v4"></path><path d="M7.998 9.003a5 5 0 1 0 8-.005"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$373 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><path d="M12 17h.01">`),
  _tmpl$374 = /*#__PURE__*/_$template(`<svg><path d="M22 2 2 22"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$375 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><line x1=9 x2=15 y1=15 y2=9>`),
  _tmpl$376 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=6>`),
  _tmpl$377 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><rect x=9 y=9 width=6 height=6 rx=1>`),
  _tmpl$378 = /*#__PURE__*/_$template(`<svg><path d="M18 20a6 6 0 0 0-12 0"></path><circle cx=12 cy=10 r=4></circle><circle cx=12 cy=12 r=10>`),
  _tmpl$379 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=10 r=3></circle><path d="M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662">`),
  _tmpl$380 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m15 9-6 6"></path><path d="m9 9 6 6">`),
  _tmpl$381 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10>`),
  _tmpl$382 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M11 9h4a2 2 0 0 0 2-2V3"></path><circle cx=9 cy=9 r=2></circle><path d="M7 21v-4a2 2 0 0 1 2-2h4"></path><circle cx=15 cy=15 r=2>`),
  _tmpl$383 = /*#__PURE__*/_$template(`<svg><path d="M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z"></path><path d="M19.65 15.66A8 8 0 0 1 8.35 4.34"></path><path d="m14 10-5.5 5.5"></path><path d="M14 17.85V10H6.15">`),
  _tmpl$384 = /*#__PURE__*/_$template(`<svg><path d="M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z"></path><path d="m6.2 5.3 3.1 3.9"></path><path d="m12.4 3.4 3.1 4"></path><path d="M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z">`),
  _tmpl$385 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="m9 14 2 2 4-4">`),
  _tmpl$386 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"></path><path d="M16 4h2a2 2 0 0 1 2 2v4"></path><path d="M21 14H11"></path><path d="m15 10-4 4 4 4">`),
  _tmpl$387 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M12 11h4"></path><path d="M12 16h4"></path><path d="M8 11h.01"></path><path d="M8 16h.01">`),
  _tmpl$388 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M9 14h6">`),
  _tmpl$389 = /*#__PURE__*/_$template(`<svg><path d="M11 14h10"></path><path d="M16 4h2a2 2 0 0 1 2 2v1.344"></path><path d="m17 18 4-4-4-4"></path><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 1.793-1.113"></path><rect x=8 y=2 width=8 height=4 rx=1>`),
  _tmpl$390 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1></rect><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5"></path><path d="M16 4h2a2 2 0 0 1 1.73 1"></path><path d="M8 18h1"></path><path d="M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z">`),
  _tmpl$391 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5"></path><path d="M4 13.5V6a2 2 0 0 1 2-2h2"></path><path d="M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z">`),
  _tmpl$392 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M9 14h6"></path><path d="M12 17v-6">`),
  _tmpl$393 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M9 12v-1h6v1"></path><path d="M11 17h2"></path><path d="M12 11v6">`),
  _tmpl$394 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="m15 11-6 6"></path><path d="m9 11 6 6">`),
  _tmpl$395 = /*#__PURE__*/_$template(`<svg><rect width=8 height=4 x=8 y=2 rx=1 ry=1></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2">`),
  _tmpl$396 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l2-4"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$397 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l-4-2"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$398 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l-2-4"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$399 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$400 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l4-2"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$401 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6h4"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$402 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l4 2"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$403 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l2 4"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$404 = /*#__PURE__*/_$template(`<svg><path d="M12 6v10"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$405 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l-2 4"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$406 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l-4 2"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$407 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6H8"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$408 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l4 2"></path><path d="M20 12v5"></path><path d="M20 21h.01"></path><path d="M21.25 8.2A10 10 0 1 0 16 21.16">`),
  _tmpl$409 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l2 1"></path><path d="M12.337 21.994a10 10 0 1 1 9.588-8.767"></path><path d="m14 18 4 4 4-4"></path><path d="M18 14v8">`),
  _tmpl$410 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l1.56.78"></path><path d="M13.227 21.925a10 10 0 1 1 8.767-9.588"></path><path d="m14 18 4-4 4 4"></path><path d="M18 22v-8">`),
  _tmpl$411 = /*#__PURE__*/_$template(`<svg><path d="M12 2a10 10 0 0 1 7.38 16.75"></path><path d="M12 6v6l4 2"></path><path d="M2.5 8.875a10 10 0 0 0-.5 3"></path><path d="M2.83 16a10 10 0 0 0 2.43 3.4"></path><path d="M4.636 5.235a10 10 0 0 1 .891-.857"></path><path d="M8.644 21.42a10 10 0 0 0 7.631-.38">`),
  _tmpl$412 = /*#__PURE__*/_$template(`<svg><path d="M12 6v6l3.644 1.822"></path><path d="M16 19h6"></path><path d="M19 16v6"></path><path d="M21.92 13.267a10 10 0 1 0-8.653 8.653">`),
  _tmpl$413 = /*#__PURE__*/_$template(`<svg><path d="M12 12v4"></path><path d="M12 20h.01"></path><path d="M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708">`),
  _tmpl$414 = /*#__PURE__*/_$template(`<svg><path d="m17 15-5.5 5.5L9 18"></path><path d="M5 17.743A7 7 0 1 1 15.71 10h1.79a4.5 4.5 0 0 1 1.5 8.742">`),
  _tmpl$415 = /*#__PURE__*/_$template(`<svg><path d="m10.852 19.772-.383.924"></path><path d="m13.148 14.228.383-.923"></path><path d="M13.148 19.772a3 3 0 1 0-2.296-5.544l-.383-.923"></path><path d="m13.53 20.696-.382-.924a3 3 0 1 1-2.296-5.544"></path><path d="m14.772 15.852.923-.383"></path><path d="m14.772 18.148.923.383"></path><path d="M4.2 15.1a7 7 0 1 1 9.93-9.858A7 7 0 0 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2"></path><path d="m9.228 15.852-.923-.383"></path><path d="m9.228 18.148-.923.383">`),
  _tmpl$416 = /*#__PURE__*/_$template(`<svg><path d="M12 13v8l-4-4"></path><path d="m12 21 4-4"></path><path d="M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284">`),
  _tmpl$417 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M8 19v1"></path><path d="M8 14v1"></path><path d="M16 19v1"></path><path d="M16 14v1"></path><path d="M12 21v1"></path><path d="M12 16v1">`),
  _tmpl$418 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M16 17H7"></path><path d="M17 21H9">`),
  _tmpl$419 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M16 14v2"></path><path d="M8 14v2"></path><path d="M16 20h.01"></path><path d="M8 20h.01"></path><path d="M12 16v2"></path><path d="M12 22h.01">`),
  _tmpl$420 = /*#__PURE__*/_$template(`<svg><path d="M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973"></path><path d="m13 12-3 5h4l-3 5">`),
  _tmpl$421 = /*#__PURE__*/_$template(`<svg><path d="M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197"></path><path d="M11 20v2"></path><path d="M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24"></path><path d="M7 19v2">`),
  _tmpl$422 = /*#__PURE__*/_$template(`<svg><path d="M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197"></path><path d="M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z">`),
  _tmpl$423 = /*#__PURE__*/_$template(`<svg><path d="m2 2 20 20"></path><path d="M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193"></path><path d="M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07">`),
  _tmpl$424 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="m9.2 22 3-7"></path><path d="m9 13-3 7"></path><path d="m17 13-3 7">`),
  _tmpl$425 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M16 14v6"></path><path d="M8 14v6"></path><path d="M12 16v6">`),
  _tmpl$426 = /*#__PURE__*/_$template(`<svg><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="M8 15h.01"></path><path d="M8 19h.01"></path><path d="M12 17h.01"></path><path d="M12 21h.01"></path><path d="M16 15h.01"></path><path d="M16 19h.01">`),
  _tmpl$427 = /*#__PURE__*/_$template(`<svg><path d="M12 2v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path d="M20 12h2"></path><path d="m19.07 4.93-1.41 1.41"></path><path d="M15.947 12.65a4 4 0 0 0-5.925-4.128"></path><path d="M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24"></path><path d="M11 20v2"></path><path d="M7 19v2">`),
  _tmpl$428 = /*#__PURE__*/_$template(`<svg><path d="M12 2v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path d="M20 12h2"></path><path d="m19.07 4.93-1.41 1.41"></path><path d="M15.947 12.65a4 4 0 0 0-5.925-4.128"></path><path d="M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z">`),
  _tmpl$429 = /*#__PURE__*/_$template(`<svg><path d="M12 13v8"></path><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path><path d="m8 17 4-4 4 4">`),
  _tmpl$430 = /*#__PURE__*/_$template(`<svg><path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z">`),
  _tmpl$431 = /*#__PURE__*/_$template(`<svg><path d="M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z"></path><path d="M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5">`),
  _tmpl$432 = /*#__PURE__*/_$template(`<svg><path d="M16.17 7.83 2 22"></path><path d="M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12"></path><path d="m7.83 7.83 8.34 8.34">`),
  _tmpl$433 = /*#__PURE__*/_$template(`<svg><path d="M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z"></path><path d="M12 17.66L12 22">`),
  _tmpl$434 = /*#__PURE__*/_$template(`<svg><path d="m18 16 4-4-4-4"></path><path d="m6 8-4 4 4 4"></path><path d="m14.5 4-5 16">`),
  _tmpl$435 = /*#__PURE__*/_$template(`<svg><path d="m16 18 6-6-6-6"></path><path d="m8 6-6 6 6 6">`),
  _tmpl$436 = /*#__PURE__*/_$template(`<svg><polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"></polygon><line x1=12 x2=12 y1=22 y2=15.5></line><polyline points="22 8.5 12 15.5 2 8.5"></polyline><polyline points="2 15.5 12 8.5 22 15.5"></polyline><line x1=12 x2=12 y1=2 y2=8.5>`),
  _tmpl$437 = /*#__PURE__*/_$template(`<svg><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="7.5 4.21 12 6.81 16.5 4.21"></polyline><polyline points="7.5 19.79 7.5 14.6 3 12"></polyline><polyline points="21 12 16.5 14.6 16.5 19.79"></polyline><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1=12 x2=12 y1=22.08 y2=12>`),
  _tmpl$438 = /*#__PURE__*/_$template(`<svg><path d="M10 2v2"></path><path d="M14 2v2"></path><path d="M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1"></path><path d="M6 2v2">`),
  _tmpl$439 = /*#__PURE__*/_$template(`<svg><path d="M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z"></path><path d="M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"></path><path d="M12 2v2"></path><path d="M12 22v-2"></path><path d="m17 20.66-1-1.73"></path><path d="M11 10.27 7 3.34"></path><path d="m20.66 17-1.73-1"></path><path d="m3.34 7 1.73 1"></path><path d="M14 12h8"></path><path d="M2 12h2"></path><path d="m20.66 7-1.73 1"></path><path d="m3.34 17 1.73-1"></path><path d="m17 3.34-1 1.73"></path><path d="m11 13.73-4 6.93">`),
  _tmpl$440 = /*#__PURE__*/_$template(`<svg><circle cx=8 cy=8 r=6></circle><path d="M18.09 10.37A6 6 0 1 1 10.34 18"></path><path d="M7 6h1v4"></path><path d="m16.71 13.88.7.71-2.82 2.82">`),
  _tmpl$441 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M12 3v18">`),
  _tmpl$442 = /*#__PURE__*/_$template(`<svg><path d="M10.5 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.5"></path><path d="m14.3 19.6 1-.4"></path><path d="M15 3v7.5"></path><path d="m15.2 16.9-.9-.3"></path><path d="m16.6 21.7.3-.9"></path><path d="m16.8 15.3-.4-1"></path><path d="m19.1 15.2.3-.9"></path><path d="m19.6 21.7-.4-1"></path><path d="m20.7 16.8 1-.4"></path><path d="m21.7 19.4-.9-.3"></path><path d="M9 3v18"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$443 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 3v18"></path><path d="M15 3v18">`),
  _tmpl$444 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7.5 3v18"></path><path d="M12 3v18"></path><path d="M16.5 3v18">`),
  _tmpl$445 = /*#__PURE__*/_$template(`<svg><path d="M10 18H5a3 3 0 0 1-3-3v-1"></path><path d="M14 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"></path><path d="M20 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"></path><path d="m7 21 3-3-3-3"></path><rect x=14 y=14 width=8 height=8 rx=2></rect><rect x=2 y=2 width=8 height=8 rx=2>`),
  _tmpl$446 = /*#__PURE__*/_$template(`<svg><path d="M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3">`),
  _tmpl$447 = /*#__PURE__*/_$template(`<svg><path d="m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$448 = /*#__PURE__*/_$template(`<svg><path d="M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z"></path><path d="M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z"></path><path d="M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z"></path><path d="M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z">`),
  _tmpl$449 = /*#__PURE__*/_$template(`<svg><rect width=14 height=8 x=5 y=2 rx=2></rect><rect width=20 height=8 x=2 y=14 rx=2></rect><path d="M6 18h2"></path><path d="M12 18h6">`),
  _tmpl$450 = /*#__PURE__*/_$template(`<svg><path d="M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z"></path><path d="M20 16a8 8 0 1 0-16 0"></path><path d="M12 4v4"></path><path d="M10 4h4">`),
  _tmpl$451 = /*#__PURE__*/_$template(`<svg><path d="m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98"></path><ellipse cx=12 cy=19 rx=9 ry=3>`),
  _tmpl$452 = /*#__PURE__*/_$template(`<svg><rect x=2 y=6 width=20 height=8 rx=1></rect><path d="M17 14v7"></path><path d="M7 14v7"></path><path d="M17 3v3"></path><path d="M7 3v3"></path><path d="M10 14 2.3 6.3"></path><path d="m14 6 7.7 7.7"></path><path d="m8 6 8 8">`),
  _tmpl$453 = /*#__PURE__*/_$template(`<svg><path d="M16 2v2"></path><path d="M17.915 22a6 6 0 0 0-12 0"></path><path d="M8 2v2"></path><circle cx=12 cy=12 r=4></circle><rect x=3 y=4 width=18 height=18 rx=2>`),
  _tmpl$454 = /*#__PURE__*/_$template(`<svg><path d="M16 2v2"></path><path d="M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2"></path><path d="M8 2v2"></path><circle cx=12 cy=11 r=3></circle><rect x=3 y=4 width=18 height=18 rx=2>`),
  _tmpl$455 = /*#__PURE__*/_$template(`<svg><path d="M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z"></path><path d="M10 21.9V14L2.1 9.1"></path><path d="m10 14 11.9-6.9"></path><path d="M14 19.8v-8.1"></path><path d="M18 17.5V9.4">`),
  _tmpl$456 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M12 18a6 6 0 0 0 0-12v12z">`),
  _tmpl$457 = /*#__PURE__*/_$template(`<svg><path d="M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5"></path><path d="M8.5 8.5v.01"></path><path d="M16 15.5v.01"></path><path d="M12 12v.01"></path><path d="M11 17v.01"></path><path d="M7 14v.01">`),
  _tmpl$458 = /*#__PURE__*/_$template(`<svg><path d="M2 12h20"></path><path d="M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8"></path><path d="m4 8 16-4"></path><path d="m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8">`),
  _tmpl$459 = /*#__PURE__*/_$template(`<svg><path d="m12 15 2 2 4-4"></path><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$460 = /*#__PURE__*/_$template(`<svg><line x1=12 x2=18 y1=15 y2=15></line><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$461 = /*#__PURE__*/_$template(`<svg><line x1=15 x2=15 y1=12 y2=18></line><line x1=12 x2=18 y1=15 y2=15></line><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$462 = /*#__PURE__*/_$template(`<svg><line x1=12 x2=18 y1=18 y2=12></line><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$463 = /*#__PURE__*/_$template(`<svg><line x1=12 x2=18 y1=12 y2=18></line><line x1=12 x2=18 y1=18 y2=12></line><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$464 = /*#__PURE__*/_$template(`<svg><rect width=14 height=14 x=8 y=8 rx=2 ry=2></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2">`),
  _tmpl$465 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M9.17 14.83a4 4 0 1 0 0-5.66">`),
  _tmpl$466 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M14.83 14.83a4 4 0 1 1 0-5.66">`),
  _tmpl$467 = /*#__PURE__*/_$template(`<svg><path d="M20 4v7a4 4 0 0 1-4 4H4"></path><path d="m9 10-5 5 5 5">`),
  _tmpl$468 = /*#__PURE__*/_$template(`<svg><path d="m15 10 5 5-5 5"></path><path d="M4 4v7a4 4 0 0 0 4 4h12">`),
  _tmpl$469 = /*#__PURE__*/_$template(`<svg><path d="m14 15-5 5-5-5"></path><path d="M20 4h-7a4 4 0 0 0-4 4v12">`),
  _tmpl$470 = /*#__PURE__*/_$template(`<svg><path d="M14 9 9 4 4 9"></path><path d="M20 20h-7a4 4 0 0 1-4-4V4">`),
  _tmpl$471 = /*#__PURE__*/_$template(`<svg><path d="m10 15 5 5 5-5"></path><path d="M4 4h7a4 4 0 0 1 4 4v12">`),
  _tmpl$472 = /*#__PURE__*/_$template(`<svg><path d="m10 9 5-5 5 5"></path><path d="M4 20h7a4 4 0 0 0 4-4V4">`),
  _tmpl$473 = /*#__PURE__*/_$template(`<svg><path d="M20 20v-7a4 4 0 0 0-4-4H4"></path><path d="M9 14 4 9l5-5">`),
  _tmpl$474 = /*#__PURE__*/_$template(`<svg><path d="m15 14 5-5-5-5"></path><path d="M4 20v-7a4 4 0 0 1 4-4h12">`),
  _tmpl$475 = /*#__PURE__*/_$template(`<svg><path d="M12 20v2"></path><path d="M12 2v2"></path><path d="M17 20v2"></path><path d="M17 2v2"></path><path d="M2 12h2"></path><path d="M2 17h2"></path><path d="M2 7h2"></path><path d="M20 12h2"></path><path d="M20 17h2"></path><path d="M20 7h2"></path><path d="M7 20v2"></path><path d="M7 2v2"></path><rect x=4 y=4 width=16 height=16 rx=2></rect><rect x=8 y=8 width=8 height=8 rx=1>`),
  _tmpl$476 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1"></path><path d="M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1">`),
  _tmpl$477 = /*#__PURE__*/_$template(`<svg><rect width=20 height=14 x=2 y=5 rx=2></rect><line x1=2 x2=22 y1=10 y2=10>`),
  _tmpl$478 = /*#__PURE__*/_$template(`<svg><path d="m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z"></path><path d="m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83"></path><path d="M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4"></path><path d="m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2"></path><path d="M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5">`),
  _tmpl$479 = /*#__PURE__*/_$template(`<svg><path d="M6 2v14a2 2 0 0 0 2 2h14"></path><path d="M18 22V8a2 2 0 0 0-2-2H2">`),
  _tmpl$480 = /*#__PURE__*/_$template(`<svg><path d="M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z">`),
  _tmpl$481 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><line x1=22 x2=18 y1=12 y2=12></line><line x1=6 x2=2 y1=12 y2=12></line><line x1=12 x2=12 y1=6 y2=2></line><line x1=12 x2=12 y1=22 y2=18>`),
  _tmpl$482 = /*#__PURE__*/_$template(`<svg><path d="M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z"></path><path d="M5 21h14">`),
  _tmpl$483 = /*#__PURE__*/_$template(`<svg><path d="m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z"></path><path d="M10 22v-8L2.25 9.15"></path><path d="m10 14 11.77-6.87">`),
  _tmpl$484 = /*#__PURE__*/_$template(`<svg><path d="m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8"></path><path d="M5 8h14"></path><path d="M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0"></path><path d="m12 8 1-6h2">`),
  _tmpl$485 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=8></circle><line x1=3 x2=6 y1=3 y2=6></line><line x1=21 x2=18 y1=3 y2=6></line><line x1=3 x2=6 y1=21 y2=18></line><line x1=21 x2=18 y1=21 y2=18>`),
  _tmpl$486 = /*#__PURE__*/_$template(`<svg><ellipse cx=12 cy=5 rx=9 ry=3></ellipse><path d="M3 5v14a9 3 0 0 0 18 0V5">`),
  _tmpl$487 = /*#__PURE__*/_$template(`<svg><path d="M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"></path><path d="M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"></path><path d="M2 10h4"></path><path d="M2 14h4"></path><path d="M2 18h4"></path><path d="M2 6h4"></path><path d="M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z">`),
  _tmpl$488 = /*#__PURE__*/_$template(`<svg><ellipse cx=12 cy=5 rx=9 ry=3></ellipse><path d="M3 12a9 3 0 0 0 5 2.69"></path><path d="M21 9.3V5"></path><path d="M3 5v14a9 3 0 0 0 6.47 2.88"></path><path d="M12 12v4h4"></path><path d="M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16">`),
  _tmpl$489 = /*#__PURE__*/_$template(`<svg><ellipse cx=12 cy=5 rx=9 ry=3></ellipse><path d="M3 5V19A9 3 0 0 0 15 21.84"></path><path d="M21 5V8"></path><path d="M21 12L18 17H22L19 22"></path><path d="M3 12A9 3 0 0 0 14.59 14.87">`),
  _tmpl$490 = /*#__PURE__*/_$template(`<svg><ellipse cx=12 cy=5 rx=9 ry=3></ellipse><path d="M3 5V19A9 3 0 0 0 21 19V5"></path><path d="M3 12A9 3 0 0 0 21 12">`),
  _tmpl$491 = /*#__PURE__*/_$template(`<svg><path d="m13 21-3-3 3-3"></path><path d="M20 18H10"></path><path d="M3 11h.01"></path><rect x=6 y=3 width=5 height=8 rx=2.5>`),
  _tmpl$492 = /*#__PURE__*/_$template(`<svg><path d="M10 18h10"></path><path d="m17 21 3-3-3-3"></path><path d="M3 11h.01"></path><rect x=15 y=3 width=5 height=8 rx=2.5></rect><rect x=6 y=3 width=5 height=8 rx=2.5>`),
  _tmpl$493 = /*#__PURE__*/_$template(`<svg><path d="M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z"></path><path d="m12 9 6 6"></path><path d="m18 9-6 6">`),
  _tmpl$494 = /*#__PURE__*/_$template(`<svg><path d="M10.162 3.167A10 10 0 0 0 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4-.006 10 10 0 0 0-8.161-9.826"></path><path d="M20.804 14.869a9 9 0 0 1-17.608 0"></path><circle cx=12 cy=4 r=2>`),
  _tmpl$495 = /*#__PURE__*/_$template(`<svg><circle cx=19 cy=19 r=2></circle><circle cx=5 cy=5 r=2></circle><path d="M6.48 3.66a10 10 0 0 1 13.86 13.86"></path><path d="m6.41 6.41 11.18 11.18"></path><path d="M3.66 6.48a10 10 0 0 0 13.86 13.86">`),
  _tmpl$496 = /*#__PURE__*/_$template(`<svg><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"></path><path d="M8 12h8">`),
  _tmpl$497 = /*#__PURE__*/_$template(`<svg><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z"></path><path d="M9.2 9.2h.01"></path><path d="m14.5 9.5-5 5"></path><path d="M14.7 14.8h.01">`),
  _tmpl$498 = /*#__PURE__*/_$template(`<svg><path d="M12 8v8"></path><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"></path><path d="M8 12h8">`),
  _tmpl$499 = /*#__PURE__*/_$template(`<svg><path d="M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z">`),
  _tmpl$500 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M12 12h.01">`),
  _tmpl$501 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M15 9h.01"></path><path d="M9 15h.01">`),
  _tmpl$502 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M16 8h.01"></path><path d="M12 12h.01"></path><path d="M8 16h.01">`),
  _tmpl$503 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M16 8h.01"></path><path d="M8 8h.01"></path><path d="M8 16h.01"></path><path d="M16 16h.01">`),
  _tmpl$504 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M16 8h.01"></path><path d="M8 8h.01"></path><path d="M8 16h.01"></path><path d="M16 16h.01"></path><path d="M12 12h.01">`),
  _tmpl$505 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M16 8h.01"></path><path d="M16 12h.01"></path><path d="M16 16h.01"></path><path d="M8 8h.01"></path><path d="M8 12h.01"></path><path d="M8 16h.01">`),
  _tmpl$506 = /*#__PURE__*/_$template(`<svg><rect width=12 height=12 x=2 y=10 rx=2 ry=2></rect><path d="m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6"></path><path d="M6 18h.01"></path><path d="M10 14h.01"></path><path d="M15 6h.01"></path><path d="M18 9h.01">`),
  _tmpl$507 = /*#__PURE__*/_$template(`<svg><path d="M12 3v14"></path><path d="M5 10h14"></path><path d="M5 21h14">`),
  _tmpl$508 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=12 r=4></circle><path d="M12 12h.01">`),
  _tmpl$509 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M6 12c0-1.7.7-3.2 1.8-4.2"></path><circle cx=12 cy=12 r=2></circle><path d="M18 12c0 1.7-.7 3.2-1.8 4.2">`),
  _tmpl$510 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><circle cx=12 cy=12 r=5></circle><path d="M12 12h.01">`),
  _tmpl$511 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=12 r=2>`),
  _tmpl$512 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=6 r=1></circle><line x1=5 x2=19 y1=12 y2=12></line><circle cx=12 cy=18 r=1>`),
  _tmpl$513 = /*#__PURE__*/_$template(`<svg><path d="M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8"></path><path d="m17 6-2.891-2.891"></path><path d="M2 15c3.333-3 6.667-3 10-3"></path><path d="m2 2 20 20"></path><path d="m20 9 .891.891"></path><path d="M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1"></path><path d="M3.109 14.109 4 15"></path><path d="m6.5 12.5 1 1"></path><path d="m7 18 2.891 2.891"></path><path d="M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16">`),
  _tmpl$514 = /*#__PURE__*/_$template(`<svg><path d="m10 16 1.5 1.5"></path><path d="m14 8-1.5-1.5"></path><path d="M15 2c-1.798 1.998-2.518 3.995-2.807 5.993"></path><path d="m16.5 10.5 1 1"></path><path d="m17 6-2.891-2.891"></path><path d="M2 15c6.667-6 13.333 0 20-6"></path><path d="m20 9 .891.891"></path><path d="M3.109 14.109 4 15"></path><path d="m6.5 12.5 1 1"></path><path d="m7 18 2.891 2.891"></path><path d="M9 22c1.798-1.998 2.518-3.995 2.807-5.993">`),
  _tmpl$515 = /*#__PURE__*/_$template(`<svg><path d="M2 8h20"></path><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M6 16h12">`),
  _tmpl$516 = /*#__PURE__*/_$template(`<svg><path d="M11.25 16.25h1.5L12 17z"></path><path d="M16 14v.5"></path><path d="M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309"></path><path d="M8 14v.5"></path><path d="M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5">`),
  _tmpl$517 = /*#__PURE__*/_$template(`<svg><line x1=12 x2=12 y1=2 y2=22></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6">`),
  _tmpl$518 = /*#__PURE__*/_$template(`<svg><path d="M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3"></path><circle cx=12 cy=12 r=3>`),
  _tmpl$519 = /*#__PURE__*/_$template(`<svg><path d="M10 12h.01"></path><path d="M18 9V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14"></path><path d="M2 20h8"></path><path d="M20 17v-2a2 2 0 1 0-4 0v2"></path><rect x=14 y=17 width=8 height=5 rx=1>`),
  _tmpl$520 = /*#__PURE__*/_$template(`<svg><path d="M10 12h.01"></path><path d="M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14"></path><path d="M2 20h20">`),
  _tmpl$521 = /*#__PURE__*/_$template(`<svg><path d="M11 20H2"></path><path d="M11 4.562v16.157a1 1 0 0 0 1.242.97L19 20V5.562a2 2 0 0 0-1.515-1.94l-4-1A2 2 0 0 0 11 4.561z"></path><path d="M11 4H8a2 2 0 0 0-2 2v14"></path><path d="M14 12h.01"></path><path d="M22 20h-3">`),
  _tmpl$522 = /*#__PURE__*/_$template(`<svg><circle cx=12.1 cy=12.1 r=1>`),
  _tmpl$523 = /*#__PURE__*/_$template(`<svg><path d="M12 15V3"></path><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><path d="m7 10 5 5 5-5">`),
  _tmpl$524 = /*#__PURE__*/_$template(`<svg><path d="m12.99 6.74 1.93 3.44"></path><path d="M19.136 12a10 10 0 0 1-14.271 0"></path><path d="m21 21-2.16-3.84"></path><path d="m3 21 8.02-14.26"></path><circle cx=12 cy=5 r=2>`),
  _tmpl$525 = /*#__PURE__*/_$template(`<svg><path d="M10 11h.01"></path><path d="M14 6h.01"></path><path d="M18 6h.01"></path><path d="M6.5 13.1h.01"></path><path d="M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3"></path><path d="M17.4 9.9c-.8.8-2 .8-2.8 0"></path><path d="M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7"></path><path d="M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4">`),
  _tmpl$526 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94"></path><path d="M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32"></path><path d="M8.56 2.75c4.37 6 6 9.42 8 17.72">`),
  _tmpl$527 = /*#__PURE__*/_$template(`<svg><path d="M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z"></path><path d="M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8"></path><path d="M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3"></path><path d="M18 6h4"></path><path d="m5 10-2 8"></path><path d="m7 18 2-8">`),
  _tmpl$528 = /*#__PURE__*/_$template(`<svg><path d="M10 10 7 7"></path><path d="m10 14-3 3"></path><path d="m14 10 3-3"></path><path d="m14 14 3 3"></path><path d="M14.205 4.139a4 4 0 1 1 5.439 5.863"></path><path d="M19.637 14a4 4 0 1 1-5.432 5.868"></path><path d="M4.367 10a4 4 0 1 1 5.438-5.862"></path><path d="M9.795 19.862a4 4 0 1 1-5.429-5.873"></path><rect x=10 y=8 width=4 height=8 rx=1>`),
  _tmpl$529 = /*#__PURE__*/_$template(`<svg><path d="M18.715 13.186C18.29 11.858 17.384 10.607 16 9.5c-2-1.6-3.5-4-4-6.5a10.7 10.7 0 0 1-.884 2.586"></path><path d="m2 2 20 20"></path><path d="M8.795 8.797A11 11 0 0 1 8 9.5C6 11.1 5 13 5 15a7 7 0 0 0 13.222 3.208">`),
  _tmpl$530 = /*#__PURE__*/_$template(`<svg><path d="M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z">`),
  _tmpl$531 = /*#__PURE__*/_$template(`<svg><path d="M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z"></path><path d="M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97">`),
  _tmpl$532 = /*#__PURE__*/_$template(`<svg><path d="m2 2 8 8"></path><path d="m22 2-8 8"></path><ellipse cx=12 cy=9 rx=10 ry=5></ellipse><path d="M7 13.4v7.9"></path><path d="M12 14v8"></path><path d="M17 13.4v7.9"></path><path d="M2 9v8a10 5 0 0 0 20 0V9">`),
  _tmpl$533 = /*#__PURE__*/_$template(`<svg><path d="M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23"></path><path d="m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59">`),
  _tmpl$534 = /*#__PURE__*/_$template(`<svg><path d="M17.596 12.768a2 2 0 1 0 2.829-2.829l-1.768-1.767a2 2 0 0 0 2.828-2.829l-2.828-2.828a2 2 0 0 0-2.829 2.828l-1.767-1.768a2 2 0 1 0-2.829 2.829z"></path><path d="m2.5 21.5 1.4-1.4"></path><path d="m20.1 3.9 1.4-1.4"></path><path d="M5.343 21.485a2 2 0 1 0 2.829-2.828l1.767 1.768a2 2 0 1 0 2.829-2.829l-6.364-6.364a2 2 0 1 0-2.829 2.829l1.768 1.767a2 2 0 0 0-2.828 2.829z"></path><path d="m9.6 14.4 4.8-4.8">`),
  _tmpl$535 = /*#__PURE__*/_$template(`<svg><path d="M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46"></path><path d="M6 8.5c0-.75.13-1.47.36-2.14"></path><path d="M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76"></path><path d="M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$536 = /*#__PURE__*/_$template(`<svg><path d="M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0"></path><path d="M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4">`),
  _tmpl$537 = /*#__PURE__*/_$template(`<svg><path d="M7 3.34V5a3 3 0 0 0 3 3"></path><path d="M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"></path><path d="M21.54 15H17a2 2 0 0 0-2 2v4.54"></path><path d="M12 2a10 10 0 1 0 9.54 13"></path><path d="M20 6V4a2 2 0 1 0-4 0v2"></path><rect width=8 height=5 x=14 y=6 rx=1>`),
  _tmpl$538 = /*#__PURE__*/_$template(`<svg><path d="M21.54 15H17a2 2 0 0 0-2 2v4.54"></path><path d="M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17"></path><path d="M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$539 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M12 2a7 7 0 1 0 10 10">`),
  _tmpl$540 = /*#__PURE__*/_$template(`<svg><circle cx=11.5 cy=12.5 r=3.5></circle><path d="M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z">`),
  _tmpl$541 = /*#__PURE__*/_$template(`<svg><path d="m2 2 20 20"></path><path d="M20 14.347V14c0-6-4-12-8-12-1.078 0-2.157.436-3.157 1.19"></path><path d="M6.206 6.21C4.871 8.4 4 11.2 4 14a8 8 0 0 0 14.568 4.568">`),
  _tmpl$542 = /*#__PURE__*/_$template(`<svg><path d="M12 2C8 2 4 8 4 14a8 8 0 0 0 16 0c0-6-4-12-8-12">`),
  _tmpl$543 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=1></circle><circle cx=12 cy=5 r=1></circle><circle cx=12 cy=19 r=1>`),
  _tmpl$544 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=1></circle><circle cx=19 cy=12 r=1></circle><circle cx=5 cy=12 r=1>`),
  _tmpl$545 = /*#__PURE__*/_$template(`<svg><path d="M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0"></path><path d="M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0">`),
  _tmpl$546 = /*#__PURE__*/_$template(`<svg><line x1=5 x2=19 y1=9 y2=9></line><line x1=5 x2=19 y1=15 y2=15></line><line x1=19 x2=5 y1=5 y2=19>`),
  _tmpl$547 = /*#__PURE__*/_$template(`<svg><line x1=5 x2=19 y1=9 y2=9></line><line x1=5 x2=19 y1=15 y2=15>`),
  _tmpl$548 = /*#__PURE__*/_$template(`<svg><path d="M21 21H8a2 2 0 0 1-1.42-.587l-3.994-3.999a2 2 0 0 1 0-2.828l10-10a2 2 0 0 1 2.829 0l5.999 6a2 2 0 0 1 0 2.828L12.834 21"></path><path d="m5.082 11.09 8.828 8.828">`),
  _tmpl$549 = /*#__PURE__*/_$template(`<svg><path d="m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z"></path><path d="M6 8v1"></path><path d="M10 8v1"></path><path d="M14 8v1"></path><path d="M18 8v1">`),
  _tmpl$550 = /*#__PURE__*/_$template(`<svg><path d="M4 10h12"></path><path d="M4 14h9"></path><path d="M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2">`),
  _tmpl$551 = /*#__PURE__*/_$template(`<svg><path d="m15 15 6 6"></path><path d="m15 9 6-6"></path><path d="M21 16v5h-5"></path><path d="M21 8V3h-5"></path><path d="M3 16v5h5"></path><path d="m3 21 6-6"></path><path d="M3 8V3h5"></path><path d="M9 9 3 3">`),
  _tmpl$552 = /*#__PURE__*/_$template(`<svg><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6">`),
  _tmpl$553 = /*#__PURE__*/_$template(`<svg><path d="m15 18-.722-3.25"></path><path d="M2 8a10.645 10.645 0 0 0 20 0"></path><path d="m20 15-1.726-2.05"></path><path d="m4 15 1.726-2.05"></path><path d="m9 18 .722-3.25">`),
  _tmpl$554 = /*#__PURE__*/_$template(`<svg><path d="M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49"></path><path d="M14.084 14.158a3 3 0 0 1-4.242-4.242"></path><path d="M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143"></path><path d="m2 2 20 20">`),
  _tmpl$555 = /*#__PURE__*/_$template(`<svg><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"></path><circle cx=12 cy=12 r=3>`),
  _tmpl$556 = /*#__PURE__*/_$template(`<svg><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z">`),
  _tmpl$557 = /*#__PURE__*/_$template(`<svg><path d="M12 16h.01"></path><path d="M16 16h.01"></path><path d="M3 19a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8.5a.5.5 0 0 0-.769-.422l-4.462 2.844A.5.5 0 0 1 15 10.5v-2a.5.5 0 0 0-.769-.422L9.77 10.922A.5.5 0 0 1 9 10.5V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2z"></path><path d="M8 16h.01">`),
  _tmpl$558 = /*#__PURE__*/_$template(`<svg><path d="M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z"></path><path d="M12 12v.01">`),
  _tmpl$559 = /*#__PURE__*/_$template(`<svg><polygon points="13 19 22 12 13 5 13 19"></polygon><polygon points="2 19 11 12 2 5 2 19">`),
  _tmpl$560 = /*#__PURE__*/_$template(`<svg><path d="M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z"></path><path d="M16 8 2 22"></path><path d="M17.5 15H9">`),
  _tmpl$561 = /*#__PURE__*/_$template(`<svg><path d="M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z"></path><path d="M6 8h4"></path><path d="M6 18h4"></path><path d="m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z"></path><path d="M14 8h4"></path><path d="M14 18h4"></path><path d="m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z">`),
  _tmpl$562 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=2></circle><path d="M12 2v4"></path><path d="m6.8 15-3.5 2"></path><path d="m20.7 7-3.5 2"></path><path d="M6.8 9 3.3 7"></path><path d="m20.7 17-3.5-2"></path><path d="m9 22 3-8 3 8"></path><path d="M8 22h8"></path><path d="M18 18.7a9 9 0 1 0-12 0">`),
  _tmpl$563 = /*#__PURE__*/_$template(`<svg><path d="M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"></path><path d="M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"></path><path d="M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"></path><path d="M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"></path><path d="M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z">`),
  _tmpl$564 = /*#__PURE__*/_$template(`<svg><path d="M10 12v-1"></path><path d="M10 18v-2"></path><path d="M10 7V6"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01"></path><circle cx=10 cy=20 r=2>`),
  _tmpl$565 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><circle cx=3 cy=17 r=1></circle><path d="M2 17v-3a4 4 0 0 1 8 0v3"></path><circle cx=9 cy=17 r=1>`),
  _tmpl$566 = /*#__PURE__*/_$template(`<svg><path d="M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0">`),
  _tmpl$567 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m8 18 4-4"></path><path d="M8 10v8h8">`),
  _tmpl$568 = /*#__PURE__*/_$template(`<svg><path d="m13.69 12.479 1.29 4.88a.5.5 0 0 1-.697.591l-1.844-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88"></path><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"></path><circle cx=12 cy=10 r=3>`),
  _tmpl$569 = /*#__PURE__*/_$template(`<svg><path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.072"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m6.69 16.479 1.29 4.88a.5.5 0 0 1-.698.591l-1.843-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88"></path><circle cx=5 cy=14 r=3>`),
  _tmpl$570 = /*#__PURE__*/_$template(`<svg><path d="M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z"></path><path d="M7 17v5"></path><path d="M11.7 14.2 7 17l-4.7-2.8">`),
  _tmpl$571 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M8 18v-2"></path><path d="M12 18v-4"></path><path d="M16 18v-6">`),
  _tmpl$572 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M8 18v-1"></path><path d="M12 18v-6"></path><path d="M16 18v-3">`),
  _tmpl$573 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m16 13-3.5 3.5-2-2L8 17">`),
  _tmpl$574 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5"></path><path d="M4.017 11.512a6 6 0 1 0 8.466 8.475"></path><path d="M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z">`),
  _tmpl$575 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m3 15 2 2 4-4">`),
  _tmpl$576 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m9 15 2 2 4-4">`),
  _tmpl$577 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"></path><path d="M8 14v2.2l1.6 1"></path><circle cx=8 cy=16 r=6>`),
  _tmpl$578 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m5 12-3 3 3 3"></path><path d="m9 18 3-3-3-3">`),
  _tmpl$579 = /*#__PURE__*/_$template(`<svg><path d="M10 12.5 8 15l2 2.5"></path><path d="m14 12.5 2 2.5-2 2.5"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z">`),
  _tmpl$580 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m2.305 15.53.923-.382"></path><path d="m3.228 12.852-.924-.383"></path><path d="M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5"></path><path d="m4.852 11.228-.383-.923"></path><path d="m4.852 16.772-.383.924"></path><path d="m7.148 11.228.383-.923"></path><path d="m7.53 17.696-.382-.924"></path><path d="m8.772 12.852.923-.383"></path><path d="m8.772 15.148.923.383"></path><circle cx=6 cy=14 r=3>`),
  _tmpl$581 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M9 10h6"></path><path d="M12 13V7"></path><path d="M9 17h6">`),
  _tmpl$582 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><rect width=4 height=6 x=2 y=12 rx=2></rect><path d="M10 12h2v6"></path><path d="M10 18h4">`),
  _tmpl$583 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M12 18v-6"></path><path d="m9 15 3 3 3-3">`),
  _tmpl$584 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z">`),
  _tmpl$585 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><circle cx=10 cy=12 r=2></circle><path d="m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22">`),
  _tmpl$586 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M2 15h10"></path><path d="m9 18 3-3-3-3">`),
  _tmpl$587 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"></path><path d="M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1">`),
  _tmpl$588 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"></path><path d="M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1">`),
  _tmpl$589 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><circle cx=4 cy=16 r=2></circle><path d="m10 10-4.5 4.5"></path><path d="m9 11 1 1">`),
  _tmpl$590 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><circle cx=10 cy=16 r=2></circle><path d="m16 10-4.5 4.5"></path><path d="m15 11 1 1">`),
  _tmpl$591 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><rect width=8 height=5 x=2 y=13 rx=1></rect><path d="M8 13v-2a2 2 0 1 0-4 0v2">`),
  _tmpl$592 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><rect width=8 height=6 x=8 y=12 rx=1></rect><path d="M10 12v-2a2 2 0 1 1 4 0v2">`),
  _tmpl$593 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M3 15h6">`),
  _tmpl$594 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M9 15h6">`),
  _tmpl$595 = /*#__PURE__*/_$template(`<svg><path d="M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4"></path><path d="M8 18v-7.7L16 9v7"></path><circle cx=14 cy=16 r=2></circle><circle cx=6 cy=18 r=2>`),
  _tmpl$596 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2"></path><path d="M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6"></path><path d="m5 11-3 3"></path><path d="m5 17-3-3h10">`),
  _tmpl$597 = /*#__PURE__*/_$template(`<svg><path d="m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2"></path><path d="M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"></path><path d="M8 18h1">`),
  _tmpl$598 = /*#__PURE__*/_$template(`<svg><path d="M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z">`),
  _tmpl$599 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M3 15h6"></path><path d="M6 12v6">`),
  _tmpl$600 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M9 15h6"></path><path d="M12 18v-6">`),
  _tmpl$601 = /*#__PURE__*/_$template(`<svg><path d="M12 17h.01"></path><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"></path><path d="M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3">`),
  _tmpl$602 = /*#__PURE__*/_$template(`<svg><path d="M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M16 14a2 2 0 0 0-2 2"></path><path d="M20 14a2 2 0 0 1 2 2"></path><path d="M20 22a2 2 0 0 0 2-2"></path><path d="M16 22a2 2 0 0 1-2-2">`),
  _tmpl$603 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><circle cx=11.5 cy=14.5 r=2.5></circle><path d="M13.3 16.3 15 18">`),
  _tmpl$604 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"></path><path d="m9 18-1.5-1.5"></path><circle cx=5 cy=14 r=3>`),
  _tmpl$605 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M8 12h8"></path><path d="M10 11v2"></path><path d="M8 17h8"></path><path d="M14 16v2">`),
  _tmpl$606 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M8 13h2"></path><path d="M14 13h2"></path><path d="M8 17h2"></path><path d="M14 17h2">`),
  _tmpl$607 = /*#__PURE__*/_$template(`<svg><path d="M21 7h-3a2 2 0 0 1-2-2V2"></path><path d="M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17Z"></path><path d="M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15"></path><path d="M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11">`),
  _tmpl$608 = /*#__PURE__*/_$template(`<svg><path d="m10 18 3-3-3-3"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7">`),
  _tmpl$609 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m8 16 2-2-2-2"></path><path d="M12 18h4">`),
  _tmpl$610 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M10 9H8"></path><path d="M16 13H8"></path><path d="M16 17H8">`),
  _tmpl$611 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M2 13v-1h6v1"></path><path d="M5 12v6"></path><path d="M4 18h2">`),
  _tmpl$612 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M9 13v-1h6v1"></path><path d="M12 12v6"></path><path d="M11 18h2">`),
  _tmpl$613 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M12 12v6"></path><path d="m15 15-3-3-3 3">`),
  _tmpl$614 = /*#__PURE__*/_$template(`<svg><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M15 18a3 3 0 1 0-6 0"></path><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"></path><circle cx=12 cy=13 r=2>`),
  _tmpl$615 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><rect width=8 height=6 x=2 y=12 rx=1></rect><path d="m10 15.5 4 2.5v-6l-4 2.5">`),
  _tmpl$616 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m10 11 5 3-5 3v-6Z">`),
  _tmpl$617 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M8 15h.01"></path><path d="M11.5 13.5a2.5 2.5 0 0 1 0 3"></path><path d="M15 12a5 5 0 0 1 0 6">`),
  _tmpl$618 = /*#__PURE__*/_$template(`<svg><path d="M11 11a5 5 0 0 1 0 6"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23"></path><path d="M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z">`),
  _tmpl$619 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M12 9v4"></path><path d="M12 17h.01">`),
  _tmpl$620 = /*#__PURE__*/_$template(`<svg><path d="M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m8 12.5-5 5"></path><path d="m3 12.5 5 5">`),
  _tmpl$621 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="m14.5 12.5-5 5"></path><path d="m9.5 12.5 5 5">`),
  _tmpl$622 = /*#__PURE__*/_$template(`<svg><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path><path d="M14 2v4a2 2 0 0 0 2 2h4">`),
  _tmpl$623 = /*#__PURE__*/_$template(`<svg><path d="M20 7h-3a2 2 0 0 1-2-2V2"></path><path d="M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2Z"></path><path d="M3 7.6v12.8A1.6 1.6 0 0 0 4.6 22h9.8">`),
  _tmpl$624 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 3v18"></path><path d="M3 7.5h4"></path><path d="M3 12h18"></path><path d="M3 16.5h4"></path><path d="M17 3v18"></path><path d="M17 7.5h4"></path><path d="M17 16.5h4">`),
  _tmpl$625 = /*#__PURE__*/_$template(`<svg><path d="M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4"></path><path d="M14 13.12c0 2.38 0 6.38-1 8.88"></path><path d="M17.29 21.02c.12-.6.43-2.3.5-3.02"></path><path d="M2 12a10 10 0 0 1 18-6"></path><path d="M2 16h.01"></path><path d="M21.8 16c.2-2 .131-5.354 0-6"></path><path d="M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2"></path><path d="M8.65 22c.21-.66.45-1.32.57-2"></path><path d="M9 6.8a6 6 0 0 1 9 5.2v2">`),
  _tmpl$626 = /*#__PURE__*/_$template(`<svg><path d="M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5"></path><path d="M9 18h8"></path><path d="M18 3h-3"></path><path d="M11 3a6 6 0 0 0-6 6v11"></path><path d="M5 13h4"></path><path d="M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z">`),
  _tmpl$627 = /*#__PURE__*/_$template(`<svg><path d="M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058"></path><path d="M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618"></path><path d="m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20">`),
  _tmpl$628 = /*#__PURE__*/_$template(`<svg><path d="M2 16s9-15 20-4C11 23 2 8 2 8">`),
  _tmpl$629 = /*#__PURE__*/_$template(`<svg><path d="M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z"></path><path d="M18 12v.5"></path><path d="M16 17.93a9.77 9.77 0 0 1 0-11.86"></path><path d="M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33"></path><path d="M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4"></path><path d="m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98">`),
  _tmpl$630 = /*#__PURE__*/_$template(`<svg><path d="M16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528"></path><path d="m2 2 20 20"></path><path d="M4 22V4"></path><path d="M7.656 2H8c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10.347">`),
  _tmpl$631 = /*#__PURE__*/_$template(`<svg><path d="M17 22V2L7 7l10 5">`),
  _tmpl$632 = /*#__PURE__*/_$template(`<svg><path d="M7 22V2l10 5-10 5">`),
  _tmpl$633 = /*#__PURE__*/_$template(`<svg><path d="M4 22V4a1 1 0 0 1 .4-.8A6 6 0 0 1 8 2c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10a1 1 0 0 1-.4.8A6 6 0 0 1 16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528">`),
  _tmpl$634 = /*#__PURE__*/_$template(`<svg><path d="M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z"></path><path d="m5 22 14-4"></path><path d="m5 18 14 4">`),
  _tmpl$635 = /*#__PURE__*/_$template(`<svg><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z">`),
  _tmpl$636 = /*#__PURE__*/_$template(`<svg><path d="M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4"></path><path d="M7 2h11v4c0 2-2 2-2 4v1"></path><line x1=11 x2=18 y1=6 y2=6></line><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$637 = /*#__PURE__*/_$template(`<svg><path d="M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z"></path><line x1=6 x2=18 y1=6 y2=6></line><line x1=12 x2=12 y1=12 y2=12>`),
  _tmpl$638 = /*#__PURE__*/_$template(`<svg><path d="M10 2v2.343"></path><path d="M14 2v6.343"></path><path d="m2 2 20 20"></path><path d="M20 20a2 2 0 0 1-2 2H6a2 2 0 0 1-1.755-2.96l5.227-9.563"></path><path d="M6.453 15H15"></path><path d="M8.5 2h7">`),
  _tmpl$639 = /*#__PURE__*/_$template(`<svg><path d="M14 2v6a2 2 0 0 0 .245.96l5.51 10.08A2 2 0 0 1 18 22H6a2 2 0 0 1-1.755-2.96l5.51-10.08A2 2 0 0 0 10 8V2"></path><path d="M6.453 15h11.094"></path><path d="M8.5 2h7">`),
  _tmpl$640 = /*#__PURE__*/_$template(`<svg><path d="M10 2v6.292a7 7 0 1 0 4 0V2"></path><path d="M5 15h14"></path><path d="M8.5 2h7">`),
  _tmpl$641 = /*#__PURE__*/_$template(`<svg><path d="m3 7 5 5-5 5V7"></path><path d="m21 7-5 5 5 5V7"></path><path d="M12 20v2"></path><path d="M12 14v2"></path><path d="M12 8v2"></path><path d="M12 2v2">`),
  _tmpl$642 = /*#__PURE__*/_$template(`<svg><path d="M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3"></path><path d="M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3"></path><path d="M12 20v2"></path><path d="M12 14v2"></path><path d="M12 8v2"></path><path d="M12 2v2">`),
  _tmpl$643 = /*#__PURE__*/_$template(`<svg><path d="m17 3-5 5-5-5h10"></path><path d="m17 21-5-5-5 5h10"></path><path d="M4 12H2"></path><path d="M10 12H8"></path><path d="M16 12h-2"></path><path d="M22 12h-2">`),
  _tmpl$644 = /*#__PURE__*/_$template(`<svg><path d="M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3"></path><path d="M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3"></path><path d="M4 12H2"></path><path d="M10 12H8"></path><path d="M16 12h-2"></path><path d="M22 12h-2">`),
  _tmpl$645 = /*#__PURE__*/_$template(`<svg><path d="M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1"></path><circle cx=12 cy=8 r=2></circle><path d="M12 10v12"></path><path d="M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z"></path><path d="M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z">`),
  _tmpl$646 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=3></circle><path d="M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5"></path><path d="M12 7.5V9"></path><path d="M7.5 12H9"></path><path d="M16.5 12H15"></path><path d="M12 16.5V15"></path><path d="m8 8 1.88 1.88"></path><path d="M14.12 9.88 16 8"></path><path d="m8 16 1.88-1.88"></path><path d="M14.12 14.12 16 16">`),
  _tmpl$647 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=3></circle><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2">`),
  _tmpl$648 = /*#__PURE__*/_$template(`<svg><path d="M2 12h6"></path><path d="M22 12h-6"></path><path d="M12 2v2"></path><path d="M12 8v2"></path><path d="M12 14v2"></path><path d="M12 20v2"></path><path d="m19 9-3 3 3 3"></path><path d="m5 15 3-3-3-3">`),
  _tmpl$649 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-6"></path><path d="M12 8V2"></path><path d="M4 12H2"></path><path d="M10 12H8"></path><path d="M16 12h-2"></path><path d="M22 12h-2"></path><path d="m15 19-3-3-3 3"></path><path d="m15 5-3 3-3-3">`),
  _tmpl$650 = /*#__PURE__*/_$template(`<svg><circle cx=15 cy=19 r=2></circle><path d="M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1"></path><path d="M15 11v-1"></path><path d="M15 17v-2">`),
  _tmpl$651 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="m9 13 2 2 4-4">`),
  _tmpl$652 = /*#__PURE__*/_$template(`<svg><path d="M16 14v2.2l1.6 1"></path><path d="M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2"></path><circle cx=16 cy=16 r=6>`),
  _tmpl$653 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="M2 10h20">`),
  _tmpl$654 = /*#__PURE__*/_$template(`<svg><path d="M10 10.5 8 13l2 2.5"></path><path d="m14 10.5 2 2.5-2 2.5"></path><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z">`),
  _tmpl$655 = /*#__PURE__*/_$template(`<svg><path d="M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.98a2 2 0 0 1 1.69.9l.66 1.2A2 2 0 0 0 12 6h8a2 2 0 0 1 2 2v3.3"></path><path d="m14.305 19.53.923-.382"></path><path d="m15.228 16.852-.923-.383"></path><path d="m16.852 15.228-.383-.923"></path><path d="m16.852 20.772-.383.924"></path><path d="m19.148 15.228.383-.923"></path><path d="m19.53 21.696-.382-.924"></path><path d="m20.772 16.852.924-.383"></path><path d="m20.772 19.148.924.383"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$656 = /*#__PURE__*/_$template(`<svg><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path><circle cx=12 cy=13 r=1>`),
  _tmpl$657 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="M12 10v6"></path><path d="m15 13-3 3-3-3">`),
  _tmpl$658 = /*#__PURE__*/_$template(`<svg><path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5"></path><circle cx=13 cy=12 r=2></circle><path d="M18 19c-2.8 0-5-2.2-5-5v8"></path><circle cx=20 cy=19 r=2>`),
  _tmpl$659 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=13 r=2></circle><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="M14 13h3"></path><path d="M7 13h3">`),
  _tmpl$660 = /*#__PURE__*/_$template(`<svg><path d="M11 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1.5"></path><path d="M13.9 17.45c-1.2-1.2-1.14-2.8-.2-3.73a2.43 2.43 0 0 1 3.44 0l.36.34.34-.34a2.43 2.43 0 0 1 3.45-.01c.95.95 1 2.53-.2 3.74L17.5 21Z">`),
  _tmpl$661 = /*#__PURE__*/_$template(`<svg><path d="M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1"></path><path d="M2 13h10"></path><path d="m9 16 3-3-3-3">`),
  _tmpl$662 = /*#__PURE__*/_$template(`<svg><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path><path d="M8 10v4"></path><path d="M12 10v2"></path><path d="M16 10v6">`),
  _tmpl$663 = /*#__PURE__*/_$template(`<svg><circle cx=16 cy=20 r=2></circle><path d="M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2"></path><path d="m22 14-4.5 4.5"></path><path d="m21 15 1 1">`),
  _tmpl$664 = /*#__PURE__*/_$template(`<svg><rect width=8 height=5 x=14 y=17 rx=1></rect><path d="M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5"></path><path d="M20 17v-2a2 2 0 1 0-4 0v2">`),
  _tmpl$665 = /*#__PURE__*/_$template(`<svg><path d="M9 13h6"></path><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z">`),
  _tmpl$666 = /*#__PURE__*/_$template(`<svg><path d="m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2"></path><circle cx=14 cy=15 r=1>`),
  _tmpl$667 = /*#__PURE__*/_$template(`<svg><path d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2">`),
  _tmpl$668 = /*#__PURE__*/_$template(`<svg><path d="M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5"></path><path d="M2 13h10"></path><path d="m5 10-3 3 3 3">`),
  _tmpl$669 = /*#__PURE__*/_$template(`<svg><path d="M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"></path><path d="M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z">`),
  _tmpl$670 = /*#__PURE__*/_$template(`<svg><path d="M12 10v6"></path><path d="M9 13h6"></path><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z">`),
  _tmpl$671 = /*#__PURE__*/_$template(`<svg><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path><circle cx=12 cy=13 r=2></circle><path d="M12 15v5">`),
  _tmpl$672 = /*#__PURE__*/_$template(`<svg><circle cx=11.5 cy=12.5 r=2.5></circle><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="M13.3 14.3 15 16">`),
  _tmpl$673 = /*#__PURE__*/_$template(`<svg><path d="M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1"></path><path d="m21 21-1.9-1.9"></path><circle cx=17 cy=17 r=3>`),
  _tmpl$674 = /*#__PURE__*/_$template(`<svg><path d="M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7"></path><path d="m8 16 3-3-3-3">`),
  _tmpl$675 = /*#__PURE__*/_$template(`<svg><path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5"></path><path d="M12 10v4h4"></path><path d="m12 14 1.535-1.605a5 5 0 0 1 8 1.5"></path><path d="M22 22v-4h-4"></path><path d="m22 18-1.535 1.605a5 5 0 0 1-8-1.5">`),
  _tmpl$676 = /*#__PURE__*/_$template(`<svg><path d="M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"></path><path d="M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"></path><path d="M3 5a2 2 0 0 0 2 2h3"></path><path d="M3 3v13a2 2 0 0 0 2 2h3">`),
  _tmpl$677 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="M12 10v6"></path><path d="m9 13 3-3 3 3">`),
  _tmpl$678 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"></path><path d="m9.5 10.5 5 5"></path><path d="m14.5 10.5-5 5">`),
  _tmpl$679 = /*#__PURE__*/_$template(`<svg><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z">`),
  _tmpl$680 = /*#__PURE__*/_$template(`<svg><path d="M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z"></path><path d="M2 8v11a2 2 0 0 0 2 2h14">`),
  _tmpl$681 = /*#__PURE__*/_$template(`<svg><path d="M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z"></path><path d="M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z"></path><path d="M16 17h4"></path><path d="M4 13h4">`),
  _tmpl$682 = /*#__PURE__*/_$template(`<svg><path d="M12 12H5a2 2 0 0 0-2 2v5"></path><circle cx=13 cy=19 r=2></circle><circle cx=5 cy=19 r=2></circle><path d="M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5">`),
  _tmpl$683 = /*#__PURE__*/_$template(`<svg><path d="m15 17 5-5-5-5"></path><path d="M4 18v-2a4 4 0 0 1 4-4h12">`),
  _tmpl$684 = /*#__PURE__*/_$template(`<svg><line x1=22 x2=2 y1=6 y2=6></line><line x1=22 x2=2 y1=18 y2=18></line><line x1=6 x2=6 y1=2 y2=22></line><line x1=18 x2=18 y1=2 y2=22>`),
  _tmpl$685 = /*#__PURE__*/_$template(`<svg><path d="M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7">`),
  _tmpl$686 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><line x1=9 x2=9.01 y1=9 y2=9></line><line x1=15 x2=15.01 y1=9 y2=9>`),
  _tmpl$687 = /*#__PURE__*/_$template(`<svg><line x1=3 x2=15 y1=22 y2=22></line><line x1=4 x2=14 y1=9 y2=9></line><path d="M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18"></path><path d="M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5">`),
  _tmpl$688 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><rect width=10 height=8 x=7 y=8 rx=1>`),
  _tmpl$689 = /*#__PURE__*/_$template(`<svg><path d="M13.354 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l1.218-1.348"></path><path d="M16 6h6"></path><path d="M19 3v6">`),
  _tmpl$690 = /*#__PURE__*/_$template(`<svg><path d="M12.531 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l.427-.473"></path><path d="m16.5 3.5 5 5"></path><path d="m21.5 3.5-5 5">`),
  _tmpl$691 = /*#__PURE__*/_$template(`<svg><path d="M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z">`),
  _tmpl$692 = /*#__PURE__*/_$template(`<svg><path d="M2 7v10"></path><path d="M6 5v14"></path><rect width=12 height=18 x=10 y=3 rx=2>`),
  _tmpl$693 = /*#__PURE__*/_$template(`<svg><path d="M2 3v18"></path><rect width=12 height=18 x=6 y=3 rx=2></rect><path d="M22 3v18">`),
  _tmpl$694 = /*#__PURE__*/_$template(`<svg><rect width=18 height=14 x=3 y=3 rx=2></rect><path d="M4 21h1"></path><path d="M9 21h1"></path><path d="M14 21h1"></path><path d="M19 21h1">`),
  _tmpl$695 = /*#__PURE__*/_$template(`<svg><path d="M7 2h10"></path><path d="M5 6h14"></path><rect width=18 height=12 x=3 y=10 rx=2>`),
  _tmpl$696 = /*#__PURE__*/_$template(`<svg><path d="M3 2h18"></path><rect width=18 height=12 x=3 y=6 rx=2></rect><path d="M3 22h18">`),
  _tmpl$697 = /*#__PURE__*/_$template(`<svg><line x1=6 x2=10 y1=11 y2=11></line><line x1=8 x2=8 y1=9 y2=13></line><line x1=15 x2=15.01 y1=12 y2=12></line><line x1=18 x2=18.01 y1=10 y2=10></line><path d="M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z">`),
  _tmpl$698 = /*#__PURE__*/_$template(`<svg><line x1=6 x2=10 y1=12 y2=12></line><line x1=8 x2=8 y1=10 y2=14></line><line x1=15 x2=15.01 y1=13 y2=13></line><line x1=18 x2=18.01 y1=11 y2=11></line><rect width=20 height=12 x=2 y=6 rx=2>`),
  _tmpl$699 = /*#__PURE__*/_$template(`<svg><path d="m12 14 4-4"></path><path d="M3.34 19a10 10 0 1 1 17.32 0">`),
  _tmpl$700 = /*#__PURE__*/_$template(`<svg><path d="m14.5 12.5-8 8a2.119 2.119 0 1 1-3-3l8-8"></path><path d="m16 16 6-6"></path><path d="m8 8 6-6"></path><path d="m9 7 8 8"></path><path d="m21 11-8-8">`),
  _tmpl$701 = /*#__PURE__*/_$template(`<svg><path d="M6 3h12l4 6-10 13L2 9Z"></path><path d="M11 3 8 9l4 13 4-13-3-6"></path><path d="M2 9h20">`),
  _tmpl$702 = /*#__PURE__*/_$template(`<svg><path d="M11.5 21a7.5 7.5 0 1 1 7.35-9"></path><path d="M13 12V3"></path><path d="M4 21h16"></path><path d="M9 12V3">`),
  _tmpl$703 = /*#__PURE__*/_$template(`<svg><path d="M9 10h.01"></path><path d="M15 10h.01"></path><path d="M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z">`),
  _tmpl$704 = /*#__PURE__*/_$template(`<svg><rect x=3 y=8 width=18 height=4 rx=1></rect><path d="M12 8v13"></path><path d="M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7"></path><path d="M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5">`),
  _tmpl$705 = /*#__PURE__*/_$template(`<svg><path d="M6 3v12"></path><path d="M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path d="M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path d="M15 6a9 9 0 0 0-9 9"></path><path d="M18 15v6"></path><path d="M21 18h-6">`),
  _tmpl$706 = /*#__PURE__*/_$template(`<svg><line x1=6 x2=6 y1=3 y2=15></line><circle cx=18 cy=6 r=3></circle><circle cx=6 cy=18 r=3></circle><path d="M18 9a9 9 0 0 1-9 9">`),
  _tmpl$707 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=3></circle><line x1=3 x2=9 y1=12 y2=12></line><line x1=15 x2=21 y1=12 y2=12>`),
  _tmpl$708 = /*#__PURE__*/_$template(`<svg><path d="M12 3v6"></path><circle cx=12 cy=12 r=3></circle><path d="M12 15v6">`),
  _tmpl$709 = /*#__PURE__*/_$template(`<svg><circle cx=5 cy=6 r=3></circle><path d="M12 6h5a2 2 0 0 1 2 2v7"></path><path d="m15 9-3-3 3-3"></path><circle cx=19 cy=18 r=3></circle><path d="M12 18H7a2 2 0 0 1-2-2V9"></path><path d="m9 15 3 3-3 3">`),
  _tmpl$710 = /*#__PURE__*/_$template(`<svg><circle cx=18 cy=18 r=3></circle><circle cx=6 cy=6 r=3></circle><path d="M13 6h3a2 2 0 0 1 2 2v7"></path><path d="M11 18H8a2 2 0 0 1-2-2V9">`),
  _tmpl$711 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=18 r=3></circle><circle cx=6 cy=6 r=3></circle><circle cx=18 cy=6 r=3></circle><path d="M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9"></path><path d="M12 12v3">`),
  _tmpl$712 = /*#__PURE__*/_$template(`<svg><circle cx=5 cy=6 r=3></circle><path d="M5 9v6"></path><circle cx=5 cy=18 r=3></circle><path d="M12 3v18"></path><circle cx=19 cy=6 r=3></circle><path d="M16 15.7A9 9 0 0 0 19 9">`),
  _tmpl$713 = /*#__PURE__*/_$template(`<svg><circle cx=18 cy=18 r=3></circle><circle cx=6 cy=6 r=3></circle><path d="M6 21V9a9 9 0 0 0 9 9">`),
  _tmpl$714 = /*#__PURE__*/_$template(`<svg><circle cx=5 cy=6 r=3></circle><path d="M5 9v12"></path><circle cx=19 cy=18 r=3></circle><path d="m15 9-3-3 3-3"></path><path d="M12 6h5a2 2 0 0 1 2 2v7">`),
  _tmpl$715 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=6 r=3></circle><path d="M6 9v12"></path><path d="m21 3-6 6"></path><path d="m21 9-6-6"></path><path d="M18 11.5V15"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$716 = /*#__PURE__*/_$template(`<svg><circle cx=5 cy=6 r=3></circle><path d="M5 9v12"></path><path d="m15 9-3-3 3-3"></path><path d="M12 6h5a2 2 0 0 1 2 2v3"></path><path d="M19 15v6"></path><path d="M22 18h-6">`),
  _tmpl$717 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=6 r=3></circle><path d="M6 9v12"></path><path d="M13 6h3a2 2 0 0 1 2 2v3"></path><path d="M18 15v6"></path><path d="M21 18h-6">`),
  _tmpl$718 = /*#__PURE__*/_$template(`<svg><circle cx=18 cy=18 r=3></circle><circle cx=6 cy=6 r=3></circle><path d="M18 6V5"></path><path d="M18 11v-1"></path><line x1=6 x2=6 y1=9 y2=21>`),
  _tmpl$719 = /*#__PURE__*/_$template(`<svg><circle cx=18 cy=18 r=3></circle><circle cx=6 cy=6 r=3></circle><path d="M13 6h3a2 2 0 0 1 2 2v7"></path><line x1=6 x2=6 y1=9 y2=21>`),
  _tmpl$720 = /*#__PURE__*/_$template(`<svg><path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path><path d="M9 18c-4.51 2-5-2-7-2">`),
  _tmpl$721 = /*#__PURE__*/_$template(`<svg><path d="m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z">`),
  _tmpl$722 = /*#__PURE__*/_$template(`<svg><path d="M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z"></path><path d="M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0">`),
  _tmpl$723 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=15 r=4></circle><circle cx=18 cy=15 r=4></circle><path d="M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2"></path><path d="M2.5 13 5 7c.7-1.3 1.4-2 3-2"></path><path d="M21.5 13 19 7c-.7-1.3-1.5-2-3-2">`),
  _tmpl$724 = /*#__PURE__*/_$template(`<svg><path d="M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13"></path><path d="M2 12h8.5"></path><path d="M20 6V4a2 2 0 1 0-4 0v2"></path><rect width=8 height=5 x=14 y=6 rx=1>`),
  _tmpl$725 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"></path><path d="M2 12h20">`),
  _tmpl$726 = /*#__PURE__*/_$template(`<svg><path d="M12 13V2l8 4-8 4"></path><path d="M20.561 10.222a9 9 0 1 1-12.55-5.29"></path><path d="M8.002 9.997a5 5 0 1 0 8.9 2.02">`),
  _tmpl$727 = /*#__PURE__*/_$template(`<svg><path d="M2 21V3"></path><path d="M2 5h18a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2.26"></path><path d="M7 17v3a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-3"></path><circle cx=16 cy=11 r=2></circle><circle cx=8 cy=11 r=2>`),
  _tmpl$728 = /*#__PURE__*/_$template(`<svg><path d="M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4"></path><path d="M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2"></path><path d="M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5"></path><path d="M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2"></path><path d="M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0">`),
  _tmpl$729 = /*#__PURE__*/_$template(`<svg><path d="M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z"></path><path d="M22 10v6"></path><path d="M6 12.5V16a6 3 0 0 0 12 0v-3.5">`),
  _tmpl$730 = /*#__PURE__*/_$template(`<svg><path d="M22 5V2l-5.89 5.89"></path><circle cx=16.6 cy=15.89 r=3></circle><circle cx=8.11 cy=7.4 r=3></circle><circle cx=12.35 cy=11.65 r=3></circle><circle cx=13.91 cy=5.85 r=3></circle><circle cx=18.15 cy=10.09 r=3></circle><circle cx=6.56 cy=13.2 r=3></circle><circle cx=10.8 cy=17.44 r=3></circle><circle cx=5 cy=19 r=3>`),
  _tmpl$731 = /*#__PURE__*/_$template(`<svg><path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"></path><path d="m16 19 2 2 4-4">`),
  _tmpl$732 = /*#__PURE__*/_$template(`<svg><path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"></path><path d="M16 19h6"></path><path d="M19 22v-6">`),
  _tmpl$733 = /*#__PURE__*/_$template(`<svg><path d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"></path><path d="m16 16 5 5"></path><path d="m16 21 5-5">`),
  _tmpl$734 = /*#__PURE__*/_$template(`<svg><path d="M12 3v18"></path><path d="M3 12h18"></path><rect x=3 y=3 width=18 height=18 rx=2>`),
  _tmpl$735 = /*#__PURE__*/_$template(`<svg><path d="M15 3v18"></path><path d="M3 12h18"></path><path d="M9 3v18"></path><rect x=3 y=3 width=18 height=18 rx=2>`),
  _tmpl$736 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18"></path><path d="M3 15h18"></path><path d="M9 3v18"></path><path d="M15 3v18">`),
  _tmpl$737 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=9 r=1></circle><circle cx=19 cy=9 r=1></circle><circle cx=5 cy=9 r=1></circle><circle cx=12 cy=15 r=1></circle><circle cx=19 cy=15 r=1></circle><circle cx=5 cy=15 r=1>`),
  _tmpl$738 = /*#__PURE__*/_$template(`<svg><circle cx=9 cy=12 r=1></circle><circle cx=9 cy=5 r=1></circle><circle cx=9 cy=19 r=1></circle><circle cx=15 cy=12 r=1></circle><circle cx=15 cy=5 r=1></circle><circle cx=15 cy=19 r=1>`),
  _tmpl$739 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=5 r=1></circle><circle cx=19 cy=5 r=1></circle><circle cx=5 cy=5 r=1></circle><circle cx=12 cy=12 r=1></circle><circle cx=19 cy=12 r=1></circle><circle cx=5 cy=12 r=1></circle><circle cx=12 cy=19 r=1></circle><circle cx=19 cy=19 r=1></circle><circle cx=5 cy=19 r=1>`),
  _tmpl$740 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5c0-1.1.9-2 2-2h2"></path><path d="M17 3h2c1.1 0 2 .9 2 2v2"></path><path d="M21 17v2c0 1.1-.9 2-2 2h-2"></path><path d="M7 21H5c-1.1 0-2-.9-2-2v-2"></path><rect width=7 height=5 x=7 y=7 rx=1></rect><rect width=7 height=5 x=10 y=12 rx=1>`),
  _tmpl$741 = /*#__PURE__*/_$template(`<svg><path d="m11.9 12.1 4.514-4.514"></path><path d="M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z"></path><path d="m6 16 2 2"></path><path d="M8.23 9.85A3 3 0 0 1 11 8a5 5 0 0 1 5 5 3 3 0 0 1-1.85 2.77l-.92.38A2 2 0 0 0 12 18a4 4 0 0 1-4 4 6 6 0 0 1-6-6 4 4 0 0 1 4-4 2 2 0 0 0 1.85-1.23z">`),
  _tmpl$742 = /*#__PURE__*/_$template(`<svg><path d="M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856"></path><path d="M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288"></path><path d="M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025"></path><path d="m8.5 16.5-1-1">`),
  _tmpl$743 = /*#__PURE__*/_$template(`<svg><path d="M12 16H4a2 2 0 1 1 0-4h16a2 2 0 1 1 0 4h-4.25"></path><path d="M5 12a2 2 0 0 1-2-2 9 7 0 0 1 18 0 2 2 0 0 1-2 2"></path><path d="M5 16a2 2 0 0 0-2 2 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 2 2 0 0 0-2-2q0 0 0 0"></path><path d="m6.67 12 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2">`),
  _tmpl$744 = /*#__PURE__*/_$template(`<svg><path d="m15 12-8.373 8.373a1 1 0 1 1-3-3L12 9"></path><path d="m18 15 4-4"></path><path d="m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172V7l-2.26-2.26a6 6 0 0 0-4.202-1.756L9 2.96l.92.82A6.18 6.18 0 0 1 12 8.4V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5">`),
  _tmpl$745 = /*#__PURE__*/_$template(`<svg><path d="M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17"></path><path d="m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"></path><path d="m2 16 6 6"></path><circle cx=16 cy=9 r=2.9></circle><circle cx=6 cy=5 r=3>`),
  _tmpl$746 = /*#__PURE__*/_$template(`<svg><path d="M11 14h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16"></path><path d="m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"></path><path d="m2 15 6 6"></path><path d="M19.5 8.5c.7-.7 1.5-1.6 1.5-2.7A2.73 2.73 0 0 0 16 4a2.78 2.78 0 0 0-5 1.8c0 1.2.8 2 1.5 2.8L16 12Z">`),
  _tmpl$747 = /*#__PURE__*/_$template(`<svg><path d="M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14"></path><path d="m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"></path><path d="m2 13 6 6">`),
  _tmpl$748 = /*#__PURE__*/_$template(`<svg><path d="M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4"></path><path d="M14 11V9a2 2 0 1 0-4 0v2"></path><path d="M10 10.5V5a2 2 0 1 0-4 0v9"></path><path d="m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5">`),
  _tmpl$749 = /*#__PURE__*/_$template(`<svg><path d="M12 3V2"></path><path d="m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5"></path><path d="M2 14h12a2 2 0 0 1 0 4h-2"></path><path d="M4 10h16"></path><path d="M5 10a7 7 0 0 1 14 0"></path><path d="M5 14v6a1 1 0 0 1-1 1H2">`),
  _tmpl$750 = /*#__PURE__*/_$template(`<svg><path d="M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2"></path><path d="M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2"></path><path d="M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8"></path><path d="M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15">`),
  _tmpl$751 = /*#__PURE__*/_$template(`<svg><path d="m11 17 2 2a1 1 0 1 0 3-3"></path><path d="m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4"></path><path d="m21 3 1 11h-2"></path><path d="M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3"></path><path d="M3 4h8">`),
  _tmpl$752 = /*#__PURE__*/_$template(`<svg><path d="M12 2v8"></path><path d="m16 6-4 4-4-4"></path><rect width=20 height=8 x=2 y=14 rx=2></rect><path d="M6 18h.01"></path><path d="M10 18h.01">`),
  _tmpl$753 = /*#__PURE__*/_$template(`<svg><path d="m16 6-4-4-4 4"></path><path d="M12 2v8"></path><rect width=20 height=8 x=2 y=14 rx=2></rect><path d="M6 18h.01"></path><path d="M10 18h.01">`),
  _tmpl$754 = /*#__PURE__*/_$template(`<svg><line x1=22 x2=2 y1=12 y2=12></line><path d="M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path><line x1=6 x2=6.01 y1=16 y2=16></line><line x1=10 x2=10.01 y1=16 y2=16>`),
  _tmpl$755 = /*#__PURE__*/_$template(`<svg><path d="M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5"></path><path d="M14 6a6 6 0 0 1 6 6v3"></path><path d="M4 15v-3a6 6 0 0 1 6-6"></path><rect x=2 y=15 width=20 height=4 rx=1>`),
  _tmpl$756 = /*#__PURE__*/_$template(`<svg><line x1=4 x2=20 y1=9 y2=9></line><line x1=4 x2=20 y1=15 y2=15></line><line x1=10 x2=8 y1=3 y2=21></line><line x1=16 x2=14 y1=3 y2=21>`),
  _tmpl$757 = /*#__PURE__*/_$template(`<svg><path d="m5.2 6.2 1.4 1.4"></path><path d="M2 13h2"></path><path d="M20 13h2"></path><path d="m17.4 7.6 1.4-1.4"></path><path d="M22 17H2"></path><path d="M22 21H2"></path><path d="M16 13a4 4 0 0 0-8 0"></path><path d="M12 5V2.5">`),
  _tmpl$758 = /*#__PURE__*/_$template(`<svg><path d="M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z"></path><path d="M7.5 12h9">`),
  _tmpl$759 = /*#__PURE__*/_$template(`<svg><path d="M4 12h8"></path><path d="M4 18V6"></path><path d="M12 18V6"></path><path d="m17 12 3-2v8">`),
  _tmpl$760 = /*#__PURE__*/_$template(`<svg><path d="M4 12h8"></path><path d="M4 18V6"></path><path d="M12 18V6"></path><path d="M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1">`),
  _tmpl$761 = /*#__PURE__*/_$template(`<svg><path d="M4 12h8"></path><path d="M4 18V6"></path><path d="M12 18V6"></path><path d="M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2"></path><path d="M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2">`),
  _tmpl$762 = /*#__PURE__*/_$template(`<svg><path d="M12 18V6"></path><path d="M17 10v3a1 1 0 0 0 1 1h3"></path><path d="M21 10v8"></path><path d="M4 12h8"></path><path d="M4 18V6">`),
  _tmpl$763 = /*#__PURE__*/_$template(`<svg><path d="M4 12h8"></path><path d="M4 18V6"></path><path d="M12 18V6"></path><path d="M17 13v-3h4"></path><path d="M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17">`),
  _tmpl$764 = /*#__PURE__*/_$template(`<svg><path d="M4 12h8"></path><path d="M4 18V6"></path><path d="M12 18V6"></path><circle cx=19 cy=16 r=2></circle><path d="M20 10c-2 2-3 3.5-3 6">`),
  _tmpl$765 = /*#__PURE__*/_$template(`<svg><path d="M6 12h12"></path><path d="M6 20V4"></path><path d="M18 20V4">`),
  _tmpl$766 = /*#__PURE__*/_$template(`<svg><path d="M21 14h-1.343"></path><path d="M9.128 3.47A9 9 0 0 1 21 12v3.343"></path><path d="m2 2 20 20"></path><path d="M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3"></path><path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364">`),
  _tmpl$767 = /*#__PURE__*/_$template(`<svg><path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3">`),
  _tmpl$768 = /*#__PURE__*/_$template(`<svg><path d="M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z"></path><path d="M21 16v2a4 4 0 0 1-4 4h-5">`),
  _tmpl$769 = /*#__PURE__*/_$template(`<svg><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path><path d="m12 13-1-1 2-2-3-3 2-2">`),
  _tmpl$770 = /*#__PURE__*/_$template(`<svg><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path><path d="M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66"></path><path d="m18 15-2-2"></path><path d="m15 18-2-2">`),
  _tmpl$771 = /*#__PURE__*/_$template(`<svg><path d="M13.5 19.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5A5.5 5.5 0 0 1 7.5 3c1.76 0 3 .5 4.5 2 1.5-1.5 2.74-2 4.5-2a5.5 5.5 0 0 1 5.402 6.5"></path><path d="M15 15h6">`),
  _tmpl$772 = /*#__PURE__*/_$template(`<svg><line x1=2 y1=2 x2=22 y2=22></line><path d="M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35"></path><path d="M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17">`),
  _tmpl$773 = /*#__PURE__*/_$template(`<svg><path d="M13.5 19.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5A5.5 5.5 0 0 1 7.5 3c1.76 0 3 .5 4.5 2 1.5-1.5 2.74-2 4.5-2a5.5 5.5 0 0 1 5.402 6.5"></path><path d="M15 15h6"></path><path d="M18 12v6">`),
  _tmpl$774 = /*#__PURE__*/_$template(`<svg><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path><path d="M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27">`),
  _tmpl$775 = /*#__PURE__*/_$template(`<svg><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z">`),
  _tmpl$776 = /*#__PURE__*/_$template(`<svg><path d="M11 8c2-3-2-3 0-6"></path><path d="M15.5 8c2-3-2-3 0-6"></path><path d="M6 10h.01"></path><path d="M6 14h.01"></path><path d="M10 16v-4"></path><path d="M14 16v-4"></path><path d="M18 16v-4"></path><path d="M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3"></path><path d="M5 20v2"></path><path d="M19 20v2">`),
  _tmpl$777 = /*#__PURE__*/_$template(`<svg><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z">`),
  _tmpl$778 = /*#__PURE__*/_$template(`<svg><path d="m9 11-6 6v3h9l3-3"></path><path d="m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4">`),
  _tmpl$779 = /*#__PURE__*/_$template(`<svg><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path><path d="M12 7v5l4 2">`),
  _tmpl$780 = /*#__PURE__*/_$template(`<svg><path d="M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27"></path><path d="M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28"></path><path d="M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26"></path><path d="M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25"></path><path d="M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75"></path><path d="M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24"></path><path d="M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28"></path><path d="M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05"></path><path d="m2 2 20 20">`),
  _tmpl$781 = /*#__PURE__*/_$template(`<svg><path d="M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18"></path><path d="M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88"></path><path d="M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36"></path><path d="M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87"></path><path d="M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08"></path><path d="M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57"></path><path d="M4.93 4.93 3 3a.7.7 0 0 1 0-1"></path><path d="M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15">`),
  _tmpl$782 = /*#__PURE__*/_$template(`<svg><path d="M12 6v4"></path><path d="M14 14h-4"></path><path d="M14 18h-4"></path><path d="M14 8h-4"></path><path d="M18 12h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2"></path><path d="M18 22V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v18">`),
  _tmpl$783 = /*#__PURE__*/_$template(`<svg><path d="M10 22v-6.57"></path><path d="M12 11h.01"></path><path d="M12 7h.01"></path><path d="M14 15.43V22"></path><path d="M15 16a5 5 0 0 0-6 0"></path><path d="M16 11h.01"></path><path d="M16 7h.01"></path><path d="M8 11h.01"></path><path d="M8 7h.01"></path><rect x=4 y=2 width=16 height=20 rx=2>`),
  _tmpl$784 = /*#__PURE__*/_$template(`<svg><path d="M5 22h14"></path><path d="M5 2h14"></path><path d="M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22"></path><path d="M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2">`),
  _tmpl$785 = /*#__PURE__*/_$template(`<svg><path d="M10 12V8.964"></path><path d="M14 12V8.964"></path><path d="M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z"></path><path d="M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2">`),
  _tmpl$786 = /*#__PURE__*/_$template(`<svg><path d="M12.662 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v2.475"></path><path d="M14.959 12.717A1 1 0 0 0 14 12h-4a1 1 0 0 0-1 1v8"></path><path d="M15 18h6"></path><path d="M18 15v6">`),
  _tmpl$787 = /*#__PURE__*/_$template(`<svg><path d="M9.5 13.866a4 4 0 0 1 5 .01"></path><path d="M12 17h.01"></path><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><path d="M7 10.754a8 8 0 0 1 10 0">`),
  _tmpl$788 = /*#__PURE__*/_$template(`<svg><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"></path><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z">`),
  _tmpl$789 = /*#__PURE__*/_$template(`<svg><path d="M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0"></path><path d="M12.14 11a3.5 3.5 0 1 1 6.71 0"></path><path d="M15.5 6.5a3.5 3.5 0 1 0-7 0">`),
  _tmpl$790 = /*#__PURE__*/_$template(`<svg><path d="m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11"></path><path d="M17 7A5 5 0 0 0 7 7"></path><path d="M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4">`),
  _tmpl$791 = /*#__PURE__*/_$template(`<svg><path d="M13.5 8h-3"></path><path d="m15 2-1 2h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h3"></path><path d="M16.899 22A5 5 0 0 0 7.1 22"></path><path d="m9 2 3 6"></path><circle cx=12 cy=15 r=3>`),
  _tmpl$792 = /*#__PURE__*/_$template(`<svg><path d="M16 10h2"></path><path d="M16 14h2"></path><path d="M6.17 15a3 3 0 0 1 5.66 0"></path><circle cx=9 cy=11 r=2></circle><rect x=2 y=5 width=20 height=14 rx=2>`),
  _tmpl$793 = /*#__PURE__*/_$template(`<svg><path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"></path><path d="m14 19 3 3v-5.5"></path><path d="m17 22 3-3"></path><circle cx=9 cy=9 r=2>`),
  _tmpl$794 = /*#__PURE__*/_$template(`<svg><path d="M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"></path><line x1=16 x2=22 y1=5 y2=5></line><circle cx=9 cy=9 r=2></circle><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21">`),
  _tmpl$795 = /*#__PURE__*/_$template(`<svg><line x1=2 x2=22 y1=2 y2=22></line><path d="M10.41 10.41a2 2 0 1 1-2.83-2.83"></path><line x1=13.5 x2=6 y1=13.5 y2=21></line><line x1=18 x2=21 y1=12 y2=15></line><path d="M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59"></path><path d="M21 15V5a2 2 0 0 0-2-2H9">`),
  _tmpl$796 = /*#__PURE__*/_$template(`<svg><path d="m11 16-5 5"></path><path d="M11 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.5"></path><path d="M15.765 22a.5.5 0 0 1-.765-.424V13.38a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z"></path><circle cx=9 cy=9 r=2>`),
  _tmpl$797 = /*#__PURE__*/_$template(`<svg><path d="M16 5h6"></path><path d="M19 2v6"></path><path d="M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5"></path><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"></path><circle cx=9 cy=9 r=2>`),
  _tmpl$798 = /*#__PURE__*/_$template(`<svg><path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"></path><path d="m14 19.5 3-3 3 3"></path><path d="M17 22v-5.5"></path><circle cx=9 cy=9 r=2>`),
  _tmpl$799 = /*#__PURE__*/_$template(`<svg><path d="M16 3h5v5"></path><path d="M17 21h2a2 2 0 0 0 2-2"></path><path d="M21 12v3"></path><path d="m21 3-5 5"></path><path d="M3 7V5a2 2 0 0 1 2-2"></path><path d="m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19"></path><path d="M9 3h3"></path><rect x=3 y=11 width=10 height=10 rx=1>`),
  _tmpl$800 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><circle cx=9 cy=9 r=2></circle><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21">`),
  _tmpl$801 = /*#__PURE__*/_$template(`<svg><path d="M18 22H4a2 2 0 0 1-2-2V6"></path><path d="m22 13-1.296-1.296a2.41 2.41 0 0 0-3.408 0L11 18"></path><circle cx=12 cy=8 r=2></circle><rect width=16 height=16 x=6 y=2 rx=2>`),
  _tmpl$802 = /*#__PURE__*/_$template(`<svg><path d="M12 3v12"></path><path d="m8 11 4 4 4-4"></path><path d="M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4">`),
  _tmpl$803 = /*#__PURE__*/_$template(`<svg><polyline points="22 12 16 12 14 15 10 15 8 12 2 12"></polyline><path d="M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z">`),
  _tmpl$804 = /*#__PURE__*/_$template(`<svg><path d="M21 12H11"></path><path d="M21 18H11"></path><path d="M21 6H11"></path><path d="m7 8-4 4 4 4">`),
  _tmpl$805 = /*#__PURE__*/_$template(`<svg><path d="M21 12H11"></path><path d="M21 18H11"></path><path d="M21 6H11"></path><path d="m3 8 4 4-4 4">`),
  _tmpl$806 = /*#__PURE__*/_$template(`<svg><path d="M6 3h12"></path><path d="M6 8h12"></path><path d="m6 13 8.5 8"></path><path d="M6 13h3"></path><path d="M9 13c6.667 0 6.667-10 0-10">`),
  _tmpl$807 = /*#__PURE__*/_$template(`<svg><path d="M6 16c5 0 7-8 12-8a4 4 0 0 1 0 8c-5 0-7-8-12-8a4 4 0 1 0 0 8">`),
  _tmpl$808 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M12 16v-4"></path><path d="M12 8h.01">`),
  _tmpl$809 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 7h.01"></path><path d="M17 7h.01"></path><path d="M7 17h.01"></path><path d="M17 17h.01">`),
  _tmpl$810 = /*#__PURE__*/_$template(`<svg><rect width=20 height=20 x=2 y=2 rx=5 ry=5></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1=17.5 x2=17.51 y1=6.5 y2=6.5>`),
  _tmpl$811 = /*#__PURE__*/_$template(`<svg><line x1=19 x2=10 y1=4 y2=4></line><line x1=14 x2=5 y1=20 y2=20></line><line x1=15 x2=9 y1=4 y2=20>`),
  _tmpl$812 = /*#__PURE__*/_$template(`<svg><path d="m16 14 4 4-4 4"></path><path d="M20 10a8 8 0 1 0-8 8h8">`),
  _tmpl$813 = /*#__PURE__*/_$template(`<svg><path d="M4 10a8 8 0 1 1 8 8H4"></path><path d="m8 22-4-4 4-4">`),
  _tmpl$814 = /*#__PURE__*/_$template(`<svg><path d="M12 9.5V21m0-11.5L6 3m6 6.5L18 3"></path><path d="M6 15h12"></path><path d="M6 11h12">`),
  _tmpl$815 = /*#__PURE__*/_$template(`<svg><path d="M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z"></path><path d="M6 15v-2"></path><path d="M12 15V9"></path><circle cx=12 cy=6 r=3>`),
  _tmpl$816 = /*#__PURE__*/_$template(`<svg><path d="M6 5v11"></path><path d="M12 5v6"></path><path d="M18 5v14">`),
  _tmpl$817 = /*#__PURE__*/_$template(`<svg><path d="M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z"></path><circle cx=16.5 cy=7.5 r=.5 fill=currentColor>`),
  _tmpl$818 = /*#__PURE__*/_$template(`<svg><path d="M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z"></path><path d="m14 7 3 3"></path><path d="m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814">`),
  _tmpl$819 = /*#__PURE__*/_$template(`<svg><path d="m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4"></path><path d="m21 2-9.6 9.6"></path><circle cx=7.5 cy=15.5 r=5.5>`),
  _tmpl$820 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M6 8h4"></path><path d="M14 8h.01"></path><path d="M18 8h.01"></path><path d="M2 12h20"></path><path d="M6 12v4"></path><path d="M10 12v4"></path><path d="M14 12v4"></path><path d="M18 12v4">`),
  _tmpl$821 = /*#__PURE__*/_$template(`<svg><path d="M 20 4 A2 2 0 0 1 22 6"></path><path d="M 22 6 L 22 16.41"></path><path d="M 7 16 L 16 16"></path><path d="M 9.69 4 L 20 4"></path><path d="M14 8h.01"></path><path d="M18 8h.01"></path><path d="m2 2 20 20"></path><path d="M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2"></path><path d="M6 8h.01"></path><path d="M8 12h.01">`),
  _tmpl$822 = /*#__PURE__*/_$template(`<svg><path d="M10 8h.01"></path><path d="M12 12h.01"></path><path d="M14 8h.01"></path><path d="M16 12h.01"></path><path d="M18 8h.01"></path><path d="M6 8h.01"></path><path d="M7 16h10"></path><path d="M8 12h.01"></path><rect width=20 height=16 x=2 y=4 rx=2>`),
  _tmpl$823 = /*#__PURE__*/_$template(`<svg><path d="M12 2v5"></path><path d="M14.829 15.998a3 3 0 1 1-5.658 0"></path><path d="M20.92 14.606A1 1 0 0 1 20 16H4a1 1 0 0 1-.92-1.394l3-7A1 1 0 0 1 7 7h10a1 1 0 0 1 .92.606z">`),
  _tmpl$824 = /*#__PURE__*/_$template(`<svg><path d="M10.293 2.293a1 1 0 0 1 1.414 0l2.5 2.5 5.994 1.227a1 1 0 0 1 .506 1.687l-7 7a1 1 0 0 1-1.687-.506l-1.227-5.994-2.5-2.5a1 1 0 0 1 0-1.414z"></path><path d="m14.207 4.793-3.414 3.414"></path><path d="M3 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1z"></path><path d="m9.086 6.5-4.793 4.793a1 1 0 0 0-.18 1.17L7 18">`),
  _tmpl$825 = /*#__PURE__*/_$template(`<svg><path d="M12 10v12"></path><path d="M17.929 7.629A1 1 0 0 1 17 9H7a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 9 2h6a1 1 0 0 1 .928.629z"></path><path d="M9 22h6">`),
  _tmpl$826 = /*#__PURE__*/_$template(`<svg><path d="M19.929 18.629A1 1 0 0 1 19 20H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 13h6a1 1 0 0 1 .928.629z"></path><path d="M6 3a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z"></path><path d="M8 6h4a2 2 0 0 1 2 2v5">`),
  _tmpl$827 = /*#__PURE__*/_$template(`<svg><path d="M19.929 9.629A1 1 0 0 1 19 11H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 4h6a1 1 0 0 1 .928.629z"></path><path d="M6 15a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z"></path><path d="M8 18h4a2 2 0 0 0 2-2v-5">`),
  _tmpl$828 = /*#__PURE__*/_$template(`<svg><path d="M12 12v6"></path><path d="M4.077 10.615A1 1 0 0 0 5 12h14a1 1 0 0 0 .923-1.385l-3.077-7.384A2 2 0 0 0 15 2H9a2 2 0 0 0-1.846 1.23Z"></path><path d="M8 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1z">`),
  _tmpl$829 = /*#__PURE__*/_$template(`<svg><path d="m12 8 6-3-6-3v10"></path><path d="m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12"></path><path d="m6.49 12.85 11.02 6.3"></path><path d="M17.51 12.85 6.5 19.15">`),
  _tmpl$830 = /*#__PURE__*/_$template(`<svg><path d="M10 18v-7"></path><path d="M11.12 2.198a2 2 0 0 1 1.76.006l7.866 3.847c.476.233.31.949-.22.949H3.474c-.53 0-.695-.716-.22-.949z"></path><path d="M14 18v-7"></path><path d="M18 18v-7"></path><path d="M3 22h18"></path><path d="M6 18v-7">`),
  _tmpl$831 = /*#__PURE__*/_$template(`<svg><path d="m5 8 6 6"></path><path d="m4 14 6-6 2-3"></path><path d="M2 5h12"></path><path d="M7 2h1"></path><path d="m22 22-5-10-5 10"></path><path d="M14 18h6">`),
  _tmpl$832 = /*#__PURE__*/_$template(`<svg><path d="M2 20h20"></path><path d="m9 10 2 2 4-4"></path><rect x=3 y=4 width=18 height=12 rx=2>`),
  _tmpl$833 = /*#__PURE__*/_$template(`<svg><rect width=18 height=12 x=3 y=4 rx=2 ry=2></rect><line x1=2 x2=22 y1=20 y2=20>`),
  _tmpl$834 = /*#__PURE__*/_$template(`<svg><path d="M18 5a2 2 0 0 1 2 2v8.526a2 2 0 0 0 .212.897l1.068 2.127a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45l1.068-2.127A2 2 0 0 0 4 15.526V7a2 2 0 0 1 2-2z"></path><path d="M20.054 15.987H3.946">`),
  _tmpl$835 = /*#__PURE__*/_$template(`<svg><path d="M7 22a5 5 0 0 1-2-4"></path><path d="M7 16.93c.96.43 1.96.74 2.99.91"></path><path d="M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2"></path><path d="M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"></path><path d="M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z">`),
  _tmpl$836 = /*#__PURE__*/_$template(`<svg><path d="M7 22a5 5 0 0 1-2-4"></path><path d="M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1"></path><path d="M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z">`),
  _tmpl$837 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z"></path><line x1=9 x2=9.01 y1=9 y2=9></line><line x1=15 x2=15.01 y1=9 y2=9>`),
  _tmpl$838 = /*#__PURE__*/_$template(`<svg><path d="M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74z"></path><path d="m20 14.285 1.5.845a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74l1.5-.845">`),
  _tmpl$839 = /*#__PURE__*/_$template(`<svg><path d="M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"></path><path d="M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"></path><path d="M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17">`),
  _tmpl$840 = /*#__PURE__*/_$template(`<svg><rect width=7 height=9 x=3 y=3 rx=1></rect><rect width=7 height=5 x=14 y=3 rx=1></rect><rect width=7 height=9 x=14 y=12 rx=1></rect><rect width=7 height=5 x=3 y=16 rx=1>`),
  _tmpl$841 = /*#__PURE__*/_$template(`<svg><rect width=7 height=7 x=3 y=3 rx=1></rect><rect width=7 height=7 x=14 y=3 rx=1></rect><rect width=7 height=7 x=14 y=14 rx=1></rect><rect width=7 height=7 x=3 y=14 rx=1>`),
  _tmpl$842 = /*#__PURE__*/_$template(`<svg><rect width=7 height=7 x=3 y=3 rx=1></rect><rect width=7 height=7 x=3 y=14 rx=1></rect><path d="M14 4h7"></path><path d="M14 9h7"></path><path d="M14 15h7"></path><path d="M14 20h7">`),
  _tmpl$843 = /*#__PURE__*/_$template(`<svg><rect width=7 height=18 x=3 y=3 rx=1></rect><rect width=7 height=7 x=14 y=3 rx=1></rect><rect width=7 height=7 x=14 y=14 rx=1>`),
  _tmpl$844 = /*#__PURE__*/_$template(`<svg><rect width=18 height=7 x=3 y=3 rx=1></rect><rect width=7 height=7 x=3 y=14 rx=1></rect><rect width=7 height=7 x=14 y=14 rx=1>`),
  _tmpl$845 = /*#__PURE__*/_$template(`<svg><rect width=18 height=7 x=3 y=3 rx=1></rect><rect width=9 height=7 x=3 y=14 rx=1></rect><rect width=5 height=7 x=16 y=14 rx=1>`),
  _tmpl$846 = /*#__PURE__*/_$template(`<svg><path d="M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z"></path><path d="M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12">`),
  _tmpl$847 = /*#__PURE__*/_$template(`<svg><path d="M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22"></path><path d="M2 22 17 7">`),
  _tmpl$848 = /*#__PURE__*/_$template(`<svg><path d="M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3"></path><path d="M18 6V3a1 1 0 0 0-1-1h-3"></path><rect width=8 height=12 x=8 y=10 rx=1>`),
  _tmpl$849 = /*#__PURE__*/_$template(`<svg><path d="M15 12h6"></path><path d="M15 6h6"></path><path d="m3 13 3.553-7.724a.5.5 0 0 1 .894 0L11 13"></path><path d="M3 18h18"></path><path d="M3.92 11h6.16">`),
  _tmpl$850 = /*#__PURE__*/_$template(`<svg><rect width=8 height=18 x=3 y=3 rx=1></rect><path d="M7 3v18"></path><path d="M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z">`),
  _tmpl$851 = /*#__PURE__*/_$template(`<svg><path d="m16 6 4 14"></path><path d="M12 6v14"></path><path d="M8 8v12"></path><path d="M4 4v16">`),
  _tmpl$852 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="m4.93 4.93 4.24 4.24"></path><path d="m14.83 9.17 4.24-4.24"></path><path d="m14.83 14.83 4.24 4.24"></path><path d="m9.17 14.83-4.24 4.24"></path><circle cx=12 cy=12 r=4>`),
  _tmpl$853 = /*#__PURE__*/_$template(`<svg><path d="M14 12h2v8"></path><path d="M14 20h4"></path><path d="M6 12h4"></path><path d="M6 20h4"></path><path d="M8 20V8a4 4 0 0 1 7.464-2">`),
  _tmpl$854 = /*#__PURE__*/_$template(`<svg><path d="M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5"></path><path d="m2 2 20 20"></path><path d="M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5"></path><path d="M9 18h6"></path><path d="M10 22h4">`),
  _tmpl$855 = /*#__PURE__*/_$template(`<svg><path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"></path><path d="M9 18h6"></path><path d="M10 22h4">`),
  _tmpl$856 = /*#__PURE__*/_$template(`<svg><path d="M7 3.5c5-2 7 2.5 3 4C1.5 10 2 15 5 16c5 2 9-10 14-7s.5 13.5-4 12c-5-2.5.5-11 6-2">`),
  _tmpl$857 = /*#__PURE__*/_$template(`<svg><path d="M9 17H7A5 5 0 0 1 7 7"></path><path d="M15 7h2a5 5 0 0 1 4 8"></path><line x1=8 x2=12 y1=12 y2=12></line><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$858 = /*#__PURE__*/_$template(`<svg><path d="M9 17H7A5 5 0 0 1 7 7h2"></path><path d="M15 7h2a5 5 0 1 1 0 10h-2"></path><line x1=8 x2=16 y1=12 y2=12>`),
  _tmpl$859 = /*#__PURE__*/_$template(`<svg><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71">`),
  _tmpl$860 = /*#__PURE__*/_$template(`<svg><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect width=4 height=12 x=2 y=9></rect><circle cx=4 cy=4 r=2>`),
  _tmpl$861 = /*#__PURE__*/_$template(`<svg><path d="M11 18H3"></path><path d="m15 18 2 2 4-4"></path><path d="M16 12H3"></path><path d="M16 6H3">`),
  _tmpl$862 = /*#__PURE__*/_$template(`<svg><path d="m3 17 2 2 4-4"></path><path d="m3 7 2 2 4-4"></path><path d="M13 6h8"></path><path d="M13 12h8"></path><path d="M13 18h8">`),
  _tmpl$863 = /*#__PURE__*/_$template(`<svg><path d="M10 12h11"></path><path d="M10 18h11"></path><path d="M10 6h11"></path><path d="m3 10 3-3-3-3"></path><path d="m3 20 3-3-3-3">`),
  _tmpl$864 = /*#__PURE__*/_$template(`<svg><path d="M16 12H3"></path><path d="M16 6H3"></path><path d="M10 18H3"></path><path d="M21 6v10a2 2 0 0 1-2 2h-5"></path><path d="m16 16-2 2 2 2">`),
  _tmpl$865 = /*#__PURE__*/_$template(`<svg><path d="M10 18h4"></path><path d="M11 6H3"></path><path d="M15 6h6"></path><path d="M18 9V3"></path><path d="M7 12h8">`),
  _tmpl$866 = /*#__PURE__*/_$template(`<svg><path d="M3 6h18"></path><path d="M7 12h10"></path><path d="M10 18h4">`),
  _tmpl$867 = /*#__PURE__*/_$template(`<svg><path d="M11 12H3"></path><path d="M16 6H3"></path><path d="M16 18H3"></path><path d="M21 12h-6">`),
  _tmpl$868 = /*#__PURE__*/_$template(`<svg><path d="M21 15V6"></path><path d="M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"></path><path d="M12 12H3"></path><path d="M16 6H3"></path><path d="M12 18H3">`),
  _tmpl$869 = /*#__PURE__*/_$template(`<svg><path d="M10 12h11"></path><path d="M10 18h11"></path><path d="M10 6h11"></path><path d="M4 10h2"></path><path d="M4 6h1v4"></path><path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1">`),
  _tmpl$870 = /*#__PURE__*/_$template(`<svg><path d="M11 12H3"></path><path d="M16 6H3"></path><path d="M16 18H3"></path><path d="M18 9v6"></path><path d="M21 12h-6">`),
  _tmpl$871 = /*#__PURE__*/_$template(`<svg><path d="M21 6H3"></path><path d="M7 12H3"></path><path d="M7 18H3"></path><path d="M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14"></path><path d="M11 10v4h4">`),
  _tmpl$872 = /*#__PURE__*/_$template(`<svg><path d="M16 12H3"></path><path d="M16 18H3"></path><path d="M10 6H3"></path><path d="M21 18V8a2 2 0 0 0-2-2h-5"></path><path d="m16 8-2-2 2-2">`),
  _tmpl$873 = /*#__PURE__*/_$template(`<svg><rect x=3 y=5 width=6 height=6 rx=1></rect><path d="m3 17 2 2 4-4"></path><path d="M13 6h8"></path><path d="M13 12h8"></path><path d="M13 18h8">`),
  _tmpl$874 = /*#__PURE__*/_$template(`<svg><path d="M21 12h-8"></path><path d="M21 6H8"></path><path d="M21 18h-8"></path><path d="M3 6v4c0 1.1.9 2 2 2h3"></path><path d="M3 10v6c0 1.1.9 2 2 2h3">`),
  _tmpl$875 = /*#__PURE__*/_$template(`<svg><path d="M12 12H3"></path><path d="M16 6H3"></path><path d="M12 18H3"></path><path d="m16 12 5 3-5 3v-6Z">`),
  _tmpl$876 = /*#__PURE__*/_$template(`<svg><path d="M11 12H3"></path><path d="M16 6H3"></path><path d="M16 18H3"></path><path d="m19 10-4 4"></path><path d="m15 10 4 4">`),
  _tmpl$877 = /*#__PURE__*/_$template(`<svg><path d="M3 12h.01"></path><path d="M3 18h.01"></path><path d="M3 6h.01"></path><path d="M8 12h13"></path><path d="M8 18h13"></path><path d="M8 6h13">`),
  _tmpl$878 = /*#__PURE__*/_$template(`<svg><path d="M21 12a9 9 0 1 1-6.219-8.56">`),
  _tmpl$879 = /*#__PURE__*/_$template(`<svg><path d="M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0"></path><path d="M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6"></path><path d="M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$880 = /*#__PURE__*/_$template(`<svg><path d="M12 2v4"></path><path d="m16.2 7.8 2.9-2.9"></path><path d="M18 12h4"></path><path d="m16.2 16.2 2.9 2.9"></path><path d="M12 18v4"></path><path d="m4.9 19.1 2.9-2.9"></path><path d="M2 12h4"></path><path d="m4.9 4.9 2.9 2.9">`),
  _tmpl$881 = /*#__PURE__*/_$template(`<svg><line x1=2 x2=5 y1=12 y2=12></line><line x1=19 x2=22 y1=12 y2=12></line><line x1=12 x2=12 y1=2 y2=5></line><line x1=12 x2=12 y1=19 y2=22></line><circle cx=12 cy=12 r=7></circle><circle cx=12 cy=12 r=3>`),
  _tmpl$882 = /*#__PURE__*/_$template(`<svg><path d="M12 19v3"></path><path d="M12 2v3"></path><path d="M18.89 13.24a7 7 0 0 0-8.13-8.13"></path><path d="M19 12h3"></path><path d="M2 12h3"></path><path d="m2 2 20 20"></path><path d="M7.05 7.05a7 7 0 0 0 9.9 9.9">`),
  _tmpl$883 = /*#__PURE__*/_$template(`<svg><line x1=2 x2=5 y1=12 y2=12></line><line x1=19 x2=22 y1=12 y2=12></line><line x1=12 x2=12 y1=2 y2=5></line><line x1=12 x2=12 y1=19 y2=22></line><circle cx=12 cy=12 r=7>`),
  _tmpl$884 = /*#__PURE__*/_$template(`<svg><path d="M17.97 9.304A8 8 0 0 0 2 10c0 4.69 4.887 9.562 7.022 11.468"></path><path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"></path><circle cx=10 cy=10 r=3>`),
  _tmpl$885 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=16 r=1></circle><rect width=18 height=12 x=3 y=10 rx=2></rect><path d="M7 10V7a5 5 0 0 1 9.33-2.5">`),
  _tmpl$886 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=16 r=1></circle><rect x=3 y=10 width=18 height=12 rx=2></rect><path d="M7 10V7a5 5 0 0 1 10 0v3">`),
  _tmpl$887 = /*#__PURE__*/_$template(`<svg><rect width=18 height=11 x=3 y=11 rx=2 ry=2></rect><path d="M7 11V7a5 5 0 0 1 9.9-1">`),
  _tmpl$888 = /*#__PURE__*/_$template(`<svg><rect width=18 height=11 x=3 y=11 rx=2 ry=2></rect><path d="M7 11V7a5 5 0 0 1 10 0v4">`),
  _tmpl$889 = /*#__PURE__*/_$template(`<svg><path d="m10 17 5-5-5-5"></path><path d="M15 12H3"></path><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4">`),
  _tmpl$890 = /*#__PURE__*/_$template(`<svg><path d="m16 17 5-5-5-5"></path><path d="M21 12H9"></path><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4">`),
  _tmpl$891 = /*#__PURE__*/_$template(`<svg><path d="M13 12h8"></path><path d="M13 18h8"></path><path d="M13 6h8"></path><path d="M3 12h1"></path><path d="M3 18h1"></path><path d="M3 6h1"></path><path d="M8 12h1"></path><path d="M8 18h1"></path><path d="M8 6h1">`),
  _tmpl$892 = /*#__PURE__*/_$template(`<svg><circle cx=11 cy=11 r=8></circle><path d="m21 21-4.3-4.3"></path><path d="M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0">`),
  _tmpl$893 = /*#__PURE__*/_$template(`<svg><path d="M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2"></path><path d="M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14"></path><path d="M10 20h4"></path><circle cx=16 cy=20 r=2></circle><circle cx=8 cy=20 r=2>`),
  _tmpl$894 = /*#__PURE__*/_$template(`<svg><path d="m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15"></path><path d="m5 8 4 4"></path><path d="m12 15 4 4">`),
  _tmpl$895 = /*#__PURE__*/_$template(`<svg><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="m16 19 2 2 4-4">`),
  _tmpl$896 = /*#__PURE__*/_$template(`<svg><path d="M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="M16 19h6">`),
  _tmpl$897 = /*#__PURE__*/_$template(`<svg><path d="M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z"></path><path d="m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10">`),
  _tmpl$898 = /*#__PURE__*/_$template(`<svg><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="M19 16v6"></path><path d="M16 19h6">`),
  _tmpl$899 = /*#__PURE__*/_$template(`<svg><path d="M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2"></path><path d="M20 22v.01">`),
  _tmpl$900 = /*#__PURE__*/_$template(`<svg><path d="M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"></path><circle cx=18 cy=18 r=3></circle><path d="m22 22-1.5-1.5">`),
  _tmpl$901 = /*#__PURE__*/_$template(`<svg><path d="M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="M20 14v4"></path><path d="M20 22v.01">`),
  _tmpl$902 = /*#__PURE__*/_$template(`<svg><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9"></path><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path><path d="m17 17 4 4"></path><path d="m21 17-4 4">`),
  _tmpl$903 = /*#__PURE__*/_$template(`<svg><path d="m22 7-8.991 5.727a2 2 0 0 1-2.009 0L2 7"></path><rect x=2 y=4 width=20 height=16 rx=2>`),
  _tmpl$904 = /*#__PURE__*/_$template(`<svg><path d="M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z"></path><polyline points="15,9 18,9 18,11"></polyline><path d="M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2"></path><line x1=6 x2=7 y1=10 y2=10>`),
  _tmpl$905 = /*#__PURE__*/_$template(`<svg><rect width=16 height=13 x=6 y=4 rx=2></rect><path d="m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7"></path><path d="M2 8v11c0 1.1.9 2 2 2h14">`),
  _tmpl$906 = /*#__PURE__*/_$template(`<svg><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="m9 10 2 2 4-4">`),
  _tmpl$907 = /*#__PURE__*/_$template(`<svg><path d="M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728"></path><circle cx=12 cy=10 r=3></circle><path d="m16 18 2 2 4-4">`),
  _tmpl$908 = /*#__PURE__*/_$template(`<svg><path d="M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z"></path><path d="M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2"></path><path d="M18 22v-3"></path><circle cx=10 cy=10 r=3>`),
  _tmpl$909 = /*#__PURE__*/_$template(`<svg><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="M9 10h6">`),
  _tmpl$910 = /*#__PURE__*/_$template(`<svg><path d="M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"></path><circle cx=12 cy=10 r=3></circle><path d="M16 18h6">`),
  _tmpl$911 = /*#__PURE__*/_$template(`<svg><path d="M12.75 7.09a3 3 0 0 1 2.16 2.16"></path><path d="M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568"></path><path d="m2 2 20 20"></path><path d="M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533"></path><path d="M9.13 9.13a3 3 0 0 0 3.74 3.74">`),
  _tmpl$912 = /*#__PURE__*/_$template(`<svg><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="M12 7v6"></path><path d="M9 10h6">`),
  _tmpl$913 = /*#__PURE__*/_$template(`<svg><path d="M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"></path><circle cx=12 cy=10 r=3></circle><path d="M16 18h6"></path><path d="M19 15v6">`),
  _tmpl$914 = /*#__PURE__*/_$template(`<svg><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="m14.5 7.5-5 5"></path><path d="m9.5 7.5 5 5">`),
  _tmpl$915 = /*#__PURE__*/_$template(`<svg><path d="M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077"></path><circle cx=12 cy=10 r=3></circle><path d="m21.5 15.5-5 5"></path><path d="m21.5 20.5-5-5">`),
  _tmpl$916 = /*#__PURE__*/_$template(`<svg><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx=12 cy=10 r=3>`),
  _tmpl$917 = /*#__PURE__*/_$template(`<svg><path d="M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0"></path><circle cx=12 cy=8 r=2></circle><path d="M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712">`),
  _tmpl$918 = /*#__PURE__*/_$template(`<svg><path d="m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V12"></path><path d="M15 5.764V12"></path><path d="M18 15v6"></path><path d="M21 18h-6"></path><path d="M9 3.236v15">`),
  _tmpl$919 = /*#__PURE__*/_$template(`<svg><path d="M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z"></path><path d="M15 5.764v15"></path><path d="M9 3.236v15">`),
  _tmpl$920 = /*#__PURE__*/_$template(`<svg><path d="m14 6 4 4"></path><path d="M17 3h4v4"></path><path d="m21 3-7.75 7.75"></path><circle cx=9 cy=15 r=6>`),
  _tmpl$921 = /*#__PURE__*/_$template(`<svg><path d="M16 3h5v5"></path><path d="m21 3-6.75 6.75"></path><circle cx=10 cy=14 r=6>`),
  _tmpl$922 = /*#__PURE__*/_$template(`<svg><path d="M8 22h8"></path><path d="M12 11v11"></path><path d="m19 3-7 8-7-8Z">`),
  _tmpl$923 = /*#__PURE__*/_$template(`<svg><path d="M15 3h6v6"></path><path d="m21 3-7 7"></path><path d="m3 21 7-7"></path><path d="M9 21H3v-6">`),
  _tmpl$924 = /*#__PURE__*/_$template(`<svg><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3">`),
  _tmpl$925 = /*#__PURE__*/_$template(`<svg><path d="M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15"></path><path d="M11 12 5.12 2.2"></path><path d="m13 12 5.88-9.8"></path><path d="M8 7h8"></path><circle cx=12 cy=17 r=5></circle><path d="M12 18v-2h-.5">`),
  _tmpl$926 = /*#__PURE__*/_$template(`<svg><path d="M11.636 6A13 13 0 0 0 19.4 3.2 1 1 0 0 1 21 4v11.344"></path><path d="M14.378 14.357A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1"></path><path d="m2 2 20 20"></path><path d="M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14"></path><path d="M8 8v6">`),
  _tmpl$927 = /*#__PURE__*/_$template(`<svg><path d="M11 6a13 13 0 0 0 8.4-2.8A1 1 0 0 1 21 4v12a1 1 0 0 1-1.6.8A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z"></path><path d="M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14"></path><path d="M8 6v8">`),
  _tmpl$928 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><line x1=8 x2=16 y1=15 y2=15></line><line x1=9 x2=9.01 y1=9 y2=9></line><line x1=15 x2=15.01 y1=9 y2=9>`),
  _tmpl$929 = /*#__PURE__*/_$template(`<svg><path d="M6 19v-3"></path><path d="M10 19v-3"></path><path d="M14 19v-3"></path><path d="M18 19v-3"></path><path d="M8 11V9"></path><path d="M16 11V9"></path><path d="M12 11V9"></path><path d="M2 15h20"></path><path d="M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z">`),
  _tmpl$930 = /*#__PURE__*/_$template(`<svg><path d="M4 12h16"></path><path d="M4 18h16"></path><path d="M4 6h16">`),
  _tmpl$931 = /*#__PURE__*/_$template(`<svg><path d="m8 6 4-4 4 4"></path><path d="M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22"></path><path d="m20 22-5-5">`),
  _tmpl$932 = /*#__PURE__*/_$template(`<svg><path d="M10 9.5 8 12l2 2.5"></path><path d="m14 9.5 2 2.5-2 2.5"></path><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22z">`),
  _tmpl$933 = /*#__PURE__*/_$template(`<svg><path d="M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1"></path><path d="M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1"></path><path d="M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5"></path><path d="M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1"></path><path d="M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1"></path><path d="M3.5 17.5 2 22l4.5-1.5"></path><path d="M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5"></path><path d="M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1">`),
  _tmpl$934 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7">`),
  _tmpl$935 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="M8 12h.01"></path><path d="M12 12h.01"></path><path d="M16 12h.01">`),
  _tmpl$936 = /*#__PURE__*/_$template(`<svg><path d="M20.5 14.9A9 9 0 0 0 9.1 3.5"></path><path d="m2 2 20 20"></path><path d="M5.6 5.6C3 8.3 2.2 12.5 4 16l-2 6 6-2c3.4 1.8 7.6 1.1 10.3-1.7">`),
  _tmpl$937 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="M8 12h8"></path><path d="M12 8v8">`),
  _tmpl$938 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><path d="M12 17h.01">`),
  _tmpl$939 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="m10 15-3-3 3-3"></path><path d="M7 12h7a2 2 0 0 1 2 2v1">`),
  _tmpl$940 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="M12 8v4"></path><path d="M12 16h.01">`),
  _tmpl$941 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"></path><path d="m15 9-6 6"></path><path d="m9 9 6 6">`),
  _tmpl$942 = /*#__PURE__*/_$template(`<svg><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z">`),
  _tmpl$943 = /*#__PURE__*/_$template(`<svg><path d="M10 7.5 8 10l2 2.5"></path><path d="m14 7.5 2 2.5-2 2.5"></path><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z">`),
  _tmpl$944 = /*#__PURE__*/_$template(`<svg><path d="M10 17H7l-4 4v-7"></path><path d="M14 17h1"></path><path d="M14 3h1"></path><path d="M19 3a2 2 0 0 1 2 2"></path><path d="M21 14v1a2 2 0 0 1-2 2"></path><path d="M21 9v1"></path><path d="M3 9v1"></path><path d="M5 3a2 2 0 0 0-2 2"></path><path d="M9 3h1">`),
  _tmpl$945 = /*#__PURE__*/_$template(`<svg><path d="m5 19-2 2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2"></path><path d="M9 10h6"></path><path d="M12 7v6"></path><path d="M9 17h6">`),
  _tmpl$946 = /*#__PURE__*/_$template(`<svg><path d="M11.7 3H5a2 2 0 0 0-2 2v16l4-4h12a2 2 0 0 0 2-2v-2.7"></path><circle cx=18 cy=6 r=3>`),
  _tmpl$947 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M14.8 7.5a1.84 1.84 0 0 0-2.6 0l-.2.3-.3-.3a1.84 1.84 0 1 0-2.4 2.8L12 13l2.7-2.7c.9-.9.8-2.1.1-2.8">`),
  _tmpl$948 = /*#__PURE__*/_$template(`<svg><path d="M19 15v-2a2 2 0 1 0-4 0v2"></path><path d="M9 17H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v3.5"></path><rect x=13 y=15 width=8 height=5 rx=1>`),
  _tmpl$949 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M8 10h.01"></path><path d="M12 10h.01"></path><path d="M16 10h.01">`),
  _tmpl$950 = /*#__PURE__*/_$template(`<svg><path d="M21 15V5a2 2 0 0 0-2-2H9"></path><path d="m2 2 20 20"></path><path d="M3.6 3.6c-.4.3-.6.8-.6 1.4v16l4-4h10">`),
  _tmpl$951 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M12 7v6"></path><path d="M9 10h6">`),
  _tmpl$952 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M8 12a2 2 0 0 0 2-2V8H8"></path><path d="M14 12a2 2 0 0 0 2-2V8h-2">`),
  _tmpl$953 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="m10 7-3 3 3 3"></path><path d="M17 13v-1a2 2 0 0 0-2-2H7">`),
  _tmpl$954 = /*#__PURE__*/_$template(`<svg><path d="M21 12v3a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h7"></path><path d="M16 3h5v5"></path><path d="m16 8 5-5">`),
  _tmpl$955 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M13 8H7"></path><path d="M17 12H7">`),
  _tmpl$956 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="M12 7v2"></path><path d="M12 13h.01">`),
  _tmpl$957 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path><path d="m14.5 7.5-5 5"></path><path d="m9.5 7.5 5 5">`),
  _tmpl$958 = /*#__PURE__*/_$template(`<svg><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z">`),
  _tmpl$959 = /*#__PURE__*/_$template(`<svg><path d="M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z"></path><path d="M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1">`),
  _tmpl$960 = /*#__PURE__*/_$template(`<svg><line x1=2 x2=22 y1=2 y2=22></line><path d="M18.89 13.23A7.12 7.12 0 0 0 19 12v-2"></path><path d="M5 10v2a7 7 0 0 0 12 5"></path><path d="M15 9.34V5a3 3 0 0 0-5.68-1.33"></path><path d="M9 9v3a3 3 0 0 0 5.12 2.12"></path><line x1=12 x2=12 y1=19 y2=22>`),
  _tmpl$961 = /*#__PURE__*/_$template(`<svg><path d="m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12"></path><path d="M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5"></path><circle cx=16 cy=7 r=5>`),
  _tmpl$962 = /*#__PURE__*/_$template(`<svg><path d="M12 19v3"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><rect x=9 y=2 width=6 height=13 rx=3>`),
  _tmpl$963 = /*#__PURE__*/_$template(`<svg><path d="M18 12h2"></path><path d="M18 16h2"></path><path d="M18 20h2"></path><path d="M18 4h2"></path><path d="M18 8h2"></path><path d="M4 12h2"></path><path d="M4 16h2"></path><path d="M4 20h2"></path><path d="M4 4h2"></path><path d="M4 8h2"></path><path d="M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z">`),
  _tmpl$964 = /*#__PURE__*/_$template(`<svg><path d="M6 18h8"></path><path d="M3 22h18"></path><path d="M14 22a7 7 0 1 0 0-14h-1"></path><path d="M9 14h2"></path><path d="M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z"></path><path d="M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3">`),
  _tmpl$965 = /*#__PURE__*/_$template(`<svg><rect width=20 height=15 x=2 y=4 rx=2></rect><rect width=8 height=7 x=6 y=8 rx=1></rect><path d="M18 8v7"></path><path d="M6 19v2"></path><path d="M18 19v2">`),
  _tmpl$966 = /*#__PURE__*/_$template(`<svg><path d="M12 13v8"></path><path d="M12 3v3"></path><path d="M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z">`),
  _tmpl$967 = /*#__PURE__*/_$template(`<svg><path d="M8 2h8"></path><path d="M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3"></path><path d="M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$968 = /*#__PURE__*/_$template(`<svg><path d="M8 2h8"></path><path d="M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2"></path><path d="M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0">`),
  _tmpl$969 = /*#__PURE__*/_$template(`<svg><path d="m14 10 7-7"></path><path d="M20 10h-6V4"></path><path d="m3 21 7-7"></path><path d="M4 14h6v6">`),
  _tmpl$970 = /*#__PURE__*/_$template(`<svg><path d="M8 3v3a2 2 0 0 1-2 2H3"></path><path d="M21 8h-3a2 2 0 0 1-2-2V3"></path><path d="M3 16h3a2 2 0 0 1 2 2v3"></path><path d="M16 21v-3a2 2 0 0 1 2-2h3">`),
  _tmpl$971 = /*#__PURE__*/_$template(`<svg><path d="M5 12h14">`),
  _tmpl$972 = /*#__PURE__*/_$template(`<svg><path d="m9 10 2 2 4-4"></path><rect width=20 height=14 x=2 y=3 rx=2></rect><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$973 = /*#__PURE__*/_$template(`<svg><path d="M12 17v4"></path><path d="m14.305 7.53.923-.382"></path><path d="m15.228 4.852-.923-.383"></path><path d="m16.852 3.228-.383-.924"></path><path d="m16.852 8.772-.383.923"></path><path d="m19.148 3.228.383-.924"></path><path d="m19.53 9.696-.382-.924"></path><path d="m20.772 4.852.924-.383"></path><path d="m20.772 7.148.924.383"></path><path d="M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"></path><path d="M8 21h8"></path><circle cx=18 cy=6 r=3>`),
  _tmpl$974 = /*#__PURE__*/_$template(`<svg><circle cx=19 cy=6 r=3></circle><path d="M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9"></path><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$975 = /*#__PURE__*/_$template(`<svg><path d="M12 13V7"></path><path d="m15 10-3 3-3-3"></path><rect width=20 height=14 x=2 y=3 rx=2></rect><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$976 = /*#__PURE__*/_$template(`<svg><path d="M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2"></path><path d="M22 15V5a2 2 0 0 0-2-2H9"></path><path d="M8 21h8"></path><path d="M12 17v4"></path><path d="m2 2 20 20">`),
  _tmpl$977 = /*#__PURE__*/_$template(`<svg><path d="M10 13V7"></path><path d="M14 13V7"></path><rect width=20 height=14 x=2 y=3 rx=2></rect><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$978 = /*#__PURE__*/_$template(`<svg><path d="M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z"></path><path d="M12 17v4"></path><path d="M8 21h8"></path><rect x=2 y=3 width=20 height=14 rx=2>`),
  _tmpl$979 = /*#__PURE__*/_$template(`<svg><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"></path><path d="M10 19v-3.96 3.15"></path><path d="M7 19h5"></path><rect width=6 height=10 x=16 y=12 rx=2>`),
  _tmpl$980 = /*#__PURE__*/_$template(`<svg><path d="M5.5 20H8"></path><path d="M17 9h.01"></path><rect width=10 height=16 x=12 y=4 rx=2></rect><path d="M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4"></path><circle cx=17 cy=15 r=1>`),
  _tmpl$981 = /*#__PURE__*/_$template(`<svg><path d="M12 17v4"></path><path d="M8 21h8"></path><rect x=2 y=3 width=20 height=14 rx=2></rect><rect x=9 y=7 width=6 height=6 rx=1>`),
  _tmpl$982 = /*#__PURE__*/_$template(`<svg><path d="m9 10 3-3 3 3"></path><path d="M12 13V7"></path><rect width=20 height=14 x=2 y=3 rx=2></rect><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$983 = /*#__PURE__*/_$template(`<svg><path d="m14.5 12.5-5-5"></path><path d="m9.5 12.5 5-5"></path><rect width=20 height=14 x=2 y=3 rx=2></rect><path d="M12 17v4"></path><path d="M8 21h8">`),
  _tmpl$984 = /*#__PURE__*/_$template(`<svg><rect width=20 height=14 x=2 y=3 rx=2></rect><line x1=8 x2=16 y1=21 y2=21></line><line x1=12 x2=12 y1=17 y2=21>`),
  _tmpl$985 = /*#__PURE__*/_$template(`<svg><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9"></path><path d="M20 3v4"></path><path d="M22 5h-4">`),
  _tmpl$986 = /*#__PURE__*/_$template(`<svg><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z">`),
  _tmpl$987 = /*#__PURE__*/_$template(`<svg><path d="m8 3 4 8 5-5 5 15H2L8 3z"></path><path d="M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19">`),
  _tmpl$988 = /*#__PURE__*/_$template(`<svg><path d="m8 3 4 8 5-5 5 15H2L8 3z">`),
  _tmpl$989 = /*#__PURE__*/_$template(`<svg><path d="M12 6v.343"></path><path d="M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218"></path><path d="M19 13.343V9A7 7 0 0 0 8.56 2.902"></path><path d="M22 22 2 2">`),
  _tmpl$990 = /*#__PURE__*/_$template(`<svg><path d="M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z">`),
  _tmpl$991 = /*#__PURE__*/_$template(`<svg><path d="M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z"></path><circle cx=16 cy=16 r=6></circle><path d="m11.8 11.8 8.4 8.4">`),
  _tmpl$992 = /*#__PURE__*/_$template(`<svg><path d="M14 4.1 12 6"></path><path d="m5.1 8-2.9-.8"></path><path d="m6 12-1.9 2"></path><path d="M7.2 2.2 8 5.1"></path><path d="M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z">`),
  _tmpl$993 = /*#__PURE__*/_$template(`<svg><path d="M12.586 12.586 19 19"></path><path d="M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z">`),
  _tmpl$994 = /*#__PURE__*/_$template(`<svg><rect x=5 y=2 width=14 height=20 rx=7></rect><path d="M12 6v4">`),
  _tmpl$995 = /*#__PURE__*/_$template(`<svg><path d="M5 3v16h16"></path><path d="m5 19 6-6"></path><path d="m2 6 3-3 3 3"></path><path d="m18 16 3 3-3 3">`),
  _tmpl$996 = /*#__PURE__*/_$template(`<svg><path d="M19 13v6h-6"></path><path d="M5 11V5h6"></path><path d="m5 5 14 14">`),
  _tmpl$997 = /*#__PURE__*/_$template(`<svg><path d="M11 19H5v-6"></path><path d="M13 5h6v6"></path><path d="M19 5 5 19">`),
  _tmpl$998 = /*#__PURE__*/_$template(`<svg><path d="M11 19H5V13"></path><path d="M19 5L5 19">`),
  _tmpl$999 = /*#__PURE__*/_$template(`<svg><path d="M19 13V19H13"></path><path d="M5 5L19 19">`),
  _tmpl$1000 = /*#__PURE__*/_$template(`<svg><path d="M8 18L12 22L16 18"></path><path d="M12 2V22">`),
  _tmpl$1001 = /*#__PURE__*/_$template(`<svg><path d="m18 8 4 4-4 4"></path><path d="M2 12h20"></path><path d="m6 8-4 4 4 4">`),
  _tmpl$1002 = /*#__PURE__*/_$template(`<svg><path d="M6 8L2 12L6 16"></path><path d="M2 12H22">`),
  _tmpl$1003 = /*#__PURE__*/_$template(`<svg><path d="M18 8L22 12L18 16"></path><path d="M2 12H22">`),
  _tmpl$1004 = /*#__PURE__*/_$template(`<svg><path d="M5 11V5H11"></path><path d="M5 5L19 19">`),
  _tmpl$1005 = /*#__PURE__*/_$template(`<svg><path d="M13 5H19V11"></path><path d="M19 5L5 19">`),
  _tmpl$1006 = /*#__PURE__*/_$template(`<svg><path d="M8 6L12 2L16 6"></path><path d="M12 2V22">`),
  _tmpl$1007 = /*#__PURE__*/_$template(`<svg><path d="M12 2v20"></path><path d="m8 18 4 4 4-4"></path><path d="m8 6 4-4 4 4">`),
  _tmpl$1008 = /*#__PURE__*/_$template(`<svg><path d="M12 2v20"></path><path d="m15 19-3 3-3-3"></path><path d="m19 9 3 3-3 3"></path><path d="M2 12h20"></path><path d="m5 9-3 3 3 3"></path><path d="m9 5 3-3 3 3">`),
  _tmpl$1009 = /*#__PURE__*/_$template(`<svg><circle cx=8 cy=18 r=4></circle><path d="M12 18V2l7 4">`),
  _tmpl$1010 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=18 r=4></circle><path d="M16 18V2">`),
  _tmpl$1011 = /*#__PURE__*/_$template(`<svg><path d="M9 18V5l12-2v13"></path><path d="m9 9 12-2"></path><circle cx=6 cy=18 r=3></circle><circle cx=18 cy=16 r=3>`),
  _tmpl$1012 = /*#__PURE__*/_$template(`<svg><path d="M9 18V5l12-2v13"></path><circle cx=6 cy=18 r=3></circle><circle cx=18 cy=16 r=3>`),
  _tmpl$1013 = /*#__PURE__*/_$template(`<svg><path d="M9.31 9.31 5 21l7-4 7 4-1.17-3.17"></path><path d="M14.53 8.88 12 2l-1.17 3.17"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1014 = /*#__PURE__*/_$template(`<svg><polygon points="12 2 19 21 12 17 5 21 12 2">`),
  _tmpl$1015 = /*#__PURE__*/_$template(`<svg><path d="M8.43 8.43 3 11l8 2 2 8 2.57-5.43"></path><path d="M17.39 11.73 22 2l-9.73 4.61"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1016 = /*#__PURE__*/_$template(`<svg><polygon points="3 11 22 2 13 21 11 13 3 11">`),
  _tmpl$1017 = /*#__PURE__*/_$template(`<svg><rect x=16 y=16 width=6 height=6 rx=1></rect><rect x=2 y=16 width=6 height=6 rx=1></rect><rect x=9 y=2 width=6 height=6 rx=1></rect><path d="M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3"></path><path d="M12 12V8">`),
  _tmpl$1018 = /*#__PURE__*/_$template(`<svg><path d="M15 18h-5"></path><path d="M18 14h-8"></path><path d="M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2"></path><rect width=8 height=4 x=10 y=6 rx=1>`),
  _tmpl$1019 = /*#__PURE__*/_$template(`<svg><path d="M6 8.32a7.43 7.43 0 0 1 0 7.36"></path><path d="M9.46 6.21a11.76 11.76 0 0 1 0 11.58"></path><path d="M12.91 4.1a15.91 15.91 0 0 1 .01 15.8"></path><path d="M16.37 2a20.16 20.16 0 0 1 0 20">`),
  _tmpl$1020 = /*#__PURE__*/_$template(`<svg><path d="M12 2v10"></path><path d="m8.5 4 7 4"></path><path d="m8.5 8 7-4"></path><circle cx=12 cy=17 r=5>`),
  _tmpl$1021 = /*#__PURE__*/_$template(`<svg><path d="M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4"></path><path d="M2 6h4"></path><path d="M2 10h4"></path><path d="M2 14h4"></path><path d="M2 18h4"></path><path d="M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z">`),
  _tmpl$1022 = /*#__PURE__*/_$template(`<svg><path d="M2 6h4"></path><path d="M2 10h4"></path><path d="M2 14h4"></path><path d="M2 18h4"></path><rect width=16 height=20 x=4 y=2 rx=2></rect><path d="M15 2v20"></path><path d="M15 7h5"></path><path d="M15 12h5"></path><path d="M15 17h5">`),
  _tmpl$1023 = /*#__PURE__*/_$template(`<svg><path d="M2 6h4"></path><path d="M2 10h4"></path><path d="M2 14h4"></path><path d="M2 18h4"></path><rect width=16 height=20 x=4 y=2 rx=2></rect><path d="M9.5 8h5"></path><path d="M9.5 12H16"></path><path d="M9.5 16H14">`),
  _tmpl$1024 = /*#__PURE__*/_$template(`<svg><path d="M2 6h4"></path><path d="M2 10h4"></path><path d="M2 14h4"></path><path d="M2 18h4"></path><rect width=16 height=20 x=4 y=2 rx=2></rect><path d="M16 2v20">`),
  _tmpl$1025 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M12 2v4"></path><path d="M16 2v4"></path><path d="M16 4h2a2 2 0 0 1 2 2v2"></path><path d="M20 12v2"></path><path d="M20 18v2a2 2 0 0 1-2 2h-1"></path><path d="M13 22h-2"></path><path d="M7 22H6a2 2 0 0 1-2-2v-2"></path><path d="M4 14v-2"></path><path d="M4 8V6a2 2 0 0 1 2-2h2"></path><path d="M8 10h6"></path><path d="M8 14h8"></path><path d="M8 18h5">`),
  _tmpl$1026 = /*#__PURE__*/_$template(`<svg><path d="M8 2v4"></path><path d="M12 2v4"></path><path d="M16 2v4"></path><rect width=16 height=18 x=4 y=4 rx=2></rect><path d="M8 10h6"></path><path d="M8 14h8"></path><path d="M8 18h5">`),
  _tmpl$1027 = /*#__PURE__*/_$template(`<svg><path d="M12 4V2"></path><path d="M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939"></path><path d="M19 10v3.343"></path><path d="M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1028 = /*#__PURE__*/_$template(`<svg><path d="M12 4V2"></path><path d="M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4"></path><path d="M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z">`),
  _tmpl$1029 = /*#__PURE__*/_$template(`<svg><path d="M12 16h.01"></path><path d="M12 8v4"></path><path d="M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z">`),
  _tmpl$1030 = /*#__PURE__*/_$template(`<svg><path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"></path><path d="M8 12h8">`),
  _tmpl$1031 = /*#__PURE__*/_$template(`<svg><path d="M10 15V9"></path><path d="M14 15V9"></path><path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z">`),
  _tmpl$1032 = /*#__PURE__*/_$template(`<svg><path d="m15 9-6 6"></path><path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"></path><path d="m9 9 6 6">`),
  _tmpl$1033 = /*#__PURE__*/_$template(`<svg><path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z">`),
  _tmpl$1034 = /*#__PURE__*/_$template(`<svg><path d="M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21">`),
  _tmpl$1035 = /*#__PURE__*/_$template(`<svg><path d="M3 3h6l6 18h6"></path><path d="M14 3h7">`),
  _tmpl$1036 = /*#__PURE__*/_$template(`<svg><path d="M20.341 6.484A10 10 0 0 1 10.266 21.85"></path><path d="M3.659 17.516A10 10 0 0 1 13.74 2.152"></path><circle cx=12 cy=12 r=3></circle><circle cx=19 cy=5 r=2></circle><circle cx=5 cy=19 r=2>`),
  _tmpl$1037 = /*#__PURE__*/_$template(`<svg><path d="M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025"></path><path d="m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009"></path><path d="m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027">`),
  _tmpl$1038 = /*#__PURE__*/_$template(`<svg><path d="M12 3v6"></path><path d="M16.76 3a2 2 0 0 1 1.8 1.1l2.23 4.479a2 2 0 0 1 .21.891V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9.472a2 2 0 0 1 .211-.894L5.45 4.1A2 2 0 0 1 7.24 3z"></path><path d="M3.054 9.013h17.893">`),
  _tmpl$1039 = /*#__PURE__*/_$template(`<svg><path d="m16 16 2 2 4-4"></path><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"></path><path d="m7.5 4.27 9 5.15"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><line x1=12 x2=12 y1=22 y2=12>`),
  _tmpl$1040 = /*#__PURE__*/_$template(`<svg><path d="M16 16h6"></path><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"></path><path d="m7.5 4.27 9 5.15"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><line x1=12 x2=12 y1=22 y2=12>`),
  _tmpl$1041 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-9"></path><path d="M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z"></path><path d="M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13"></path><path d="M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z">`),
  _tmpl$1042 = /*#__PURE__*/_$template(`<svg><path d="M16 16h6"></path><path d="M19 13v6"></path><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"></path><path d="m7.5 4.27 9 5.15"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><line x1=12 x2=12 y1=22 y2=12>`),
  _tmpl$1043 = /*#__PURE__*/_$template(`<svg><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"></path><path d="m7.5 4.27 9 5.15"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><line x1=12 x2=12 y1=22 y2=12></line><circle cx=18.5 cy=15.5 r=2.5></circle><path d="M20.27 17.27 22 19">`),
  _tmpl$1044 = /*#__PURE__*/_$template(`<svg><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"></path><path d="m7.5 4.27 9 5.15"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><line x1=12 x2=12 y1=22 y2=12></line><path d="m17 13 5 5m-5 0 5-5">`),
  _tmpl$1045 = /*#__PURE__*/_$template(`<svg><path d="M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z"></path><path d="M12 22V12"></path><polyline points="3.29 7 12 12 20.71 7"></polyline><path d="m7.5 4.27 9 5.15">`),
  _tmpl$1046 = /*#__PURE__*/_$template(`<svg><path d="m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"></path><path d="m5 2 5 5"></path><path d="M2 13h15"></path><path d="M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z">`),
  _tmpl$1047 = /*#__PURE__*/_$template(`<svg><rect width=16 height=6 x=2 y=2 rx=2></rect><path d="M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"></path><rect width=4 height=6 x=8 y=16 rx=1>`),
  _tmpl$1048 = /*#__PURE__*/_$template(`<svg><path d="M10 2v2"></path><path d="M14 2v4"></path><path d="M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z"></path><path d="M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1">`),
  _tmpl$1049 = /*#__PURE__*/_$template(`<svg><path d="m14.622 17.897-10.68-2.913"></path><path d="M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z"></path><path d="M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15">`),
  _tmpl$1050 = /*#__PURE__*/_$template(`<svg><path d="M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z"></path><circle cx=13.5 cy=6.5 r=.5 fill=currentColor></circle><circle cx=17.5 cy=10.5 r=.5 fill=currentColor></circle><circle cx=6.5 cy=12.5 r=.5 fill=currentColor></circle><circle cx=8.5 cy=7.5 r=.5 fill=currentColor>`),
  _tmpl$1051 = /*#__PURE__*/_$template(`<svg><path d="M11.25 17.25h1.5L12 18z"></path><path d="m15 12 2 2"></path><path d="M18 6.5a.5.5 0 0 0-.5-.5"></path><path d="M20.69 9.67a4.5 4.5 0 1 0-7.04-5.5 8.35 8.35 0 0 0-3.3 0 4.5 4.5 0 1 0-7.04 5.5C2.49 11.2 2 12.88 2 14.5 2 19.47 6.48 22 12 22s10-2.53 10-7.5c0-1.62-.48-3.3-1.3-4.83"></path><path d="M6 6.5a.495.495 0 0 1 .5-.5"></path><path d="m9 12-2 2">`),
  _tmpl$1052 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 15h18"></path><path d="m15 8-3 3-3-3">`),
  _tmpl$1053 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M14 15h1"></path><path d="M19 15h2"></path><path d="M3 15h2"></path><path d="M9 15h1">`),
  _tmpl$1054 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 15h18"></path><path d="m9 10 3-3 3 3">`),
  _tmpl$1055 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 15h18">`),
  _tmpl$1056 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 3v18"></path><path d="m16 15-3-3 3-3">`),
  _tmpl$1057 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 14v1"></path><path d="M9 19v2"></path><path d="M9 3v2"></path><path d="M9 9v1">`),
  _tmpl$1058 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 3v18"></path><path d="m14 9 3 3-3 3">`),
  _tmpl$1059 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 3v18">`),
  _tmpl$1060 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M15 3v18"></path><path d="m8 9 3 3-3 3">`),
  _tmpl$1061 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M15 14v1"></path><path d="M15 19v2"></path><path d="M15 3v2"></path><path d="M15 9v1">`),
  _tmpl$1062 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M15 3v18"></path><path d="m10 15-3-3 3-3">`),
  _tmpl$1063 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M15 3v18">`),
  _tmpl$1064 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18"></path><path d="m9 16 3-3 3 3">`),
  _tmpl$1065 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M14 9h1"></path><path d="M19 9h2"></path><path d="M3 9h2"></path><path d="M9 9h1">`),
  _tmpl$1066 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18"></path><path d="m15 14-3 3-3-3">`),
  _tmpl$1067 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18">`),
  _tmpl$1068 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 3v18"></path><path d="M9 15h12">`),
  _tmpl$1069 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 15h12"></path><path d="M15 3v18">`),
  _tmpl$1070 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18"></path><path d="M9 21V9">`),
  _tmpl$1071 = /*#__PURE__*/_$template(`<svg><path d="m16 6-8.414 8.586a2 2 0 0 0 2.829 2.829l8.414-8.586a4 4 0 1 0-5.657-5.657l-8.379 8.551a6 6 0 1 0 8.485 8.485l8.379-8.551">`),
  _tmpl$1072 = /*#__PURE__*/_$template(`<svg><path d="M8 21s-4-3-4-9 4-9 4-9"></path><path d="M16 3s4 3 4 9-4 9-4 9">`),
  _tmpl$1073 = /*#__PURE__*/_$template(`<svg><path d="M11 15h2"></path><path d="M12 12v3"></path><path d="M12 19v3"></path><path d="M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z"></path><path d="M9 9a3 3 0 1 1 6 0">`),
  _tmpl$1074 = /*#__PURE__*/_$template(`<svg><path d="M5.8 11.3 2 22l10.7-3.79"></path><path d="M4 3h.01"></path><path d="M22 8h.01"></path><path d="M15 2h.01"></path><path d="M22 20h.01"></path><path d="m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10"></path><path d="m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17"></path><path d="m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7"></path><path d="M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z">`),
  _tmpl$1075 = /*#__PURE__*/_$template(`<svg><rect x=14 y=4 width=4 height=16 rx=1></rect><rect x=6 y=4 width=4 height=16 rx=1>`),
  _tmpl$1076 = /*#__PURE__*/_$template(`<svg><circle cx=11 cy=4 r=2></circle><circle cx=18 cy=8 r=2></circle><circle cx=20 cy=16 r=2></circle><path d="M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z">`),
  _tmpl$1077 = /*#__PURE__*/_$template(`<svg><rect width=14 height=20 x=5 y=2 rx=2></rect><path d="M15 14h.01"></path><path d="M9 6h6"></path><path d="M9 10h6">`),
  _tmpl$1078 = /*#__PURE__*/_$template(`<svg><path d="M12 20h9"></path><path d="M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z">`),
  _tmpl$1079 = /*#__PURE__*/_$template(`<svg><path d="m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"></path><path d="m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"></path><path d="m2 2 20 20">`),
  _tmpl$1080 = /*#__PURE__*/_$template(`<svg><path d="M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z"></path><path d="m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18"></path><path d="m2.3 2.3 7.286 7.286"></path><circle cx=11 cy=11 r=2>`),
  _tmpl$1081 = /*#__PURE__*/_$template(`<svg><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z">`),
  _tmpl$1082 = /*#__PURE__*/_$template(`<svg><path d="M12 20h9"></path><path d="M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z"></path><path d="m15 5 3 3">`),
  _tmpl$1083 = /*#__PURE__*/_$template(`<svg><path d="m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"></path><path d="m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"></path><path d="m15 5 4 4"></path><path d="m2 2 20 20">`),
  _tmpl$1084 = /*#__PURE__*/_$template(`<svg><path d="M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13"></path><path d="m8 6 2-2"></path><path d="m18 16 2-2"></path><path d="m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17"></path><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"></path><path d="m15 5 4 4">`),
  _tmpl$1085 = /*#__PURE__*/_$template(`<svg><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"></path><path d="m15 5 4 4">`),
  _tmpl$1086 = /*#__PURE__*/_$template(`<svg><path d="M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z">`),
  _tmpl$1087 = /*#__PURE__*/_$template(`<svg><line x1=19 x2=5 y1=5 y2=19></line><circle cx=6.5 cy=6.5 r=2.5></circle><circle cx=17.5 cy=17.5 r=2.5>`),
  _tmpl$1088 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=5 r=1></circle><path d="m9 20 3-6 3 6"></path><path d="m6 8 6 2 6-2"></path><path d="M12 10v4">`),
  _tmpl$1089 = /*#__PURE__*/_$template(`<svg><path d="M20 11H4"></path><path d="M20 7H4"></path><path d="M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7">`),
  _tmpl$1090 = /*#__PURE__*/_$template(`<svg><path d="M13 2a9 9 0 0 1 9 9"></path><path d="M13 6a5 5 0 0 1 5 5"></path><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1091 = /*#__PURE__*/_$template(`<svg><path d="M14 6h8"></path><path d="m18 2 4 4-4 4"></path><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1092 = /*#__PURE__*/_$template(`<svg><path d="M16 2v6h6"></path><path d="m22 2-6 6"></path><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1093 = /*#__PURE__*/_$template(`<svg><path d="m16 2 6 6"></path><path d="m22 2-6 6"></path><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1094 = /*#__PURE__*/_$template(`<svg><path d="M10.1 13.9a14 14 0 0 0 3.732 2.668 1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 18 18 0 0 1-12.728-5.272"></path><path d="M22 2 2 22"></path><path d="M4.76 13.582A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 .244.473">`),
  _tmpl$1095 = /*#__PURE__*/_$template(`<svg><path d="m16 8 6-6"></path><path d="M22 8V2h-6"></path><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1096 = /*#__PURE__*/_$template(`<svg><path d="M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384">`),
  _tmpl$1097 = /*#__PURE__*/_$template(`<svg><line x1=9 x2=9 y1=4 y2=20></line><path d="M4 7c0-1.7 1.3-3 3-3h13"></path><path d="M18 20c-1.7 0-3-1.3-3-3V4">`),
  _tmpl$1098 = /*#__PURE__*/_$template(`<svg><path d="M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8"></path><path d="M2 14h20"></path><path d="M6 14v4"></path><path d="M10 14v4"></path><path d="M14 14v4"></path><path d="M18 14v4">`),
  _tmpl$1099 = /*#__PURE__*/_$template(`<svg><path d="M14.531 12.469 6.619 20.38a1 1 0 1 1-3-3l7.912-7.912"></path><path d="M15.686 4.314A12.5 12.5 0 0 0 5.461 2.958 1 1 0 0 0 5.58 4.71a22 22 0 0 1 6.318 3.393"></path><path d="M17.7 3.7a1 1 0 0 0-1.4 0l-4.6 4.6a1 1 0 0 0 0 1.4l2.6 2.6a1 1 0 0 0 1.4 0l4.6-4.6a1 1 0 0 0 0-1.4z"></path><path d="M19.686 8.314a12.501 12.501 0 0 1 1.356 10.225 1 1 0 0 1-1.751-.119 22 22 0 0 0-3.393-6.319">`),
  _tmpl$1100 = /*#__PURE__*/_$template(`<svg><path d="M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4"></path><rect width=10 height=7 x=12 y=13 rx=2>`),
  _tmpl$1101 = /*#__PURE__*/_$template(`<svg><path d="M2 10h6V4"></path><path d="m2 4 6 6"></path><path d="M21 10V7a2 2 0 0 0-2-2h-7"></path><path d="M3 14v2a2 2 0 0 0 2 2h3"></path><rect x=12 y=14 width=10 height=7 rx=1>`),
  _tmpl$1102 = /*#__PURE__*/_$template(`<svg><path d="M11 17h3v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a3.16 3.16 0 0 0 2-2h1a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1a5 5 0 0 0-2-4V3a4 4 0 0 0-3.2 1.6l-.3.4H11a6 6 0 0 0-6 6v1a5 5 0 0 0 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z"></path><path d="M16 10h.01"></path><path d="M2 8v1a2 2 0 0 0 2 2h1">`),
  _tmpl$1103 = /*#__PURE__*/_$template(`<svg><path d="M14 3v11"></path><path d="M14 9h-3a3 3 0 0 1 0-6h9"></path><path d="M18 3v11"></path><path d="M22 18H2l4-4"></path><path d="m6 22-4-4">`),
  _tmpl$1104 = /*#__PURE__*/_$template(`<svg><path d="M10 3v11"></path><path d="M10 9H7a1 1 0 0 1 0-6h8"></path><path d="M14 3v11"></path><path d="m18 14 4 4H2"></path><path d="m22 18-4 4">`),
  _tmpl$1105 = /*#__PURE__*/_$template(`<svg><path d="M13 4v16"></path><path d="M17 4v16"></path><path d="M19 4H9.5a4.5 4.5 0 0 0 0 9H13">`),
  _tmpl$1106 = /*#__PURE__*/_$template(`<svg><path d="M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4"></path><path d="M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7"></path><rect width=16 height=5 x=4 y=2 rx=1>`),
  _tmpl$1107 = /*#__PURE__*/_$template(`<svg><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"></path><path d="m8.5 8.5 7 7">`),
  _tmpl$1108 = /*#__PURE__*/_$template(`<svg><path d="M12 17v5"></path><path d="M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89"></path><path d="m2 2 20 20"></path><path d="M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11">`),
  _tmpl$1109 = /*#__PURE__*/_$template(`<svg><path d="M12 17v5"></path><path d="M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z">`),
  _tmpl$1110 = /*#__PURE__*/_$template(`<svg><path d="m12 9-8.414 8.414A2 2 0 0 0 3 18.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 3.828 21h1.344a2 2 0 0 0 1.414-.586L15 12"></path><path d="m18 9 .4.4a1 1 0 1 1-3 3l-3.8-3.8a1 1 0 1 1 3-3l.4.4 3.4-3.4a1 1 0 1 1 3 3z"></path><path d="m2 22 .414-.414">`),
  _tmpl$1111 = /*#__PURE__*/_$template(`<svg><path d="m12 14-1 1"></path><path d="m13.75 18.25-1.25 1.42"></path><path d="M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12"></path><path d="M18.8 9.3a1 1 0 0 0 2.1 7.7"></path><path d="M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z">`),
  _tmpl$1112 = /*#__PURE__*/_$template(`<svg><path d="M2 22h20"></path><path d="M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z">`),
  _tmpl$1113 = /*#__PURE__*/_$template(`<svg><path d="M2 22h20"></path><path d="M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z">`),
  _tmpl$1114 = /*#__PURE__*/_$template(`<svg><path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z">`),
  _tmpl$1115 = /*#__PURE__*/_$template(`<svg><polygon points="6 3 20 12 6 21 6 3">`),
  _tmpl$1116 = /*#__PURE__*/_$template(`<svg><path d="M9 2v6"></path><path d="M15 2v6"></path><path d="M12 17v5"></path><path d="M5 8h14"></path><path d="M6 11V8h12v3a6 6 0 1 1-12 0Z">`),
  _tmpl$1117 = /*#__PURE__*/_$template(`<svg><path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"></path><path d="m2 22 3-3"></path><path d="M7.5 13.5 10 11"></path><path d="M10.5 16.5 13 14"></path><path d="m18 3-4 4h6l-4 4">`),
  _tmpl$1118 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-5"></path><path d="M9 8V2"></path><path d="M15 8V2"></path><path d="M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z">`),
  _tmpl$1119 = /*#__PURE__*/_$template(`<svg><path d="M5 12h14"></path><path d="M12 5v14">`),
  _tmpl$1120 = /*#__PURE__*/_$template(`<svg><path d="M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2"></path><path d="M18 6h.01"></path><path d="M6 18h.01"></path><path d="M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z"></path><path d="M18 11.66V22a4 4 0 0 0 4-4V6">`),
  _tmpl$1121 = /*#__PURE__*/_$template(`<svg><path d="M20 3a2 2 0 0 1 2 2v6a1 1 0 0 1-20 0V5a2 2 0 0 1 2-2z"></path><path d="m8 10 4 4 4-4">`),
  _tmpl$1122 = /*#__PURE__*/_$template(`<svg><path d="M16.85 18.58a9 9 0 1 0-9.7 0"></path><path d="M8 14a5 5 0 1 1 8 0"></path><circle cx=12 cy=11 r=1></circle><path d="M13 17a1 1 0 1 0-2 0l.5 4.5a.5.5 0 1 0 1 0Z">`),
  _tmpl$1123 = /*#__PURE__*/_$template(`<svg><path d="M10 4.5V4a2 2 0 0 0-2.41-1.957"></path><path d="M13.9 8.4a2 2 0 0 0-1.26-1.295"></path><path d="M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158"></path><path d="m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343"></path><path d="M6 6v8"></path><path d="m2 2 20 20">`),
  _tmpl$1124 = /*#__PURE__*/_$template(`<svg><path d="M22 14a8 8 0 0 1-8 8"></path><path d="M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2"></path><path d="M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1"></path><path d="M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10"></path><path d="M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15">`),
  _tmpl$1125 = /*#__PURE__*/_$template(`<svg><path d="M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4"></path><path d="M10 22 9 8"></path><path d="m14 22 1-14"></path><path d="M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z">`),
  _tmpl$1126 = /*#__PURE__*/_$template(`<svg><path d="M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z"></path><path d="m22 22-5.5-5.5">`),
  _tmpl$1127 = /*#__PURE__*/_$template(`<svg><path d="M18 7c0-5.333-8-5.333-8 0"></path><path d="M10 7v14"></path><path d="M6 21h12"></path><path d="M6 13h10">`),
  _tmpl$1128 = /*#__PURE__*/_$template(`<svg><path d="M18.36 6.64A9 9 0 0 1 20.77 15"></path><path d="M6.16 6.16a9 9 0 1 0 12.68 12.68"></path><path d="M12 2v4"></path><path d="m2 2 20 20">`),
  _tmpl$1129 = /*#__PURE__*/_$template(`<svg><path d="M12 2v10"></path><path d="M18.4 6.6a9 9 0 1 1-12.77.04">`),
  _tmpl$1130 = /*#__PURE__*/_$template(`<svg><path d="M2 3h20"></path><path d="M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3"></path><path d="m7 21 5-5 5 5">`),
  _tmpl$1131 = /*#__PURE__*/_$template(`<svg><path d="M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5"></path><path d="m16 19 2 2 4-4"></path><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2"></path><path d="M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6">`),
  _tmpl$1132 = /*#__PURE__*/_$template(`<svg><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><path d="M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6"></path><rect x=6 y=14 width=12 height=8 rx=1>`),
  _tmpl$1133 = /*#__PURE__*/_$template(`<svg><path d="M5 7 3 5"></path><path d="M9 6V3"></path><path d="m13 7 2-2"></path><circle cx=9 cy=13 r=3></circle><path d="M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17"></path><path d="M16 16h2">`),
  _tmpl$1134 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M12 9v11"></path><path d="M2 9h13a2 2 0 0 1 2 2v9">`),
  _tmpl$1135 = /*#__PURE__*/_$template(`<svg><path d="M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z">`),
  _tmpl$1136 = /*#__PURE__*/_$template(`<svg><path d="M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z"></path><path d="M12 2v20">`),
  _tmpl$1137 = /*#__PURE__*/_$template(`<svg><rect width=5 height=5 x=3 y=3 rx=1></rect><rect width=5 height=5 x=16 y=3 rx=1></rect><rect width=5 height=5 x=3 y=16 rx=1></rect><path d="M21 16h-3a2 2 0 0 0-2 2v3"></path><path d="M21 21v.01"></path><path d="M12 7v3a2 2 0 0 1-2 2H7"></path><path d="M3 12h.01"></path><path d="M12 3h.01"></path><path d="M12 16v.01"></path><path d="M16 12h1"></path><path d="M21 12v.01"></path><path d="M12 21v-1">`),
  _tmpl$1138 = /*#__PURE__*/_$template(`<svg><path d="M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z"></path><path d="M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z">`),
  _tmpl$1139 = /*#__PURE__*/_$template(`<svg><path d="M13 16a3 3 0 0 1 2.24 5"></path><path d="M18 12h.01"></path><path d="M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3"></path><path d="M20 8.54V4a2 2 0 1 0-4 0v3"></path><path d="M7.612 12.524a3 3 0 1 0-1.6 4.3">`),
  _tmpl$1140 = /*#__PURE__*/_$template(`<svg><path d="M19.07 4.93A10 10 0 0 0 6.99 3.34"></path><path d="M4 6h.01"></path><path d="M2.29 9.62A10 10 0 1 0 21.31 8.35"></path><path d="M16.24 7.76A6 6 0 1 0 8.23 16.67"></path><path d="M12 18h.01"></path><path d="M17.99 11.66A6 6 0 0 1 15.77 16.67"></path><circle cx=12 cy=12 r=2></circle><path d="m13.41 10.59 5.66-5.66">`),
  _tmpl$1141 = /*#__PURE__*/_$template(`<svg><path d="M12 12h.01"></path><path d="M14 15.4641a4 4 0 0 1-4 0L7.52786 19.74597 A 1 1 0 0 0 7.99303 21.16211 10 10 0 0 0 16.00697 21.16211 1 1 0 0 0 16.47214 19.74597z"></path><path d="M16 12a4 4 0 0 0-2-3.464l2.472-4.282a1 1 0 0 1 1.46-.305 10 10 0 0 1 4.006 6.94A1 1 0 0 1 21 12z"></path><path d="M8 12a4 4 0 0 1 2-3.464L7.528 4.254a1 1 0 0 0-1.46-.305 10 10 0 0 0-4.006 6.94A1 1 0 0 0 3 12z">`),
  _tmpl$1142 = /*#__PURE__*/_$template(`<svg><path d="M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21">`),
  _tmpl$1143 = /*#__PURE__*/_$template(`<svg><path d="M5 16v2"></path><path d="M19 16v2"></path><rect width=20 height=8 x=2 y=8 rx=2></rect><path d="M18 12h.01">`),
  _tmpl$1144 = /*#__PURE__*/_$template(`<svg><path d="M4.9 16.1C1 12.2 1 5.8 4.9 1.9"></path><path d="M7.8 4.7a6.14 6.14 0 0 0-.8 7.5"></path><circle cx=12 cy=9 r=2></circle><path d="M16.2 4.8c2 2 2.26 5.11.8 7.47"></path><path d="M19.1 1.9a9.96 9.96 0 0 1 0 14.1"></path><path d="M9.5 18h5"></path><path d="m8 22 4-11 4 11">`),
  _tmpl$1145 = /*#__PURE__*/_$template(`<svg><path d="M16.247 7.761a6 6 0 0 1 0 8.478"></path><path d="M19.075 4.933a10 10 0 0 1 0 14.134"></path><path d="M4.925 19.067a10 10 0 0 1 0-14.134"></path><path d="M7.753 16.239a6 6 0 0 1 0-8.478"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$1146 = /*#__PURE__*/_$template(`<svg><path d="M20.34 17.52a10 10 0 1 0-2.82 2.82"></path><circle cx=19 cy=19 r=2></circle><path d="m13.41 13.41 4.18 4.18"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$1147 = /*#__PURE__*/_$template(`<svg><path d="M5 15h14"></path><path d="M5 9h14"></path><path d="m14 20-5-5 6-6-5-5">`),
  _tmpl$1148 = /*#__PURE__*/_$template(`<svg><path d="M22 17a10 10 0 0 0-20 0"></path><path d="M6 17a6 6 0 0 1 12 0"></path><path d="M10 17a2 2 0 0 1 4 0">`),
  _tmpl$1149 = /*#__PURE__*/_$template(`<svg><path d="M13 22H4a2 2 0 0 1 0-4h12"></path><path d="M13.236 18a3 3 0 0 0-2.2-5"></path><path d="M16 9h.01"></path><path d="M16.82 3.94a3 3 0 1 1 3.237 4.868l1.815 2.587a1.5 1.5 0 0 1-1.5 2.1l-2.872-.453a3 3 0 0 0-3.5 3"></path><path d="M17 4.988a3 3 0 1 0-5.2 2.052A7 7 0 0 0 4 14.015 4 4 0 0 0 8 18">`),
  _tmpl$1150 = /*#__PURE__*/_$template(`<svg><rect width=12 height=20 x=6 y=2 rx=2></rect><rect width=20 height=12 x=2 y=6 rx=2>`),
  _tmpl$1151 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M12 6.5v11"></path><path d="M15 9.4a4 4 0 1 0 0 5.2">`),
  _tmpl$1152 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M8 12h5"></path><path d="M16 9.5a4 4 0 1 0 0 5.2">`),
  _tmpl$1153 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M8 7h8"></path><path d="M12 17.5 8 15h1a4 4 0 0 0 0-8"></path><path d="M8 11h8">`),
  _tmpl$1154 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="m12 10 3-3"></path><path d="m9 7 3 3v7.5"></path><path d="M9 11h6"></path><path d="M9 15h6">`),
  _tmpl$1155 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M8 13h5"></path><path d="M10 17V9.5a2.5 2.5 0 0 1 5 0"></path><path d="M8 17h7">`),
  _tmpl$1156 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M8 15h5"></path><path d="M8 11h5a2 2 0 1 0 0-4h-3v10">`),
  _tmpl$1157 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M10 17V7h5"></path><path d="M10 11h4"></path><path d="M8 15h5">`),
  _tmpl$1158 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M14 8H8"></path><path d="M16 12H8"></path><path d="M13 16H8">`),
  _tmpl$1159 = /*#__PURE__*/_$template(`<svg><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"></path><path d="M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"></path><path d="M12 17.5v-11">`),
  _tmpl$1160 = /*#__PURE__*/_$template(`<svg><path d="M14 4v16H3a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1z"></path><circle cx=14 cy=12 r=8>`),
  _tmpl$1161 = /*#__PURE__*/_$template(`<svg><rect width=20 height=12 x=2 y=6 rx=2></rect><path d="M12 12h.01"></path><path d="M17 12h.01"></path><path d="M7 12h.01">`),
  _tmpl$1162 = /*#__PURE__*/_$template(`<svg><path d="M20 6a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-4a2 2 0 0 1-1.6-.8l-1.6-2.13a1 1 0 0 0-1.6 0L9.6 17.2A2 2 0 0 1 8 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z">`),
  _tmpl$1163 = /*#__PURE__*/_$template(`<svg><rect width=20 height=12 x=2 y=6 rx=2>`),
  _tmpl$1164 = /*#__PURE__*/_$template(`<svg><rect width=12 height=20 x=6 y=2 rx=2>`),
  _tmpl$1165 = /*#__PURE__*/_$template(`<svg><path d="M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5"></path><path d="M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12"></path><path d="m14 16-3 3 3 3"></path><path d="M8.293 13.596 7.196 9.5 3.1 10.598"></path><path d="m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843"></path><path d="m13.378 9.633 4.096 1.098 1.097-4.096">`),
  _tmpl$1166 = /*#__PURE__*/_$template(`<svg><path d="m15 14 5-5-5-5"></path><path d="M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13">`),
  _tmpl$1167 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=17 r=1></circle><path d="M21 7v6h-6"></path><path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7">`),
  _tmpl$1168 = /*#__PURE__*/_$template(`<svg><path d="M21 7v6h-6"></path><path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7">`),
  _tmpl$1169 = /*#__PURE__*/_$template(`<svg><path d="M3 2v6h6"></path><path d="M21 12A9 9 0 0 0 6 5.3L3 8"></path><path d="M21 22v-6h-6"></path><path d="M3 12a9 9 0 0 0 15 6.7l3-2.7"></path><circle cx=12 cy=12 r=1>`),
  _tmpl$1170 = /*#__PURE__*/_$template(`<svg><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"></path><path d="M16 16h5v5">`),
  _tmpl$1171 = /*#__PURE__*/_$template(`<svg><path d="M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47"></path><path d="M8 16H3v5"></path><path d="M3 12C3 9.51 4 7.26 5.64 5.64"></path><path d="m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64"></path><path d="M21 12c0 1-.16 1.97-.47 2.87"></path><path d="M21 3v5h-5"></path><path d="M22 22 2 2">`),
  _tmpl$1172 = /*#__PURE__*/_$template(`<svg><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5">`),
  _tmpl$1173 = /*#__PURE__*/_$template(`<svg><path d="M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z"></path><path d="M5 10h14"></path><path d="M15 7v6">`),
  _tmpl$1174 = /*#__PURE__*/_$template(`<svg><path d="M17 3v10"></path><path d="m12.67 5.5 8.66 5"></path><path d="m12.67 10.5 8.66-5"></path><path d="M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z">`),
  _tmpl$1175 = /*#__PURE__*/_$template(`<svg><path d="M4 7V4h16v3"></path><path d="M5 20h6"></path><path d="M13 4 8 20"></path><path d="m15 15 5 5"></path><path d="m20 15-5 5">`),
  _tmpl$1176 = /*#__PURE__*/_$template(`<svg><path d="m17 2 4 4-4 4"></path><path d="M3 11v-1a4 4 0 0 1 4-4h14"></path><path d="m7 22-4-4 4-4"></path><path d="M21 13v1a4 4 0 0 1-4 4H3"></path><path d="M11 10h1v4">`),
  _tmpl$1177 = /*#__PURE__*/_$template(`<svg><path d="m2 9 3-3 3 3"></path><path d="M13 18H7a2 2 0 0 1-2-2V6"></path><path d="m22 15-3 3-3-3"></path><path d="M11 6h6a2 2 0 0 1 2 2v10">`),
  _tmpl$1178 = /*#__PURE__*/_$template(`<svg><path d="m17 2 4 4-4 4"></path><path d="M3 11v-1a4 4 0 0 1 4-4h14"></path><path d="m7 22-4-4 4-4"></path><path d="M21 13v1a4 4 0 0 1-4 4H3">`),
  _tmpl$1179 = /*#__PURE__*/_$template(`<svg><path d="M14 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"></path><path d="M14 4a2 2 0 0 1 2-2"></path><path d="M16 10a2 2 0 0 1-2-2"></path><path d="M20 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"></path><path d="M20 2a2 2 0 0 1 2 2"></path><path d="M22 8a2 2 0 0 1-2 2"></path><path d="m3 7 3 3 3-3"></path><path d="M6 10V5a 3 3 0 0 1 3-3h1"></path><rect x=2 y=14 width=8 height=8 rx=2>`),
  _tmpl$1180 = /*#__PURE__*/_$template(`<svg><path d="M14 4a2 2 0 0 1 2-2"></path><path d="M16 10a2 2 0 0 1-2-2"></path><path d="M20 2a2 2 0 0 1 2 2"></path><path d="M22 8a2 2 0 0 1-2 2"></path><path d="m3 7 3 3 3-3"></path><path d="M6 10V5a3 3 0 0 1 3-3h1"></path><rect x=2 y=14 width=8 height=8 rx=2>`),
  _tmpl$1181 = /*#__PURE__*/_$template(`<svg><path d="m12 17-5-5 5-5"></path><path d="M22 18v-2a4 4 0 0 0-4-4H7"></path><path d="m7 17-5-5 5-5">`),
  _tmpl$1182 = /*#__PURE__*/_$template(`<svg><path d="M20 18v-2a4 4 0 0 0-4-4H4"></path><path d="m9 17-5-5 5-5">`),
  _tmpl$1183 = /*#__PURE__*/_$template(`<svg><polygon points="11 19 2 12 11 5 11 19"></polygon><polygon points="22 19 13 12 22 5 22 19">`),
  _tmpl$1184 = /*#__PURE__*/_$template(`<svg><path d="M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22"></path><path d="m12 18 2.57-3.5"></path><path d="M6.243 9.016a7 7 0 0 1 11.507-.009"></path><path d="M9.35 14.53 12 11.22"></path><path d="M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z">`),
  _tmpl$1185 = /*#__PURE__*/_$template(`<svg><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"></path><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"></path><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"></path><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5">`),
  _tmpl$1186 = /*#__PURE__*/_$template(`<svg><polyline points="3.5 2 6.5 12.5 18 12.5"></polyline><line x1=9.5 x2=5.5 y1=12.5 y2=20></line><line x1=15 x2=18.5 y1=12.5 y2=20></line><path d="M2.75 18a13 13 0 0 0 18.5 0">`),
  _tmpl$1187 = /*#__PURE__*/_$template(`<svg><path d="M6 19V5"></path><path d="M10 19V6.8"></path><path d="M14 19v-7.8"></path><path d="M18 5v4"></path><path d="M18 19v-6"></path><path d="M22 19V9"></path><path d="M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65">`),
  _tmpl$1188 = /*#__PURE__*/_$template(`<svg><path d="M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"></path><path d="m15.194 13.707 3.814 1.86-1.86 3.814"></path><path d="M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4">`),
  _tmpl$1189 = /*#__PURE__*/_$template(`<svg><path d="m14.5 9.5 1 1"></path><path d="m15.5 8.5-4 4"></path><path d="M3 12a9 9 0 1 0 9-9 9.74 9.74 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5"></path><circle cx=10 cy=14 r=2>`),
  _tmpl$1190 = /*#__PURE__*/_$template(`<svg><path d="M20 9V7a2 2 0 0 0-2-2h-6"></path><path d="m15 2-3 3 3 3"></path><path d="M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2">`),
  _tmpl$1191 = /*#__PURE__*/_$template(`<svg><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path><path d="M3 3v5h5">`),
  _tmpl$1192 = /*#__PURE__*/_$template(`<svg><path d="M12 5H6a2 2 0 0 0-2 2v3"></path><path d="m9 8 3-3-3-3"></path><path d="M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2">`),
  _tmpl$1193 = /*#__PURE__*/_$template(`<svg><path d="M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5">`),
  _tmpl$1194 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=19 r=3></circle><path d="M9 19h8.5c.4 0 .9-.1 1.3-.2"></path><path d="M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12"></path><path d="m2 2 20 20"></path><path d="M21 15.3a3.5 3.5 0 0 0-3.3-3.3"></path><path d="M15 5h-4.3"></path><circle cx=18 cy=5 r=3>`),
  _tmpl$1195 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=19 r=3></circle><path d="M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15"></path><circle cx=18 cy=5 r=3>`),
  _tmpl$1196 = /*#__PURE__*/_$template(`<svg><rect width=20 height=8 x=2 y=14 rx=2></rect><path d="M6.01 18H6"></path><path d="M10.01 18H10"></path><path d="M15 10v4"></path><path d="M17.84 7.17a4 4 0 0 0-5.66 0"></path><path d="M20.66 4.34a8 8 0 0 0-11.31 0">`),
  _tmpl$1197 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 12h18">`),
  _tmpl$1198 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M21 9H3"></path><path d="M21 15H3">`),
  _tmpl$1199 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M21 7.5H3"></path><path d="M21 12H3"></path><path d="M21 16.5H3">`),
  _tmpl$1200 = /*#__PURE__*/_$template(`<svg><path d="M4 11a9 9 0 0 1 9 9"></path><path d="M4 4a16 16 0 0 1 16 16"></path><circle cx=5 cy=19 r=1>`),
  _tmpl$1201 = /*#__PURE__*/_$template(`<svg><path d="M12 15v-3.014"></path><path d="M16 15v-3.014"></path><path d="M20 6H4"></path><path d="M20 8V4"></path><path d="M4 8V4"></path><path d="M8 15v-3.014"></path><rect x=3 y=12 width=18 height=7 rx=1>`),
  _tmpl$1202 = /*#__PURE__*/_$template(`<svg><path d="M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z"></path><path d="m14.5 12.5 2-2"></path><path d="m11.5 9.5 2-2"></path><path d="m8.5 6.5 2-2"></path><path d="m17.5 15.5 2-2">`),
  _tmpl$1203 = /*#__PURE__*/_$template(`<svg><path d="M6 11h8a4 4 0 0 0 0-8H9v18"></path><path d="M6 15h8">`),
  _tmpl$1204 = /*#__PURE__*/_$template(`<svg><path d="M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z"></path><path d="M21 14 10 2 3 14h18Z"></path><path d="M10 2v16">`),
  _tmpl$1205 = /*#__PURE__*/_$template(`<svg><path d="M7 21h10"></path><path d="M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z"></path><path d="M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1"></path><path d="m13 12 4-4"></path><path d="M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2">`),
  _tmpl$1206 = /*#__PURE__*/_$template(`<svg><path d="m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777"></path><path d="M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25"></path><path d="M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9"></path><path d="m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2"></path><rect width=20 height=4 x=2 y=11 rx=1>`),
  _tmpl$1207 = /*#__PURE__*/_$template(`<svg><path d="M4 10a7.31 7.31 0 0 0 10 10Z"></path><path d="m9 15 3-3"></path><path d="M17 13a6 6 0 0 0-6-6"></path><path d="M21 13A10 10 0 0 0 11 3">`),
  _tmpl$1208 = /*#__PURE__*/_$template(`<svg><path d="m13.5 6.5-3.148-3.148a1.205 1.205 0 0 0-1.704 0L6.352 5.648a1.205 1.205 0 0 0 0 1.704L9.5 10.5"></path><path d="M16.5 7.5 19 5"></path><path d="m17.5 10.5 3.148 3.148a1.205 1.205 0 0 1 0 1.704l-2.296 2.296a1.205 1.205 0 0 1-1.704 0L13.5 14.5"></path><path d="M9 21a6 6 0 0 0-6-6"></path><path d="M9.352 10.648a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l4.296-4.296a1.205 1.205 0 0 0 0-1.704l-2.296-2.296a1.205 1.205 0 0 0-1.704 0z">`),
  _tmpl$1209 = /*#__PURE__*/_$template(`<svg><path d="m20 19.5-5.5 1.2"></path><path d="M14.5 4v11.22a1 1 0 0 0 1.242.97L20 15.2"></path><path d="m2.978 19.351 5.549-1.363A2 2 0 0 0 10 16V2"></path><path d="M20 10 4 13.5">`),
  _tmpl$1210 = /*#__PURE__*/_$template(`<svg><path d="M10 2v3a1 1 0 0 0 1 1h5"></path><path d="M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6"></path><path d="M18 22H4a2 2 0 0 1-2-2V6"></path><path d="M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z">`),
  _tmpl$1211 = /*#__PURE__*/_$template(`<svg><path d="M13 13H8a1 1 0 0 0-1 1v7"></path><path d="M14 8h1"></path><path d="M17 21v-4"></path><path d="m2 2 20 20"></path><path d="M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41"></path><path d="M29.5 11.5s5 5 4 5"></path><path d="M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15">`),
  _tmpl$1212 = /*#__PURE__*/_$template(`<svg><path d="M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z"></path><path d="M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7"></path><path d="M7 3v4a1 1 0 0 0 1 1h7">`),
  _tmpl$1213 = /*#__PURE__*/_$template(`<svg><path d="M5 7v11a1 1 0 0 0 1 1h11"></path><path d="M5.293 18.707 11 13"></path><circle cx=19 cy=19 r=2></circle><circle cx=5 cy=5 r=2>`),
  _tmpl$1214 = /*#__PURE__*/_$template(`<svg><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"></path><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"></path><path d="M7 21h10"></path><path d="M12 3v18"></path><path d="M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2">`),
  _tmpl$1215 = /*#__PURE__*/_$template(`<svg><path d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M14 15H9v-5"></path><path d="M16 3h5v5"></path><path d="M21 3 9 15">`),
  _tmpl$1216 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><path d="M8 7v10"></path><path d="M12 7v10"></path><path d="M17 7v10">`),
  _tmpl$1217 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><circle cx=12 cy=12 r=1></circle><path d="M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0">`),
  _tmpl$1218 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><path d="M9 9h.01"></path><path d="M15 9h.01">`),
  _tmpl$1219 = /*#__PURE__*/_$template(`<svg><path d="M11.246 16.657a1 1 0 0 0 1.508 0l3.57-4.101A2.75 2.75 0 1 0 12 9.168a2.75 2.75 0 1 0-4.324 3.388z"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2">`),
  _tmpl$1220 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><path d="M7 12h10">`),
  _tmpl$1221 = /*#__PURE__*/_$template(`<svg><path d="M17 12v4a1 1 0 0 1-1 1h-4"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M17 8V7"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M7 17h.01"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><rect x=7 y=7 width=5 height=5 rx=1>`),
  _tmpl$1222 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><circle cx=12 cy=12 r=3></circle><path d="m16 16-1.9-1.9">`),
  _tmpl$1223 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2"></path><path d="M7 8h8"></path><path d="M7 12h10"></path><path d="M7 16h6">`),
  _tmpl$1224 = /*#__PURE__*/_$template(`<svg><path d="M3 7V5a2 2 0 0 1 2-2h2"></path><path d="M17 3h2a2 2 0 0 1 2 2v2"></path><path d="M21 17v2a2 2 0 0 1-2 2h-2"></path><path d="M7 21H5a2 2 0 0 1-2-2v-2">`),
  _tmpl$1225 = /*#__PURE__*/_$template(`<svg><path d="M14 22v-4a2 2 0 1 0-4 0v4"></path><path d="m18 10 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7.382a1 1 0 0 1 .553-.894L6 10"></path><path d="M18 5v17"></path><path d="m4 6 7.106-3.553a2 2 0 0 1 1.788 0L20 6"></path><path d="M6 5v17"></path><circle cx=12 cy=9 r=2>`),
  _tmpl$1226 = /*#__PURE__*/_$template(`<svg><path d="M5.42 9.42 8 12"></path><circle cx=4 cy=8 r=2></circle><path d="m14 6-8.58 8.58"></path><circle cx=4 cy=16 r=2></circle><path d="M10.8 14.8 14 18"></path><path d="M16 12h-2"></path><path d="M22 12h-2">`),
  _tmpl$1227 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=6 r=3></circle><path d="M8.12 8.12 12 12"></path><path d="M20 4 8.12 15.88"></path><circle cx=6 cy=18 r=3></circle><path d="M14.8 14.8 20 20">`),
  _tmpl$1228 = /*#__PURE__*/_$template(`<svg><path d="M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"></path><path d="M8 21h8"></path><path d="M12 17v4"></path><path d="m22 3-5 5"></path><path d="m17 3 5 5">`),
  _tmpl$1229 = /*#__PURE__*/_$template(`<svg><path d="M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"></path><path d="M8 21h8"></path><path d="M12 17v4"></path><path d="m17 8 5-5"></path><path d="M17 3h5v5">`),
  _tmpl$1230 = /*#__PURE__*/_$template(`<svg><path d="M15 12h-5"></path><path d="M15 8h-5"></path><path d="M19 17V5a2 2 0 0 0-2-2H4"></path><path d="M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3">`),
  _tmpl$1231 = /*#__PURE__*/_$template(`<svg><path d="M19 17V5a2 2 0 0 0-2-2H4"></path><path d="M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3">`),
  _tmpl$1232 = /*#__PURE__*/_$template(`<svg><path d="m8 11 2 2 4-4"></path><circle cx=11 cy=11 r=8></circle><path d="m21 21-4.3-4.3">`),
  _tmpl$1233 = /*#__PURE__*/_$template(`<svg><path d="m13 13.5 2-2.5-2-2.5"></path><path d="m21 21-4.3-4.3"></path><path d="M9 8.5 7 11l2 2.5"></path><circle cx=11 cy=11 r=8>`),
  _tmpl$1234 = /*#__PURE__*/_$template(`<svg><path d="m13.5 8.5-5 5"></path><circle cx=11 cy=11 r=8></circle><path d="m21 21-4.3-4.3">`),
  _tmpl$1235 = /*#__PURE__*/_$template(`<svg><path d="m13.5 8.5-5 5"></path><path d="m8.5 8.5 5 5"></path><circle cx=11 cy=11 r=8></circle><path d="m21 21-4.3-4.3">`),
  _tmpl$1236 = /*#__PURE__*/_$template(`<svg><path d="m21 21-4.34-4.34"></path><circle cx=11 cy=11 r=8>`),
  _tmpl$1237 = /*#__PURE__*/_$template(`<svg><path d="M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0"></path><path d="M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0">`),
  _tmpl$1238 = /*#__PURE__*/_$template(`<svg><path d="M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"></path><path d="M6 12h16">`),
  _tmpl$1239 = /*#__PURE__*/_$template(`<svg><rect x=14 y=14 width=8 height=8 rx=2></rect><rect x=2 y=2 width=8 height=8 rx=2></rect><path d="M7 14v1a2 2 0 0 0 2 2h1"></path><path d="M14 7h1a2 2 0 0 1 2 2v1">`),
  _tmpl$1240 = /*#__PURE__*/_$template(`<svg><path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"></path><path d="m21.854 2.147-10.94 10.939">`),
  _tmpl$1241 = /*#__PURE__*/_$template(`<svg><path d="m16 16-4 4-4-4"></path><path d="M3 12h18"></path><path d="m8 8 4-4 4 4">`),
  _tmpl$1242 = /*#__PURE__*/_$template(`<svg><path d="M12 3v18"></path><path d="m16 16 4-4-4-4"></path><path d="m8 8-4 4 4 4">`),
  _tmpl$1243 = /*#__PURE__*/_$template(`<svg><path d="m10.852 14.772-.383.923"></path><path d="M13.148 14.772a3 3 0 1 0-2.296-5.544l-.383-.923"></path><path d="m13.148 9.228.383-.923"></path><path d="m13.53 15.696-.382-.924a3 3 0 1 1-2.296-5.544"></path><path d="m14.772 10.852.923-.383"></path><path d="m14.772 13.148.923.383"></path><path d="M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5"></path><path d="M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5"></path><path d="M6 18h.01"></path><path d="M6 6h.01"></path><path d="m9.228 10.852-.923-.383"></path><path d="m9.228 13.148-.923.383">`),
  _tmpl$1244 = /*#__PURE__*/_$template(`<svg><path d="M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2"></path><path d="M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2"></path><path d="M6 6h.01"></path><path d="M6 18h.01"></path><path d="m13 6-4 6h6l-4 6">`),
  _tmpl$1245 = /*#__PURE__*/_$template(`<svg><path d="M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5"></path><path d="M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z"></path><path d="M22 17v-1a2 2 0 0 0-2-2h-1"></path><path d="M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z"></path><path d="M6 18h.01"></path><path d="m2 2 20 20">`),
  _tmpl$1246 = /*#__PURE__*/_$template(`<svg><rect width=20 height=8 x=2 y=2 rx=2 ry=2></rect><rect width=20 height=8 x=2 y=14 rx=2 ry=2></rect><line x1=6 x2=6.01 y1=6 y2=6></line><line x1=6 x2=6.01 y1=18 y2=18>`),
  _tmpl$1247 = /*#__PURE__*/_$template(`<svg><path d="M14 17H5"></path><path d="M19 7h-9"></path><circle cx=17 cy=17 r=3></circle><circle cx=7 cy=7 r=3>`),
  _tmpl$1248 = /*#__PURE__*/_$template(`<svg><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path><circle cx=12 cy=12 r=3>`),
  _tmpl$1249 = /*#__PURE__*/_$template(`<svg><path d="M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z"></path><rect x=3 y=14 width=7 height=7 rx=1></rect><circle cx=17.5 cy=17.5 r=3.5>`),
  _tmpl$1250 = /*#__PURE__*/_$template(`<svg><circle cx=18 cy=5 r=3></circle><circle cx=6 cy=12 r=3></circle><circle cx=18 cy=19 r=3></circle><line x1=8.59 x2=15.42 y1=13.51 y2=17.49></line><line x1=15.41 x2=8.59 y1=6.51 y2=10.49>`),
  _tmpl$1251 = /*#__PURE__*/_$template(`<svg><path d="M12 2v13"></path><path d="m16 6-4-4-4 4"></path><path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8">`),
  _tmpl$1252 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><line x1=3 x2=21 y1=9 y2=9></line><line x1=3 x2=21 y1=15 y2=15></line><line x1=9 x2=9 y1=9 y2=21></line><line x1=15 x2=15 y1=9 y2=21>`),
  _tmpl$1253 = /*#__PURE__*/_$template(`<svg><path d="M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44">`),
  _tmpl$1254 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M12 8v4"></path><path d="M12 16h.01">`),
  _tmpl$1255 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="m4.243 5.21 14.39 12.472">`),
  _tmpl$1256 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="m9 12 2 2 4-4">`),
  _tmpl$1257 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M8 12h.01"></path><path d="M12 12h.01"></path><path d="M16 12h.01">`),
  _tmpl$1258 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M12 22V2">`),
  _tmpl$1259 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M9 12h6">`),
  _tmpl$1260 = /*#__PURE__*/_$template(`<svg><path d="m2 2 20 20"></path><path d="M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71"></path><path d="M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264">`),
  _tmpl$1261 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M9 12h6"></path><path d="M12 9v6">`),
  _tmpl$1262 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3"></path><path d="M12 17h.01">`),
  _tmpl$1263 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="M6.376 18.91a6 6 0 0 1 11.249.003"></path><circle cx=12 cy=11 r=4>`),
  _tmpl$1264 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="m14.5 9.5-5 5"></path><path d="m9.5 9.5 5 5">`),
  _tmpl$1265 = /*#__PURE__*/_$template(`<svg><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z">`),
  _tmpl$1266 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=8></circle><path d="M12 2v7.5"></path><path d="m19 5-5.23 5.23"></path><path d="M22 12h-7.5"></path><path d="m19 19-5.23-5.23"></path><path d="M12 14.5V22"></path><path d="M10.23 13.77 5 19"></path><path d="M9.5 12H2"></path><path d="M10.23 10.23 5 5"></path><circle cx=12 cy=12 r=2.5>`),
  _tmpl$1267 = /*#__PURE__*/_$template(`<svg><path d="M12 10.189V14"></path><path d="M12 2v3"></path><path d="M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6"></path><path d="M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76"></path><path d="M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1">`),
  _tmpl$1268 = /*#__PURE__*/_$template(`<svg><path d="M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z">`),
  _tmpl$1269 = /*#__PURE__*/_$template(`<svg><path d="M16 10a4 4 0 0 1-8 0"></path><path d="M3.103 6.034h17.794"></path><path d="M3.4 5.467a2 2 0 0 0-.4 1.2V20a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6.667a2 2 0 0 0-.4-1.2l-2-2.667A2 2 0 0 0 17 2H7a2 2 0 0 0-1.6.8z">`),
  _tmpl$1270 = /*#__PURE__*/_$template(`<svg><path d="m15 11-1 9"></path><path d="m19 11-4-7"></path><path d="M2 11h20"></path><path d="m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4"></path><path d="M4.5 15.5h15"></path><path d="m5 11 4-7"></path><path d="m9 11 1 9">`),
  _tmpl$1271 = /*#__PURE__*/_$template(`<svg><circle cx=8 cy=21 r=1></circle><circle cx=19 cy=21 r=1></circle><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12">`),
  _tmpl$1272 = /*#__PURE__*/_$template(`<svg><path d="M2 22v-5l5-5 5 5-5 5z"></path><path d="M9.5 14.5 16 8"></path><path d="m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2">`),
  _tmpl$1273 = /*#__PURE__*/_$template(`<svg><path d="m4 4 2.5 2.5"></path><path d="M13.5 6.5a4.95 4.95 0 0 0-7 7"></path><path d="M15 5 5 15"></path><path d="M14 17v.01"></path><path d="M10 16v.01"></path><path d="M13 13v.01"></path><path d="M16 10v.01"></path><path d="M11 20v.01"></path><path d="M17 14v.01"></path><path d="M20 11v.01">`),
  _tmpl$1274 = /*#__PURE__*/_$template(`<svg><path d="M10 22v-5"></path><path d="M14 19v-2"></path><path d="M14 2v4a2 2 0 0 0 2 2h4"></path><path d="M18 20v-3"></path><path d="M2 13h20"></path><path d="M20 13V7l-5-5H6a2 2 0 0 0-2 2v9"></path><path d="M6 20v-3">`),
  _tmpl$1275 = /*#__PURE__*/_$template(`<svg><path d="M11 12h.01"></path><path d="M13 22c.5-.5 1.12-1 2.5-1-1.38 0-2-.5-2.5-1"></path><path d="M14 2a3.28 3.28 0 0 1-3.227 1.798l-6.17-.561A2.387 2.387 0 1 0 4.387 8H15.5a1 1 0 0 1 0 13 1 1 0 0 0 0-5H12a7 7 0 0 1-7-7V8"></path><path d="M14 8a8.5 8.5 0 0 1 0 8"></path><path d="M16 16c2 0 4.5-4 4-6">`),
  _tmpl$1276 = /*#__PURE__*/_$template(`<svg><path d="m15 15 6 6m-6-6v4.8m0-4.8h4.8"></path><path d="M9 19.8V15m0 0H4.2M9 15l-6 6"></path><path d="M15 4.2V9m0 0h4.8M15 9l6-6"></path><path d="M9 4.2V9m0 0H4.2M9 9 3 3">`),
  _tmpl$1277 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-5.172a2 2 0 0 0-.586-1.414L9.5 13.5"></path><path d="M14.5 14.5 12 17"></path><path d="M17 8.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0z">`),
  _tmpl$1278 = /*#__PURE__*/_$template(`<svg><path d="m18 14 4 4-4 4"></path><path d="m18 2 4 4-4 4"></path><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"></path><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"></path><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45">`),
  _tmpl$1279 = /*#__PURE__*/_$template(`<svg><path d="M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2">`),
  _tmpl$1280 = /*#__PURE__*/_$template(`<svg><path d="M2 20h.01"></path><path d="M7 20v-4"></path><path d="M12 20v-8"></path><path d="M17 20V8">`),
  _tmpl$1281 = /*#__PURE__*/_$template(`<svg><path d="M2 20h.01"></path><path d="M7 20v-4">`),
  _tmpl$1282 = /*#__PURE__*/_$template(`<svg><path d="M2 20h.01"></path><path d="M7 20v-4"></path><path d="M12 20v-8">`),
  _tmpl$1283 = /*#__PURE__*/_$template(`<svg><path d="M2 20h.01">`),
  _tmpl$1284 = /*#__PURE__*/_$template(`<svg><path d="M2 20h.01"></path><path d="M7 20v-4"></path><path d="M12 20v-8"></path><path d="M17 20V8"></path><path d="M22 4v16">`),
  _tmpl$1285 = /*#__PURE__*/_$template(`<svg><path d="m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284"></path><path d="M3 21h18">`),
  _tmpl$1286 = /*#__PURE__*/_$template(`<svg><path d="M10 9H4L2 7l2-2h6"></path><path d="M14 5h6l2 2-2 2h-6"></path><path d="M10 22V4a2 2 0 1 1 4 0v18"></path><path d="M8 22h8">`),
  _tmpl$1287 = /*#__PURE__*/_$template(`<svg><path d="M12 13v8"></path><path d="M12 3v3"></path><path d="M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z">`),
  _tmpl$1288 = /*#__PURE__*/_$template(`<svg><path d="M7 18v-6a5 5 0 1 1 10 0v6"></path><path d="M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z"></path><path d="M21 12h1"></path><path d="M18.5 4.5 18 5"></path><path d="M2 12h1"></path><path d="M12 2v1"></path><path d="m4.929 4.929.707.707"></path><path d="M12 12v6">`),
  _tmpl$1289 = /*#__PURE__*/_$template(`<svg><polygon points="19 20 9 12 19 4 19 20"></polygon><line x1=5 x2=5 y1=19 y2=5>`),
  _tmpl$1290 = /*#__PURE__*/_$template(`<svg><polygon points="5 4 15 12 5 20 5 4"></polygon><line x1=19 x2=19 y1=5 y2=19>`),
  _tmpl$1291 = /*#__PURE__*/_$template(`<svg><path d="m12.5 17-.5-1-.5 1h1z"></path><path d="M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z"></path><circle cx=15 cy=12 r=1></circle><circle cx=9 cy=12 r=1>`),
  _tmpl$1292 = /*#__PURE__*/_$template(`<svg><rect width=3 height=8 x=13 y=2 rx=1.5></rect><path d="M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5"></path><rect width=3 height=8 x=8 y=14 rx=1.5></rect><path d="M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5"></path><rect width=8 height=3 x=14 y=13 rx=1.5></rect><path d="M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5"></path><rect width=8 height=3 x=2 y=8 rx=1.5></rect><path d="M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5">`),
  _tmpl$1293 = /*#__PURE__*/_$template(`<svg><path d="M22 2 2 22">`),
  _tmpl$1294 = /*#__PURE__*/_$template(`<svg><path d="M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14">`),
  _tmpl$1295 = /*#__PURE__*/_$template(`<svg><line x1=21 x2=14 y1=4 y2=4></line><line x1=10 x2=3 y1=4 y2=4></line><line x1=21 x2=12 y1=12 y2=12></line><line x1=8 x2=3 y1=12 y2=12></line><line x1=21 x2=16 y1=20 y2=20></line><line x1=12 x2=3 y1=20 y2=20></line><line x1=14 x2=14 y1=2 y2=6></line><line x1=8 x2=8 y1=10 y2=14></line><line x1=16 x2=16 y1=18 y2=22>`),
  _tmpl$1296 = /*#__PURE__*/_$template(`<svg><line x1=4 x2=4 y1=21 y2=14></line><line x1=4 x2=4 y1=10 y2=3></line><line x1=12 x2=12 y1=21 y2=12></line><line x1=12 x2=12 y1=8 y2=3></line><line x1=20 x2=20 y1=21 y2=16></line><line x1=20 x2=20 y1=12 y2=3></line><line x1=2 x2=6 y1=14 y2=14></line><line x1=10 x2=14 y1=8 y2=8></line><line x1=18 x2=22 y1=16 y2=16>`),
  _tmpl$1297 = /*#__PURE__*/_$template(`<svg><rect width=14 height=20 x=5 y=2 rx=2 ry=2></rect><path d="M12.667 8 10 12h4l-2.667 4">`),
  _tmpl$1298 = /*#__PURE__*/_$template(`<svg><rect width=7 height=12 x=2 y=6 rx=1></rect><path d="M13 8.32a7.43 7.43 0 0 1 0 7.36"></path><path d="M16.46 6.21a11.76 11.76 0 0 1 0 11.58"></path><path d="M19.91 4.1a15.91 15.91 0 0 1 .01 15.8">`),
  _tmpl$1299 = /*#__PURE__*/_$template(`<svg><rect width=14 height=20 x=5 y=2 rx=2 ry=2></rect><path d="M12 18h.01">`),
  _tmpl$1300 = /*#__PURE__*/_$template(`<svg><path d="M22 11v1a10 10 0 1 1-9-10"></path><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1=9 x2=9.01 y1=9 y2=9></line><line x1=15 x2=15.01 y1=9 y2=9></line><path d="M16 5h6"></path><path d="M19 2v6">`),
  _tmpl$1301 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1=9 x2=9.01 y1=9 y2=9></line><line x1=15 x2=15.01 y1=9 y2=9>`),
  _tmpl$1302 = /*#__PURE__*/_$template(`<svg><path d="M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0"></path><circle cx=10 cy=13 r=8></circle><path d="M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6"></path><path d="M18 3 19.1 5.2"></path><path d="M22 3 20.9 5.2">`),
  _tmpl$1303 = /*#__PURE__*/_$template(`<svg><path d="m10 20-1.25-2.5L6 18"></path><path d="M10 4 8.75 6.5 6 6"></path><path d="m14 20 1.25-2.5L18 18"></path><path d="m14 4 1.25 2.5L18 6"></path><path d="m17 21-3-6h-4"></path><path d="m17 3-3 6 1.5 3"></path><path d="M2 12h6.5L10 9"></path><path d="m20 10-1.5 2 1.5 2"></path><path d="M22 12h-6.5L14 15"></path><path d="m4 10 1.5 2L4 14"></path><path d="m7 21 3-6-1.5-3"></path><path d="m7 3 3 6h4">`),
  _tmpl$1304 = /*#__PURE__*/_$template(`<svg><path d="M10.5 2v4"></path><path d="M14 2H7a2 2 0 0 0-2 2"></path><path d="M19.29 14.76A6.67 6.67 0 0 1 17 11a6.6 6.6 0 0 1-2.29 3.76c-1.15.92-1.71 2.04-1.71 3.19 0 2.22 1.8 4.05 4 4.05s4-1.83 4-4.05c0-1.16-.57-2.26-1.71-3.19"></path><path d="M9.607 21H6a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h7V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3">`),
  _tmpl$1305 = /*#__PURE__*/_$template(`<svg><path d="M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3"></path><path d="M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"></path><path d="M4 18v2"></path><path d="M20 18v2"></path><path d="M12 4v9">`),
  _tmpl$1306 = /*#__PURE__*/_$template(`<svg><path d="M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z"></path><path d="M7 21h10"></path><path d="M19.5 12 22 6"></path><path d="M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62"></path><path d="M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62"></path><path d="M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62">`),
  _tmpl$1307 = /*#__PURE__*/_$template(`<svg><path d="M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1">`),
  _tmpl$1308 = /*#__PURE__*/_$template(`<svg><path d="M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z"></path><path d="M12 18v4">`),
  _tmpl$1309 = /*#__PURE__*/_$template(`<svg><path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z">`),
  _tmpl$1310 = /*#__PURE__*/_$template(`<svg><path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"></path><path d="M20 3v4"></path><path d="M22 5h-4"></path><path d="M4 17v2"></path><path d="M5 18H3">`),
  _tmpl$1311 = /*#__PURE__*/_$template(`<svg><rect width=16 height=20 x=4 y=2 rx=2></rect><path d="M12 6h.01"></path><circle cx=12 cy=14 r=4></circle><path d="M12 14h.01">`),
  _tmpl$1312 = /*#__PURE__*/_$template(`<svg><path d="M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20"></path><path d="M19.8 17.8a7.5 7.5 0 0 0 .003-10.603"></path><path d="M17 15a3.5 3.5 0 0 0-.025-4.975">`),
  _tmpl$1313 = /*#__PURE__*/_$template(`<svg><path d="m6 16 6-12 6 12"></path><path d="M8 12h8"></path><path d="M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1">`),
  _tmpl$1314 = /*#__PURE__*/_$template(`<svg><path d="m6 16 6-12 6 12"></path><path d="M8 12h8"></path><path d="m16 20 2 2 4-4">`),
  _tmpl$1315 = /*#__PURE__*/_$template(`<svg><path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"></path><path d="M5 17A12 12 0 0 1 17 5"></path><circle cx=19 cy=5 r=2></circle><circle cx=5 cy=19 r=2>`),
  _tmpl$1316 = /*#__PURE__*/_$template(`<svg><circle cx=19 cy=5 r=2></circle><circle cx=5 cy=19 r=2></circle><path d="M5 17A12 12 0 0 1 17 5">`),
  _tmpl$1317 = /*#__PURE__*/_$template(`<svg><path d="M16 3h5v5"></path><path d="M8 3H3v5"></path><path d="M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3"></path><path d="m15 9 6-6">`),
  _tmpl$1318 = /*#__PURE__*/_$template(`<svg><path d="M17 13.44 4.442 17.082A2 2 0 0 0 4.982 21H19a2 2 0 0 0 .558-3.921l-1.115-.32A2 2 0 0 1 17 14.837V7.66"></path><path d="m7 10.56 12.558-3.642A2 2 0 0 0 19.018 3H5a2 2 0 0 0-.558 3.921l1.115.32A2 2 0 0 1 7 9.163v7.178">`),
  _tmpl$1319 = /*#__PURE__*/_$template(`<svg><path d="M3 3h.01"></path><path d="M7 5h.01"></path><path d="M11 7h.01"></path><path d="M3 7h.01"></path><path d="M7 9h.01"></path><path d="M3 11h.01"></path><rect width=4 height=4 x=15 y=5></rect><path d="m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2"></path><path d="m13 14 8-2"></path><path d="m13 19 8-2">`),
  _tmpl$1320 = /*#__PURE__*/_$template(`<svg><path d="M7 20h10"></path><path d="M10 20c5.5-2.5.8-6.4 3-10"></path><path d="M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z"></path><path d="M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z">`),
  _tmpl$1321 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M17 12h-2l-2 5-2-10-2 5H7">`),
  _tmpl$1322 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m16 8-8 8"></path><path d="M16 16H8V8">`),
  _tmpl$1323 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m8 8 8 8"></path><path d="M16 8v8H8">`),
  _tmpl$1324 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M12 8v8"></path><path d="m8 12 4 4 4-4">`),
  _tmpl$1325 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m12 8-4 4 4 4"></path><path d="M16 12H8">`),
  _tmpl$1326 = /*#__PURE__*/_$template(`<svg><path d="M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6"></path><path d="m3 21 9-9"></path><path d="M9 21H3v-6">`),
  _tmpl$1327 = /*#__PURE__*/_$template(`<svg><path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"></path><path d="m21 21-9-9"></path><path d="M21 15v6h-6">`),
  _tmpl$1328 = /*#__PURE__*/_$template(`<svg><path d="M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6"></path><path d="m3 3 9 9"></path><path d="M3 9V3h6">`),
  _tmpl$1329 = /*#__PURE__*/_$template(`<svg><path d="M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6"></path><path d="m21 3-9 9"></path><path d="M15 3h6v6">`),
  _tmpl$1330 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 12h8"></path><path d="m12 16 4-4-4-4">`),
  _tmpl$1331 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 16V8h8"></path><path d="M16 16 8 8">`),
  _tmpl$1332 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 8h8v8"></path><path d="m8 16 8-8">`),
  _tmpl$1333 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m16 12-4-4-4 4"></path><path d="M12 16V8">`),
  _tmpl$1334 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M12 8v8"></path><path d="m8.5 14 7-4"></path><path d="m8.5 10 7 4">`),
  _tmpl$1335 = /*#__PURE__*/_$template(`<svg><path d="M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2"></path><path d="M10 22H8"></path><path d="M16 22h-2"></path><circle cx=8 cy=8 r=2></circle><path d="M9.414 9.414 12 12"></path><path d="M14.8 14.8 18 18"></path><circle cx=8 cy=16 r=2></circle><path d="m18 6-8.586 8.586">`),
  _tmpl$1336 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 8h7"></path><path d="M8 12h6"></path><path d="M11 16h5">`),
  _tmpl$1337 = /*#__PURE__*/_$template(`<svg><path d="M21 10.656V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.344"></path><path d="m9 11 3 3L22 4">`),
  _tmpl$1338 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m9 12 2 2 4-4">`),
  _tmpl$1339 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m16 10-4 4-4-4">`),
  _tmpl$1340 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m14 16-4-4 4-4">`),
  _tmpl$1341 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m10 8 4 4-4 4">`),
  _tmpl$1342 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m8 14 4-4 4 4">`),
  _tmpl$1343 = /*#__PURE__*/_$template(`<svg><path d="m10 9-3 3 3 3"></path><path d="m14 15 3-3-3-3"></path><rect x=3 y=3 width=18 height=18 rx=2>`),
  _tmpl$1344 = /*#__PURE__*/_$template(`<svg><path d="M10 9.5 8 12l2 2.5"></path><path d="M14 21h1"></path><path d="m14 9.5 2 2.5-2 2.5"></path><path d="M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"></path><path d="M9 21h1">`),
  _tmpl$1345 = /*#__PURE__*/_$template(`<svg><path d="M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"></path><path d="M9 21h1"></path><path d="M14 21h1">`),
  _tmpl$1346 = /*#__PURE__*/_$template(`<svg><path d="M8 7v7"></path><path d="M12 7v4"></path><path d="M16 7v9"></path><path d="M5 3a2 2 0 0 0-2 2"></path><path d="M9 3h1"></path><path d="M14 3h1"></path><path d="M19 3a2 2 0 0 1 2 2"></path><path d="M21 9v1"></path><path d="M21 14v1"></path><path d="M21 19a2 2 0 0 1-2 2"></path><path d="M14 21h1"></path><path d="M9 21h1"></path><path d="M5 21a2 2 0 0 1-2-2"></path><path d="M3 14v1"></path><path d="M3 9v1">`),
  _tmpl$1347 = /*#__PURE__*/_$template(`<svg><path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"></path><path d="M5 3a2 2 0 0 0-2 2"></path><path d="M19 3a2 2 0 0 1 2 2"></path><path d="M5 21a2 2 0 0 1-2-2"></path><path d="M9 3h1"></path><path d="M9 21h2"></path><path d="M14 3h1"></path><path d="M3 9v1"></path><path d="M21 9v2"></path><path d="M3 14v1">`),
  _tmpl$1348 = /*#__PURE__*/_$template(`<svg><path d="M14 21h1"></path><path d="M21 14v1"></path><path d="M21 19a2 2 0 0 1-2 2"></path><path d="M21 9v1"></path><path d="M3 14v1"></path><path d="M3 5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2"></path><path d="M3 9v1"></path><path d="M5 21a2 2 0 0 1-2-2"></path><path d="M9 21h1">`),
  _tmpl$1349 = /*#__PURE__*/_$template(`<svg><path d="M5 3a2 2 0 0 0-2 2"></path><path d="M19 3a2 2 0 0 1 2 2"></path><path d="M21 19a2 2 0 0 1-2 2"></path><path d="M5 21a2 2 0 0 1-2-2"></path><path d="M9 3h1"></path><path d="M9 21h1"></path><path d="M14 3h1"></path><path d="M14 21h1"></path><path d="M3 9v1"></path><path d="M21 9v1"></path><path d="M3 14v1"></path><path d="M21 14v1">`),
  _tmpl$1350 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><line x1=8 x2=16 y1=12 y2=12></line><line x1=12 x2=12 y1=16 y2=16></line><line x1=12 x2=12 y1=8 y2=8>`),
  _tmpl$1351 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><circle cx=12 cy=12 r=1>`),
  _tmpl$1352 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 10h10"></path><path d="M7 14h10">`),
  _tmpl$1353 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3"></path><path d="M9 11.2h5.7">`),
  _tmpl$1354 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 7v7"></path><path d="M12 7v4"></path><path d="M16 7v9">`),
  _tmpl$1355 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 7v10"></path><path d="M11 7v10"></path><path d="m15 7 2 10">`),
  _tmpl$1356 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 16V8l4 4 4-4v8">`),
  _tmpl$1357 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 8h10"></path><path d="M7 12h10"></path><path d="M7 16h10">`),
  _tmpl$1358 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 12h8">`),
  _tmpl$1359 = /*#__PURE__*/_$template(`<svg><path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"></path><path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6">`),
  _tmpl$1360 = /*#__PURE__*/_$template(`<svg><path d="M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41"></path><path d="M3 8.7V19a2 2 0 0 0 2 2h10.3"></path><path d="m2 2 20 20"></path><path d="M13 13a3 3 0 1 0 0-6H9v2"></path><path d="M9 17v-2.3">`),
  _tmpl$1361 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M9 17V7h4a3 3 0 0 1 0 6H9">`),
  _tmpl$1362 = /*#__PURE__*/_$template(`<svg><path d="M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z">`),
  _tmpl$1363 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m15 9-6 6"></path><path d="M9 9h.01"></path><path d="M15 15h.01">`),
  _tmpl$1364 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M7 7h10"></path><path d="M10 7v10"></path><path d="M16 17a2 2 0 0 1-2-2V7">`),
  _tmpl$1365 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M12 12H9.5a2.5 2.5 0 0 1 0-5H17"></path><path d="M12 7v10"></path><path d="M16 7v10">`),
  _tmpl$1366 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="m9 8 6 4-6 4Z">`),
  _tmpl$1367 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M8 12h8"></path><path d="M12 8v8">`),
  _tmpl$1368 = /*#__PURE__*/_$template(`<svg><path d="M12 7v4"></path><path d="M7.998 9.003a5 5 0 1 0 8-.005"></path><rect x=3 y=3 width=18 height=18 rx=2>`),
  _tmpl$1369 = /*#__PURE__*/_$template(`<svg><path d="M7 12h2l2 5 2-10h4"></path><rect x=3 y=3 width=18 height=18 rx=2>`),
  _tmpl$1370 = /*#__PURE__*/_$template(`<svg><path d="M21 11a8 8 0 0 0-8-8"></path><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4">`),
  _tmpl$1371 = /*#__PURE__*/_$template(`<svg><rect width=20 height=20 x=2 y=2 rx=2></rect><circle cx=8 cy=8 r=2></circle><path d="M9.414 9.414 12 12"></path><path d="M14.8 14.8 18 18"></path><circle cx=8 cy=16 r=2></circle><path d="m18 6-8.586 8.586">`),
  _tmpl$1372 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M16 8.9V7H8l4 5-4 5h8v-1.9">`),
  _tmpl$1373 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><line x1=9 x2=15 y1=15 y2=9>`),
  _tmpl$1374 = /*#__PURE__*/_$template(`<svg><path d="M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3"></path><path d="M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3"></path><line x1=12 x2=12 y1=4 y2=20>`),
  _tmpl$1375 = /*#__PURE__*/_$template(`<svg><path d="M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3"></path><path d="M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3"></path><line x1=4 x2=20 y1=12 y2=12>`),
  _tmpl$1376 = /*#__PURE__*/_$template(`<svg><rect x=3 y=3 width=18 height=18 rx=2></rect><rect x=8 y=8 width=8 height=8 rx=1>`),
  _tmpl$1377 = /*#__PURE__*/_$template(`<svg><path d="M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"></path><path d="M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"></path><rect width=8 height=8 x=14 y=14 rx=2>`),
  _tmpl$1378 = /*#__PURE__*/_$template(`<svg><path d="m7 11 2-2-2-2"></path><path d="M11 13h4"></path><rect width=18 height=18 x=3 y=3 rx=2 ry=2>`),
  _tmpl$1379 = /*#__PURE__*/_$template(`<svg><path d="M18 21a6 6 0 0 0-12 0"></path><circle cx=12 cy=11 r=4></circle><rect width=18 height=18 x=3 y=3 rx=2>`),
  _tmpl$1380 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><circle cx=12 cy=10 r=3></circle><path d="M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2">`),
  _tmpl$1381 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><path d="m15 9-6 6"></path><path d="m9 9 6 6">`),
  _tmpl$1382 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2>`),
  _tmpl$1383 = /*#__PURE__*/_$template(`<svg><path d="M16 12v2a2 2 0 0 1-2 2H9a1 1 0 0 0-1 1v3a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2h0"></path><path d="M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 1-1 1h-5a2 2 0 0 0-2 2v2">`),
  _tmpl$1384 = /*#__PURE__*/_$template(`<svg><path d="M10 22a2 2 0 0 1-2-2"></path><path d="M14 2a2 2 0 0 1 2 2"></path><path d="M16 22h-2"></path><path d="M2 10V8"></path><path d="M2 4a2 2 0 0 1 2-2"></path><path d="M20 8a2 2 0 0 1 2 2"></path><path d="M22 14v2"></path><path d="M22 20a2 2 0 0 1-2 2"></path><path d="M4 16a2 2 0 0 1-2-2"></path><path d="M8 10a2 2 0 0 1 2-2h5a1 1 0 0 1 1 1v5a2 2 0 0 1-2 2H9a1 1 0 0 1-1-1z"></path><path d="M8 2h2">`),
  _tmpl$1385 = /*#__PURE__*/_$template(`<svg><path d="M10 22a2 2 0 0 1-2-2"></path><path d="M16 22h-2"></path><path d="M16 4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-5a2 2 0 0 1 2-2h5a1 1 0 0 0 1-1z"></path><path d="M20 8a2 2 0 0 1 2 2"></path><path d="M22 14v2"></path><path d="M22 20a2 2 0 0 1-2 2">`),
  _tmpl$1386 = /*#__PURE__*/_$template(`<svg><path d="M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 0 1 1h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H10a2 2 0 0 1-2-2v-3a1 1 0 0 0-1-1z">`),
  _tmpl$1387 = /*#__PURE__*/_$template(`<svg><path d="M13.77 3.043a34 34 0 0 0-3.54 0"></path><path d="M13.771 20.956a33 33 0 0 1-3.541.001"></path><path d="M20.18 17.74c-.51 1.15-1.29 1.93-2.439 2.44"></path><path d="M20.18 6.259c-.51-1.148-1.291-1.929-2.44-2.438"></path><path d="M20.957 10.23a33 33 0 0 1 0 3.54"></path><path d="M3.043 10.23a34 34 0 0 0 .001 3.541"></path><path d="M6.26 20.179c-1.15-.508-1.93-1.29-2.44-2.438"></path><path d="M6.26 3.82c-1.149.51-1.93 1.291-2.44 2.44">`),
  _tmpl$1388 = /*#__PURE__*/_$template(`<svg><path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9">`),
  _tmpl$1389 = /*#__PURE__*/_$template(`<svg><path d="M15.236 22a3 3 0 0 0-2.2-5"></path><path d="M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4"></path><path d="M18 13h.01"></path><path d="M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10">`),
  _tmpl$1390 = /*#__PURE__*/_$template(`<svg><path d="M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-6 0c0 2 1 2 1 3.5V13"></path><path d="M20 15.5a2.5 2.5 0 0 0-2.5-2.5h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1z"></path><path d="M5 22h14">`),
  _tmpl$1391 = /*#__PURE__*/_$template(`<svg><path d="M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2">`),
  _tmpl$1392 = /*#__PURE__*/_$template(`<svg><path d="M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43"></path><path d="M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1393 = /*#__PURE__*/_$template(`<svg><path d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z">`),
  _tmpl$1394 = /*#__PURE__*/_$template(`<svg><line x1=18 x2=18 y1=20 y2=4></line><polygon points="14,20 4,12 14,4">`),
  _tmpl$1395 = /*#__PURE__*/_$template(`<svg><line x1=6 x2=6 y1=4 y2=20></line><polygon points="10,4 20,12 10,20">`),
  _tmpl$1396 = /*#__PURE__*/_$template(`<svg><path d="M11 2v2"></path><path d="M5 2v2"></path><path d="M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1"></path><path d="M8 15a6 6 0 0 0 12 0v-3"></path><circle cx=20 cy=10 r=2>`),
  _tmpl$1397 = /*#__PURE__*/_$template(`<svg><path d="M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z"></path><path d="M14 3v4a2 2 0 0 0 2 2h4"></path><path d="M8 13h.01"></path><path d="M16 13h.01"></path><path d="M10 16s.8 1 2 1c1.3 0 2-1 2-1">`),
  _tmpl$1398 = /*#__PURE__*/_$template(`<svg><path d="M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z"></path><path d="M15 3v4a2 2 0 0 0 2 2h4">`),
  _tmpl$1399 = /*#__PURE__*/_$template(`<svg><path d="m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7"></path><path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path><path d="M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"></path><path d="M2 7h20"></path><path d="M22 7v3a2 2 0 0 1-2 2a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12a2 2 0 0 1-2-2V7">`),
  _tmpl$1400 = /*#__PURE__*/_$template(`<svg><rect width=20 height=6 x=2 y=4 rx=2></rect><rect width=20 height=6 x=2 y=14 rx=2>`),
  _tmpl$1401 = /*#__PURE__*/_$template(`<svg><rect width=6 height=20 x=4 y=2 rx=2></rect><rect width=6 height=20 x=14 y=2 rx=2>`),
  _tmpl$1402 = /*#__PURE__*/_$template(`<svg><path d="M16 4H9a3 3 0 0 0-2.83 4"></path><path d="M14 12a4 4 0 0 1 0 8H6"></path><line x1=4 x2=20 y1=12 y2=12>`),
  _tmpl$1403 = /*#__PURE__*/_$template(`<svg><path d="m4 5 8 8"></path><path d="m12 5-8 8"></path><path d="M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07">`),
  _tmpl$1404 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=4></circle><path d="M12 4h.01"></path><path d="M20 12h.01"></path><path d="M12 20h.01"></path><path d="M4 12h.01"></path><path d="M17.657 6.343h.01"></path><path d="M17.657 17.657h.01"></path><path d="M6.343 17.657h.01"></path><path d="M6.343 6.343h.01">`),
  _tmpl$1405 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=4></circle><path d="M12 3v1"></path><path d="M12 20v1"></path><path d="M3 12h1"></path><path d="M20 12h1"></path><path d="m18.364 5.636-.707.707"></path><path d="m6.343 17.657-.707.707"></path><path d="m5.636 5.636.707.707"></path><path d="m17.657 17.657.707.707">`),
  _tmpl$1406 = /*#__PURE__*/_$template(`<svg><path d="M12 2v2"></path><path d="M13 8.129A4 4 0 0 1 15.873 11"></path><path d="m19 5-1.256 1.256"></path><path d="M20 12h2"></path><path d="M9 8a5 5 0 1 0 7 7 7 7 0 1 1-7-7">`),
  _tmpl$1407 = /*#__PURE__*/_$template(`<svg><path d="M10 21v-1"></path><path d="M10 4V3"></path><path d="M10 9a3 3 0 0 0 0 6"></path><path d="m14 20 1.25-2.5L18 18"></path><path d="m14 4 1.25 2.5L18 6"></path><path d="m17 21-3-6 1.5-3H22"></path><path d="m17 3-3 6 1.5 3"></path><path d="M2 12h1"></path><path d="m20 10-1.5 2 1.5 2"></path><path d="m3.64 18.36.7-.7"></path><path d="m4.34 6.34-.7-.7">`),
  _tmpl$1408 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=4></circle><path d="M12 2v2"></path><path d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path><path d="m19.07 4.93-1.41 1.41">`),
  _tmpl$1409 = /*#__PURE__*/_$template(`<svg><path d="M12 2v8"></path><path d="m4.93 10.93 1.41 1.41"></path><path d="M2 18h2"></path><path d="M20 18h2"></path><path d="m19.07 10.93-1.41 1.41"></path><path d="M22 22H2"></path><path d="m8 6 4-4 4 4"></path><path d="M16 18a4 4 0 0 0-8 0">`),
  _tmpl$1410 = /*#__PURE__*/_$template(`<svg><path d="M12 10V2"></path><path d="m4.93 10.93 1.41 1.41"></path><path d="M2 18h2"></path><path d="M20 18h2"></path><path d="m19.07 10.93-1.41 1.41"></path><path d="M22 22H2"></path><path d="m16 6-4 4-4-4"></path><path d="M16 18a4 4 0 0 0-8 0">`),
  _tmpl$1411 = /*#__PURE__*/_$template(`<svg><path d="m4 19 8-8"></path><path d="m12 19-8-8"></path><path d="M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06">`),
  _tmpl$1412 = /*#__PURE__*/_$template(`<svg><path d="M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z"></path><path d="M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7"></path><path d="M 7 17h.01"></path><path d="m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8">`),
  _tmpl$1413 = /*#__PURE__*/_$template(`<svg><path d="M10 21V3h8"></path><path d="M6 16h9"></path><path d="M10 9.5h7">`),
  _tmpl$1414 = /*#__PURE__*/_$template(`<svg><path d="M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5"></path><path d="M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5"></path><circle cx=12 cy=12 r=3></circle><path d="m18 22-3-3 3-3"></path><path d="m6 2 3 3-3 3">`),
  _tmpl$1415 = /*#__PURE__*/_$template(`<svg><polyline points="14.5 17.5 3 6 3 3 6 3 17.5 14.5"></polyline><line x1=13 x2=19 y1=19 y2=13></line><line x1=16 x2=20 y1=16 y2=20></line><line x1=19 x2=21 y1=21 y2=19>`),
  _tmpl$1416 = /*#__PURE__*/_$template(`<svg><polyline points="14.5 17.5 3 6 3 3 6 3 17.5 14.5"></polyline><line x1=13 x2=19 y1=19 y2=13></line><line x1=16 x2=20 y1=16 y2=20></line><line x1=19 x2=21 y1=21 y2=19></line><polyline points="14.5 6.5 18 3 21 3 21 6 17.5 9.5"></polyline><line x1=5 x2=9 y1=14 y2=18></line><line x1=7 x2=4 y1=17 y2=20></line><line x1=3 x2=5 y1=19 y2=21>`),
  _tmpl$1417 = /*#__PURE__*/_$template(`<svg><path d="m18 2 4 4"></path><path d="m17 7 3-3"></path><path d="M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5"></path><path d="m9 11 4 4"></path><path d="m5 19-3 3"></path><path d="m14 4 6 6">`),
  _tmpl$1418 = /*#__PURE__*/_$template(`<svg><path d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18">`),
  _tmpl$1419 = /*#__PURE__*/_$template(`<svg><path d="M12 21v-6"></path><path d="M12 9V3"></path><path d="M3 15h18"></path><path d="M3 9h18"></path><rect width=18 height=18 x=3 y=3 rx=2>`),
  _tmpl$1420 = /*#__PURE__*/_$template(`<svg><path d="M12 15V9"></path><path d="M3 15h18"></path><path d="M3 9h18"></path><rect width=18 height=18 x=3 y=3 rx=2>`),
  _tmpl$1421 = /*#__PURE__*/_$template(`<svg><path d="M14 14v2"></path><path d="M14 20v2"></path><path d="M14 2v2"></path><path d="M14 8v2"></path><path d="M2 15h8"></path><path d="M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2"></path><path d="M2 9h8"></path><path d="M22 15h-4"></path><path d="M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2"></path><path d="M22 9h-4"></path><path d="M5 3v18">`),
  _tmpl$1422 = /*#__PURE__*/_$template(`<svg><path d="M16 12H3"></path><path d="M16 18H3"></path><path d="M16 6H3"></path><path d="M21 12h.01"></path><path d="M21 18h.01"></path><path d="M21 6h.01">`),
  _tmpl$1423 = /*#__PURE__*/_$template(`<svg><path d="M15 3v18"></path><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M21 9H3"></path><path d="M21 15H3">`),
  _tmpl$1424 = /*#__PURE__*/_$template(`<svg><path d="M14 10h2"></path><path d="M15 22v-8"></path><path d="M15 2v4"></path><path d="M2 10h2"></path><path d="M20 10h2"></path><path d="M3 19h18"></path><path d="M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6"></path><path d="M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2"></path><path d="M8 10h2"></path><path d="M9 22v-8"></path><path d="M9 2v4">`),
  _tmpl$1425 = /*#__PURE__*/_$template(`<svg><path d="M12 3v18"></path><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9h18"></path><path d="M3 15h18">`),
  _tmpl$1426 = /*#__PURE__*/_$template(`<svg><rect width=10 height=14 x=3 y=8 rx=2></rect><path d="M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4"></path><path d="M8 18h.01">`),
  _tmpl$1427 = /*#__PURE__*/_$template(`<svg><rect width=16 height=20 x=4 y=2 rx=2 ry=2></rect><line x1=12 x2=12.01 y1=18 y2=18>`),
  _tmpl$1428 = /*#__PURE__*/_$template(`<svg><circle cx=7 cy=7 r=5></circle><circle cx=17 cy=17 r=5></circle><path d="M12 17h10"></path><path d="m3.46 10.54 7.08-7.08">`),
  _tmpl$1429 = /*#__PURE__*/_$template(`<svg><path d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"></path><circle cx=7.5 cy=7.5 r=.5 fill=currentColor>`),
  _tmpl$1430 = /*#__PURE__*/_$template(`<svg><path d="m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19"></path><path d="M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z"></path><circle cx=6.5 cy=9.5 r=.5 fill=currentColor>`),
  _tmpl$1431 = /*#__PURE__*/_$template(`<svg><path d="M4 4v16">`),
  _tmpl$1432 = /*#__PURE__*/_$template(`<svg><path d="M4 4v16"></path><path d="M9 4v16">`),
  _tmpl$1433 = /*#__PURE__*/_$template(`<svg><path d="M4 4v16"></path><path d="M9 4v16"></path><path d="M14 4v16">`),
  _tmpl$1434 = /*#__PURE__*/_$template(`<svg><path d="M4 4v16"></path><path d="M9 4v16"></path><path d="M14 4v16"></path><path d="M19 4v16">`),
  _tmpl$1435 = /*#__PURE__*/_$template(`<svg><path d="M4 4v16"></path><path d="M9 4v16"></path><path d="M14 4v16"></path><path d="M19 4v16"></path><path d="M22 6 2 18">`),
  _tmpl$1436 = /*#__PURE__*/_$template(`<svg><circle cx=17 cy=4 r=2></circle><path d="M15.59 5.41 5.41 15.59"></path><circle cx=4 cy=17 r=2></circle><path d="M12 22s-4-9-1.5-11.5S22 12 22 12">`),
  _tmpl$1437 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=12 r=10></circle><circle cx=12 cy=12 r=6></circle><circle cx=12 cy=12 r=2>`),
  _tmpl$1438 = /*#__PURE__*/_$template(`<svg><path d="m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44"></path><path d="m13.56 11.747 4.332-.924"></path><path d="m16 21-3.105-6.21"></path><path d="M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z"></path><path d="m6.158 8.633 1.114 4.456"></path><path d="m8 21 3.105-6.21"></path><circle cx=12 cy=13 r=2>`),
  _tmpl$1439 = /*#__PURE__*/_$template(`<svg><circle cx=4 cy=4 r=2></circle><path d="m14 5 3-3 3 3"></path><path d="m14 10 3-3 3 3"></path><path d="M17 14V2"></path><path d="M17 14H7l-5 8h20Z"></path><path d="M8 14v8"></path><path d="m9 14 5 8">`),
  _tmpl$1440 = /*#__PURE__*/_$template(`<svg><path d="M3.5 21 14 3"></path><path d="M20.5 21 10 3"></path><path d="M15.5 21 12 15l-3.5 6"></path><path d="M2 21h20">`),
  _tmpl$1441 = /*#__PURE__*/_$template(`<svg><path d="M12 19h8"></path><path d="m4 17 6-6-6-6">`),
  _tmpl$1442 = /*#__PURE__*/_$template(`<svg><path d="M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3"></path><path d="m16 2 6 6"></path><path d="M12 16H4">`),
  _tmpl$1443 = /*#__PURE__*/_$template(`<svg><path d="M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2"></path><path d="M8.5 2h7"></path><path d="M14.5 16h-5">`),
  _tmpl$1444 = /*#__PURE__*/_$template(`<svg><path d="M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2"></path><path d="M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2"></path><path d="M3 2h7"></path><path d="M14 2h7"></path><path d="M9 16H4"></path><path d="M20 16h-5">`),
  _tmpl$1445 = /*#__PURE__*/_$template(`<svg><path d="M12 20h-1a2 2 0 0 1-2-2 2 2 0 0 1-2 2H6"></path><path d="M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7"></path><path d="M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1"></path><path d="M6 4h1a2 2 0 0 1 2 2 2 2 0 0 1 2-2h1"></path><path d="M9 6v12">`),
  _tmpl$1446 = /*#__PURE__*/_$template(`<svg><path d="M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1"></path><path d="M7 22h1a4 4 0 0 0 4-4v-1"></path><path d="M7 2h1a4 4 0 0 1 4 4v1">`),
  _tmpl$1447 = /*#__PURE__*/_$template(`<svg><path d="M17 6H3"></path><path d="M21 12H8"></path><path d="M21 18H8"></path><path d="M3 12v6">`),
  _tmpl$1448 = /*#__PURE__*/_$template(`<svg><path d="M21 6H3"></path><path d="M10 12H3"></path><path d="M10 18H3"></path><circle cx=17 cy=15 r=3></circle><path d="m21 19-1.9-1.9">`),
  _tmpl$1449 = /*#__PURE__*/_$template(`<svg><path d="M14 21h1"></path><path d="M14 3h1"></path><path d="M19 3a2 2 0 0 1 2 2"></path><path d="M21 14v1"></path><path d="M21 19a2 2 0 0 1-2 2"></path><path d="M21 9v1"></path><path d="M3 14v1"></path><path d="M3 9v1"></path><path d="M5 21a2 2 0 0 1-2-2"></path><path d="M5 3a2 2 0 0 0-2 2"></path><path d="M7 12h10"></path><path d="M7 16h6"></path><path d="M7 8h8"></path><path d="M9 21h1"></path><path d="M9 3h1">`),
  _tmpl$1450 = /*#__PURE__*/_$template(`<svg><path d="M15 18H3"></path><path d="M17 6H3"></path><path d="M21 12H3">`),
  _tmpl$1451 = /*#__PURE__*/_$template(`<svg><path d="M2 10s3-3 3-8"></path><path d="M22 10s-3-3-3-8"></path><path d="M10 2c0 4.4-3.6 8-8 8"></path><path d="M14 2c0 4.4 3.6 8 8 8"></path><path d="M2 10s2 2 2 5"></path><path d="M22 10s-2 2-2 5"></path><path d="M8 15h8"></path><path d="M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1"></path><path d="M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1">`),
  _tmpl$1452 = /*#__PURE__*/_$template(`<svg><path d="m10 20-1.25-2.5L6 18"></path><path d="M10 4 8.75 6.5 6 6"></path><path d="M10.585 15H10"></path><path d="M2 12h6.5L10 9"></path><path d="M20 14.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0z"></path><path d="m4 10 1.5 2L4 14"></path><path d="m7 21 3-6-1.5-3"></path><path d="m7 3 3 6h2">`),
  _tmpl$1453 = /*#__PURE__*/_$template(`<svg><path d="M12 9a4 4 0 0 0-2 7.5"></path><path d="M12 3v2"></path><path d="m6.6 18.4-1.4 1.4"></path><path d="M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z"></path><path d="M4 13H2"></path><path d="M6.34 7.34 4.93 5.93">`),
  _tmpl$1454 = /*#__PURE__*/_$template(`<svg><path d="M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z">`),
  _tmpl$1455 = /*#__PURE__*/_$template(`<svg><path d="M17 14V2"></path><path d="M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z">`),
  _tmpl$1456 = /*#__PURE__*/_$template(`<svg><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z">`),
  _tmpl$1457 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="m9 12 2 2 4-4">`),
  _tmpl$1458 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="M9 12h6">`),
  _tmpl$1459 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="M9 9h.01"></path><path d="m15 9-6 6"></path><path d="M15 15h.01">`),
  _tmpl$1460 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="M9 12h6"></path><path d="M12 9v6">`),
  _tmpl$1461 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="m9.5 14.5 5-5">`),
  _tmpl$1462 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="m9.5 14.5 5-5"></path><path d="m9.5 9.5 5 5">`),
  _tmpl$1463 = /*#__PURE__*/_$template(`<svg><path d="M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"></path><path d="M13 5v2"></path><path d="M13 17v2"></path><path d="M13 11v2">`),
  _tmpl$1464 = /*#__PURE__*/_$template(`<svg><path d="M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12"></path><path d="m12 13.5 3.75.5"></path><path d="m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8"></path><path d="M6 10V8"></path><path d="M6 14v1"></path><path d="M6 19v2"></path><rect x=2 y=8 width=20 height=13 rx=2>`),
  _tmpl$1465 = /*#__PURE__*/_$template(`<svg><path d="m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8"></path><path d="M6 10V8"></path><path d="M6 14v1"></path><path d="M6 19v2"></path><rect x=2 y=8 width=20 height=13 rx=2>`),
  _tmpl$1466 = /*#__PURE__*/_$template(`<svg><path d="M10 2h4"></path><path d="M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7"></path><path d="M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2"></path><path d="m2 2 20 20"></path><path d="M12 12v-2">`),
  _tmpl$1467 = /*#__PURE__*/_$template(`<svg><path d="M10 2h4"></path><path d="M12 14v-4"></path><path d="M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6"></path><path d="M9 17H4v5">`),
  _tmpl$1468 = /*#__PURE__*/_$template(`<svg><line x1=10 x2=14 y1=2 y2=2></line><line x1=12 x2=15 y1=14 y2=11></line><circle cx=12 cy=14 r=8>`),
  _tmpl$1469 = /*#__PURE__*/_$template(`<svg><circle cx=9 cy=12 r=3></circle><rect width=20 height=14 x=2 y=5 rx=7>`),
  _tmpl$1470 = /*#__PURE__*/_$template(`<svg><circle cx=15 cy=12 r=3></circle><rect width=20 height=14 x=2 y=5 rx=7>`),
  _tmpl$1471 = /*#__PURE__*/_$template(`<svg><path d="M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18"></path><path d="M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8">`),
  _tmpl$1472 = /*#__PURE__*/_$template(`<svg><path d="M10 15h4"></path><path d="m14.817 10.995-.971-1.45 1.034-1.232a2 2 0 0 0-2.025-3.238l-1.82.364L9.91 3.885a2 2 0 0 0-3.625.748L6.141 6.55l-1.725.426a2 2 0 0 0-.19 3.756l.657.27"></path><path d="m18.822 10.995 2.26-5.38a1 1 0 0 0-.557-1.318L16.954 2.9a1 1 0 0 0-1.281.533l-.924 2.122"></path><path d="M4 12.006A1 1 0 0 1 4.994 11H19a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z">`),
  _tmpl$1473 = /*#__PURE__*/_$template(`<svg><path d="M21 4H3"></path><path d="M18 8H6"></path><path d="M19 12H9"></path><path d="M16 16h-6"></path><path d="M11 20H9">`),
  _tmpl$1474 = /*#__PURE__*/_$template(`<svg><ellipse cx=12 cy=11 rx=3 ry=2></ellipse><ellipse cx=12 cy=12.5 rx=10 ry=8.5>`),
  _tmpl$1475 = /*#__PURE__*/_$template(`<svg><path d="M12 20v-6"></path><path d="M19.656 14H22"></path><path d="M2 14h12"></path><path d="m2 2 20 20"></path><path d="M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2"></path><path d="M9.656 4H20a2 2 0 0 1 2 2v10.344">`),
  _tmpl$1476 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M2 14h20"></path><path d="M12 20v-6">`),
  _tmpl$1477 = /*#__PURE__*/_$template(`<svg><path d="M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z"></path><path d="M8 13v9"></path><path d="M16 22v-9"></path><path d="m9 6 1 7"></path><path d="m15 6-1 7"></path><path d="M12 6V2"></path><path d="M13 2h-2">`),
  _tmpl$1478 = /*#__PURE__*/_$template(`<svg><rect width=18 height=12 x=3 y=8 rx=1></rect><path d="M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3"></path><path d="M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3">`),
  _tmpl$1479 = /*#__PURE__*/_$template(`<svg><path d="m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20"></path><path d="M16 18h-5"></path><path d="M18 5a1 1 0 0 0-1 1v5.573"></path><path d="M3 4h8.129a1 1 0 0 1 .99.863L13 11.246"></path><path d="M4 11V4"></path><path d="M7 15h.01"></path><path d="M8 10.1V4"></path><circle cx=18 cy=18 r=2></circle><circle cx=7 cy=15 r=5>`),
  _tmpl$1480 = /*#__PURE__*/_$template(`<svg><path d="M16.05 10.966a5 2.5 0 0 1-8.1 0"></path><path d="m16.923 14.049 4.48 2.04a1 1 0 0 1 .001 1.831l-8.574 3.9a2 2 0 0 1-1.66 0l-8.574-3.91a1 1 0 0 1 0-1.83l4.484-2.04"></path><path d="M16.949 14.14a5 2.5 0 1 1-9.9 0L10.063 3.5a2 2 0 0 1 3.874 0z"></path><path d="M9.194 6.57a5 2.5 0 0 0 5.61 0">`),
  _tmpl$1481 = /*#__PURE__*/_$template(`<svg><path d="M2 22V12a10 10 0 1 1 20 0v10"></path><path d="M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8"></path><path d="M10 15h.01"></path><path d="M14 15h.01"></path><path d="M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z"></path><path d="m9 19-2 3"></path><path d="m15 19 2 3">`),
  _tmpl$1482 = /*#__PURE__*/_$template(`<svg><path d="M8 3.1V7a4 4 0 0 0 8 0V3.1"></path><path d="m9 15-1-1"></path><path d="m15 15 1-1"></path><path d="M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z"></path><path d="m8 19-2 3"></path><path d="m16 19 2 3">`),
  _tmpl$1483 = /*#__PURE__*/_$template(`<svg><path d="M2 17 17 2"></path><path d="m2 14 8 8"></path><path d="m5 11 8 8"></path><path d="m8 8 8 8"></path><path d="m11 5 8 8"></path><path d="m14 2 8 8"></path><path d="M7 22 22 7">`),
  _tmpl$1484 = /*#__PURE__*/_$template(`<svg><rect width=16 height=16 x=4 y=3 rx=2></rect><path d="M4 11h16"></path><path d="M12 3v8"></path><path d="m8 19-2 3"></path><path d="m18 22-2-3"></path><path d="M8 15h.01"></path><path d="M16 15h.01">`),
  _tmpl$1485 = /*#__PURE__*/_$template(`<svg><path d="M12 16v6"></path><path d="M14 20h-4"></path><path d="M18 2h4v4"></path><path d="m2 2 7.17 7.17"></path><path d="M2 5.355V2h3.357"></path><path d="m22 2-7.17 7.17"></path><path d="M8 5 5 8"></path><circle cx=12 cy=12 r=4>`),
  _tmpl$1486 = /*#__PURE__*/_$template(`<svg><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1=10 x2=10 y1=11 y2=17></line><line x1=14 x2=14 y1=11 y2=17>`),
  _tmpl$1487 = /*#__PURE__*/_$template(`<svg><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2">`),
  _tmpl$1488 = /*#__PURE__*/_$template(`<svg><path d="M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z"></path><path d="M12 19v3">`),
  _tmpl$1489 = /*#__PURE__*/_$template(`<svg><path d="M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4"></path><path d="M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3"></path><path d="M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35"></path><path d="M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14">`),
  _tmpl$1490 = /*#__PURE__*/_$template(`<svg><path d="m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z"></path><path d="M12 22v-3">`),
  _tmpl$1491 = /*#__PURE__*/_$template(`<svg><path d="M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z"></path><path d="M7 16v6"></path><path d="M13 19v3"></path><path d="M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5">`),
  _tmpl$1492 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2 ry=2></rect><rect width=3 height=9 x=7 y=7></rect><rect width=3 height=5 x=14 y=7>`),
  _tmpl$1493 = /*#__PURE__*/_$template(`<svg><path d="M16 17h6v-6"></path><path d="m22 17-8.5-8.5-5 5L2 7">`),
  _tmpl$1494 = /*#__PURE__*/_$template(`<svg><path d="M14.828 14.828 21 21"></path><path d="M21 16v5h-5"></path><path d="m21 3-9 9-4-4-6 6"></path><path d="M21 8V3h-5">`),
  _tmpl$1495 = /*#__PURE__*/_$template(`<svg><path d="M16 7h6v6"></path><path d="m22 7-8.5 8.5-5-5L2 17">`),
  _tmpl$1496 = /*#__PURE__*/_$template(`<svg><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"></path><path d="M12 9v4"></path><path d="M12 17h.01">`),
  _tmpl$1497 = /*#__PURE__*/_$template(`<svg><path d="M10.17 4.193a2 2 0 0 1 3.666.013"></path><path d="M14 21h2"></path><path d="m15.874 7.743 1 1.732"></path><path d="m18.849 12.952 1 1.732"></path><path d="M21.824 18.18a2 2 0 0 1-1.835 2.824"></path><path d="M4.024 21a2 2 0 0 1-1.839-2.839"></path><path d="m5.136 12.952-1 1.732"></path><path d="M8 21h2"></path><path d="m8.102 7.743-1 1.732">`),
  _tmpl$1498 = /*#__PURE__*/_$template(`<svg><path d="M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z">`),
  _tmpl$1499 = /*#__PURE__*/_$template(`<svg><path d="M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z">`),
  _tmpl$1500 = /*#__PURE__*/_$template(`<svg><path d="M10 14.66v1.626a2 2 0 0 1-.976 1.696A5 5 0 0 0 7 21.978"></path><path d="M14 14.66v1.626a2 2 0 0 0 .976 1.696A5 5 0 0 1 17 21.978"></path><path d="M18 9h1.5a1 1 0 0 0 0-5H18"></path><path d="M4 22h16"></path><path d="M6 9a6 6 0 0 0 12 0V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1z"></path><path d="M6 9H4.5a1 1 0 0 1 0-5H6">`),
  _tmpl$1501 = /*#__PURE__*/_$template(`<svg><path d="M14 19V7a2 2 0 0 0-2-2H9"></path><path d="M15 19H9"></path><path d="M19 19h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.62L18.3 9.38a1 1 0 0 0-.78-.38H14"></path><path d="M2 13v5a1 1 0 0 0 1 1h2"></path><path d="M4 3 2.15 5.15a.495.495 0 0 0 .35.86h2.15a.47.47 0 0 1 .35.86L3 9.02"></path><circle cx=17 cy=19 r=2></circle><circle cx=7 cy=19 r=2>`),
  _tmpl$1502 = /*#__PURE__*/_$template(`<svg><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"></path><path d="M15 18H9"></path><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"></path><circle cx=17 cy=18 r=2></circle><circle cx=7 cy=18 r=2>`),
  _tmpl$1503 = /*#__PURE__*/_$template(`<svg><path d="m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z"></path><path d="M4.82 7.9 8 10"></path><path d="M15.18 7.9 12 10"></path><path d="M16.93 10H20a2 2 0 0 1 0 4H2">`),
  _tmpl$1504 = /*#__PURE__*/_$template(`<svg><path d="M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z"></path><path d="M7 21h10"></path><rect width=20 height=14 x=2 y=3 rx=2>`),
  _tmpl$1505 = /*#__PURE__*/_$template(`<svg><path d="M7 21h10"></path><rect width=20 height=14 x=2 y=3 rx=2>`),
  _tmpl$1506 = /*#__PURE__*/_$template(`<svg><path d="m17 2-5 5-5-5"></path><rect width=20 height=15 x=2 y=7 rx=2>`),
  _tmpl$1507 = /*#__PURE__*/_$template(`<svg><path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7">`),
  _tmpl$1508 = /*#__PURE__*/_$template(`<svg><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z">`),
  _tmpl$1509 = /*#__PURE__*/_$template(`<svg><path d="M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z">`),
  _tmpl$1510 = /*#__PURE__*/_$template(`<svg><path d="M12 4v16"></path><path d="M4 7V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2"></path><path d="M9 20h6">`),
  _tmpl$1511 = /*#__PURE__*/_$template(`<svg><path d="M12 2v1"></path><path d="M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575"></path><path d="M17.5 12H22A10 10 0 0 0 9.004 3.455"></path><path d="m2 2 20 20">`),
  _tmpl$1512 = /*#__PURE__*/_$template(`<svg><path d="M22 12a10.06 10.06 1 0 0-20 0Z"></path><path d="M12 12v8a2 2 0 0 0 4 0"></path><path d="M12 2v1">`),
  _tmpl$1513 = /*#__PURE__*/_$template(`<svg><path d="M6 4v6a6 6 0 0 0 12 0V4"></path><line x1=4 x2=20 y1=20 y2=20>`),
  _tmpl$1514 = /*#__PURE__*/_$template(`<svg><path d="M9 14 4 9l5-5"></path><path d="M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11">`),
  _tmpl$1515 = /*#__PURE__*/_$template(`<svg><path d="M21 17a9 9 0 0 0-15-6.7L3 13"></path><path d="M3 7v6h6"></path><circle cx=12 cy=17 r=1>`),
  _tmpl$1516 = /*#__PURE__*/_$template(`<svg><path d="M3 7v6h6"></path><path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13">`),
  _tmpl$1517 = /*#__PURE__*/_$template(`<svg><path d="M16 12h6"></path><path d="M8 12H2"></path><path d="M12 2v2"></path><path d="M12 8v2"></path><path d="M12 14v2"></path><path d="M12 20v2"></path><path d="m19 15 3-3-3-3"></path><path d="m5 9-3 3 3 3">`),
  _tmpl$1518 = /*#__PURE__*/_$template(`<svg><path d="M12 22v-6"></path><path d="M12 8V2"></path><path d="M4 12H2"></path><path d="M10 12H8"></path><path d="M16 12h-2"></path><path d="M22 12h-2"></path><path d="m15 19-3 3-3-3"></path><path d="m15 5-3-3-3 3">`),
  _tmpl$1519 = /*#__PURE__*/_$template(`<svg><rect width=8 height=6 x=5 y=4 rx=1></rect><rect width=8 height=6 x=11 y=14 rx=1>`),
  _tmpl$1520 = /*#__PURE__*/_$template(`<svg><path d="M14 21v-3a2 2 0 0 0-4 0v3"></path><path d="M18 12h.01"></path><path d="M18 16h.01"></path><path d="M22 7a1 1 0 0 0-1-1h-2a2 2 0 0 1-1.143-.359L13.143 2.36a2 2 0 0 0-2.286-.001L6.143 5.64A2 2 0 0 1 5 6H3a1 1 0 0 0-1 1v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2z"></path><path d="M6 12h.01"></path><path d="M6 16h.01"></path><circle cx=12 cy=10 r=2>`),
  _tmpl$1521 = /*#__PURE__*/_$template(`<svg><path d="M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2">`),
  _tmpl$1522 = /*#__PURE__*/_$template(`<svg><path d="m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71"></path><path d="m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71"></path><line x1=8 x2=8 y1=2 y2=5></line><line x1=2 x2=5 y1=8 y2=8></line><line x1=16 x2=16 y1=19 y2=22></line><line x1=19 x2=22 y1=16 y2=16>`),
  _tmpl$1523 = /*#__PURE__*/_$template(`<svg><path d="m19 5 3-3"></path><path d="m2 22 3-3"></path><path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"></path><path d="M7.5 13.5 10 11"></path><path d="M10.5 16.5 13 14"></path><path d="m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z">`),
  _tmpl$1524 = /*#__PURE__*/_$template(`<svg><path d="M12 3v12"></path><path d="m17 8-5-5-5 5"></path><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4">`),
  _tmpl$1525 = /*#__PURE__*/_$template(`<svg><circle cx=10 cy=7 r=1></circle><circle cx=4 cy=20 r=1></circle><path d="M4.7 19.3 19 5"></path><path d="m21 3-3 1 2 2Z"></path><path d="M9.26 7.68 5 12l2 5"></path><path d="m10 14 5 2 3.5-3.5"></path><path d="m18 12 1-1 1 1-1 1Z">`),
  _tmpl$1526 = /*#__PURE__*/_$template(`<svg><path d="m16 11 2 2 4-4"></path><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx=9 cy=7 r=4>`),
  _tmpl$1527 = /*#__PURE__*/_$template(`<svg><path d="M10 15H6a4 4 0 0 0-4 4v2"></path><path d="m14.305 16.53.923-.382"></path><path d="m15.228 13.852-.923-.383"></path><path d="m16.852 12.228-.383-.923"></path><path d="m16.852 17.772-.383.924"></path><path d="m19.148 12.228.383-.923"></path><path d="m19.53 18.696-.382-.924"></path><path d="m20.772 13.852.924-.383"></path><path d="m20.772 16.148.924.383"></path><circle cx=18 cy=15 r=3></circle><circle cx=9 cy=7 r=4>`),
  _tmpl$1528 = /*#__PURE__*/_$template(`<svg><circle cx=10 cy=7 r=4></circle><path d="M10.3 15H7a4 4 0 0 0-4 4v2"></path><path d="M15 15.5V14a2 2 0 0 1 4 0v1.5"></path><rect width=8 height=5 x=13 y=16 rx=.899>`),
  _tmpl$1529 = /*#__PURE__*/_$template(`<svg><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx=9 cy=7 r=4></circle><line x1=22 x2=16 y1=11 y2=11>`),
  _tmpl$1530 = /*#__PURE__*/_$template(`<svg><path d="M11.5 15H7a4 4 0 0 0-4 4v2"></path><path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"></path><circle cx=10 cy=7 r=4>`),
  _tmpl$1531 = /*#__PURE__*/_$template(`<svg><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx=9 cy=7 r=4></circle><line x1=19 x2=19 y1=8 y2=14></line><line x1=22 x2=16 y1=11 y2=11>`),
  _tmpl$1532 = /*#__PURE__*/_$template(`<svg><path d="M2 21a8 8 0 0 1 13.292-6"></path><circle cx=10 cy=8 r=5></circle><path d="m16 19 2 2 4-4">`),
  _tmpl$1533 = /*#__PURE__*/_$template(`<svg><path d="m14.305 19.53.923-.382"></path><path d="m15.228 16.852-.923-.383"></path><path d="m16.852 15.228-.383-.923"></path><path d="m16.852 20.772-.383.924"></path><path d="m19.148 15.228.383-.923"></path><path d="m19.53 21.696-.382-.924"></path><path d="M2 21a8 8 0 0 1 10.434-7.62"></path><path d="m20.772 16.852.924-.383"></path><path d="m20.772 19.148.924.383"></path><circle cx=10 cy=8 r=5></circle><circle cx=18 cy=18 r=3>`),
  _tmpl$1534 = /*#__PURE__*/_$template(`<svg><path d="M2 21a8 8 0 0 1 13.292-6"></path><circle cx=10 cy=8 r=5></circle><path d="M22 19h-6">`),
  _tmpl$1535 = /*#__PURE__*/_$template(`<svg><path d="M2 21a8 8 0 0 1 10.821-7.487"></path><path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"></path><circle cx=10 cy=8 r=5>`),
  _tmpl$1536 = /*#__PURE__*/_$template(`<svg><path d="M2 21a8 8 0 0 1 13.292-6"></path><circle cx=10 cy=8 r=5></circle><path d="M19 16v6"></path><path d="M22 19h-6">`),
  _tmpl$1537 = /*#__PURE__*/_$template(`<svg><circle cx=10 cy=8 r=5></circle><path d="M2 21a8 8 0 0 1 10.434-7.62"></path><circle cx=18 cy=18 r=3></circle><path d="m22 22-1.9-1.9">`),
  _tmpl$1538 = /*#__PURE__*/_$template(`<svg><path d="M2 21a8 8 0 0 1 11.873-7"></path><circle cx=10 cy=8 r=5></circle><path d="m17 17 5 5"></path><path d="m22 17-5 5">`),
  _tmpl$1539 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=8 r=5></circle><path d="M20 21a8 8 0 0 0-16 0">`),
  _tmpl$1540 = /*#__PURE__*/_$template(`<svg><circle cx=10 cy=7 r=4></circle><path d="M10.3 15H7a4 4 0 0 0-4 4v2"></path><circle cx=17 cy=17 r=3></circle><path d="m21 21-1.9-1.9">`),
  _tmpl$1541 = /*#__PURE__*/_$template(`<svg><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx=9 cy=7 r=4></circle><line x1=17 x2=22 y1=8 y2=13></line><line x1=22 x2=17 y1=8 y2=13>`),
  _tmpl$1542 = /*#__PURE__*/_$template(`<svg><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path><circle cx=12 cy=7 r=4>`),
  _tmpl$1543 = /*#__PURE__*/_$template(`<svg><path d="M18 21a8 8 0 0 0-16 0"></path><circle cx=10 cy=8 r=5></circle><path d="M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3">`),
  _tmpl$1544 = /*#__PURE__*/_$template(`<svg><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><path d="M16 3.128a4 4 0 0 1 0 7.744"></path><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><circle cx=9 cy=7 r=4>`),
  _tmpl$1545 = /*#__PURE__*/_$template(`<svg><path d="m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8"></path><path d="M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7"></path><path d="m2.1 21.8 6.4-6.3"></path><path d="m19 5-7 7">`),
  _tmpl$1546 = /*#__PURE__*/_$template(`<svg><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"></path><path d="M7 2v20"></path><path d="M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7">`),
  _tmpl$1547 = /*#__PURE__*/_$template(`<svg><path d="M12 2v20"></path><path d="M2 5h20"></path><path d="M3 3v2"></path><path d="M7 3v2"></path><path d="M17 3v2"></path><path d="M21 3v2"></path><path d="m19 5-7 7-7-7">`),
  _tmpl$1548 = /*#__PURE__*/_$template(`<svg><path d="M8 21s-4-3-4-9 4-9 4-9"></path><path d="M16 3s4 3 4 9-4 9-4 9"></path><line x1=15 x2=9 y1=9 y2=15></line><line x1=9 x2=15 y1=9 y2=15>`),
  _tmpl$1549 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><circle cx=7.5 cy=7.5 r=.5 fill=currentColor></circle><path d="m7.9 7.9 2.7 2.7"></path><circle cx=16.5 cy=7.5 r=.5 fill=currentColor></circle><path d="m13.4 10.6 2.7-2.7"></path><circle cx=7.5 cy=16.5 r=.5 fill=currentColor></circle><path d="m7.9 16.1 2.7-2.7"></path><circle cx=16.5 cy=16.5 r=.5 fill=currentColor></circle><path d="m13.4 13.4 2.7 2.7"></path><circle cx=12 cy=12 r=2>`),
  _tmpl$1550 = /*#__PURE__*/_$template(`<svg><path d="M19.5 7a24 24 0 0 1 0 10"></path><path d="M4.5 7a24 24 0 0 0 0 10"></path><path d="M7 19.5a24 24 0 0 0 10 0"></path><path d="M7 4.5a24 24 0 0 1 10 0"></path><rect x=17 y=17 width=5 height=5 rx=1></rect><rect x=17 y=2 width=5 height=5 rx=1></rect><rect x=2 y=17 width=5 height=5 rx=1></rect><rect x=2 y=2 width=5 height=5 rx=1>`),
  _tmpl$1551 = /*#__PURE__*/_$template(`<svg><path d="M16 8q6 0 6-6-6 0-6 6"></path><path d="M17.41 3.59a10 10 0 1 0 3 3"></path><path d="M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14">`),
  _tmpl$1552 = /*#__PURE__*/_$template(`<svg><path d="M18 11c-1.5 0-2.5.5-3 2"></path><path d="M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z"></path><path d="M6 11c1.5 0 2.5.5 3 2">`),
  _tmpl$1553 = /*#__PURE__*/_$template(`<svg><path d="M10 20h4"></path><path d="M12 16v6"></path><path d="M17 2h4v4"></path><path d="m21 2-5.46 5.46"></path><circle cx=12 cy=11 r=5>`),
  _tmpl$1554 = /*#__PURE__*/_$template(`<svg><path d="M12 15v7"></path><path d="M9 19h6"></path><circle cx=12 cy=9 r=6>`),
  _tmpl$1555 = /*#__PURE__*/_$template(`<svg><path d="m2 8 2 2-2 2 2 2-2 2"></path><path d="m22 8-2 2 2 2-2 2 2 2"></path><path d="M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2"></path><path d="M16 10.34V6c0-.55-.45-1-1-1h-4.34"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1556 = /*#__PURE__*/_$template(`<svg><path d="m2 8 2 2-2 2 2 2-2 2"></path><path d="m22 8-2 2 2 2-2 2 2 2"></path><rect width=8 height=14 x=8 y=5 rx=1>`),
  _tmpl$1557 = /*#__PURE__*/_$template(`<svg><path d="M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196"></path><path d="M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2"></path><path d="m2 2 20 20">`),
  _tmpl$1558 = /*#__PURE__*/_$template(`<svg><path d="m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5"></path><rect x=2 y=6 width=14 height=12 rx=2>`),
  _tmpl$1559 = /*#__PURE__*/_$template(`<svg><rect width=20 height=16 x=2 y=4 rx=2></rect><path d="M2 8h20"></path><circle cx=8 cy=14 r=2></circle><path d="M8 12h8"></path><circle cx=16 cy=14 r=2>`),
  _tmpl$1560 = /*#__PURE__*/_$template(`<svg><path d="M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2"></path><path d="M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2"></path><circle cx=12 cy=12 r=1></circle><path d="M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0">`),
  _tmpl$1561 = /*#__PURE__*/_$template(`<svg><circle cx=6 cy=12 r=4></circle><circle cx=18 cy=12 r=4></circle><line x1=6 x2=18 y1=16 y2=16>`),
  _tmpl$1562 = /*#__PURE__*/_$template(`<svg><path d="M11.1 7.1a16.55 16.55 0 0 1 10.9 4"></path><path d="M12 12a12.6 12.6 0 0 1-8.7 5"></path><path d="M16.8 13.6a16.55 16.55 0 0 1-9 7.5"></path><path d="M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10"></path><path d="M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5"></path><circle cx=12 cy=12 r=10>`),
  _tmpl$1563 = /*#__PURE__*/_$template(`<svg><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"></path><path d="M16 9a5 5 0 0 1 0 6">`),
  _tmpl$1564 = /*#__PURE__*/_$template(`<svg><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"></path><path d="M16 9a5 5 0 0 1 0 6"></path><path d="M19.364 18.364a9 9 0 0 0 0-12.728">`),
  _tmpl$1565 = /*#__PURE__*/_$template(`<svg><path d="M16 9a5 5 0 0 1 .95 2.293"></path><path d="M19.364 5.636a9 9 0 0 1 1.889 9.96"></path><path d="m2 2 20 20"></path><path d="m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11"></path><path d="M9.828 4.172A.686.686 0 0 1 11 4.657v.686">`),
  _tmpl$1566 = /*#__PURE__*/_$template(`<svg><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"></path><line x1=22 x2=16 y1=9 y2=15></line><line x1=16 x2=22 y1=9 y2=15>`),
  _tmpl$1567 = /*#__PURE__*/_$template(`<svg><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z">`),
  _tmpl$1568 = /*#__PURE__*/_$template(`<svg><path d="m9 12 2 2 4-4"></path><path d="M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z"></path><path d="M22 19H2">`),
  _tmpl$1569 = /*#__PURE__*/_$template(`<svg><rect width=18 height=18 x=3 y=3 rx=2></rect><path d="M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2"></path><path d="M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21">`),
  _tmpl$1570 = /*#__PURE__*/_$template(`<svg><path d="M17 14h.01"></path><path d="M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14">`),
  _tmpl$1571 = /*#__PURE__*/_$template(`<svg><path d="M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"></path><path d="M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4">`),
  _tmpl$1572 = /*#__PURE__*/_$template(`<svg><circle cx=8 cy=9 r=2></circle><path d="m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2"></path><path d="M8 21h8"></path><path d="M12 17v4">`),
  _tmpl$1573 = /*#__PURE__*/_$template(`<svg><path d="m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72"></path><path d="m14 7 3 3"></path><path d="M5 6v4"></path><path d="M19 14v4"></path><path d="M10 2v2"></path><path d="M7 8H3"></path><path d="M21 16h-4"></path><path d="M11 3H9">`),
  _tmpl$1574 = /*#__PURE__*/_$template(`<svg><path d="M15 4V2"></path><path d="M15 16v-2"></path><path d="M8 9h2"></path><path d="M20 9h2"></path><path d="M17.8 11.8 19 13"></path><path d="M15 9h.01"></path><path d="M17.8 6.2 19 5"></path><path d="m3 21 9-9"></path><path d="M12.2 6.2 11 5">`),
  _tmpl$1575 = /*#__PURE__*/_$template(`<svg><path d="M18 21V10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v11"></path><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 1.132-1.803l7.95-3.974a2 2 0 0 1 1.837 0l7.948 3.974A2 2 0 0 1 22 8z"></path><path d="M6 13h12"></path><path d="M6 17h12">`),
  _tmpl$1576 = /*#__PURE__*/_$template(`<svg><path d="M3 6h3"></path><path d="M17 6h.01"></path><rect width=18 height=20 x=3 y=2 rx=2></rect><circle cx=12 cy=13 r=5></circle><path d="M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5">`),
  _tmpl$1577 = /*#__PURE__*/_$template(`<svg><path d="M12 10v2.2l1.6 1"></path><path d="m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05"></path><path d="m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05"></path><circle cx=12 cy=12 r=6>`),
  _tmpl$1578 = /*#__PURE__*/_$template(`<svg><path d="M19 5a2 2 0 0 0-2 2v11"></path><path d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"></path><path d="M7 13h10"></path><path d="M7 9h10"></path><path d="M9 5a2 2 0 0 0-2 2v11">`),
  _tmpl$1579 = /*#__PURE__*/_$template(`<svg><path d="M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"></path><path d="M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"></path><path d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1">`),
  _tmpl$1580 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=4.5 r=2.5></circle><path d="m10.2 6.3-3.9 3.9"></path><circle cx=4.5 cy=12 r=2.5></circle><path d="M7 12h10"></path><circle cx=19.5 cy=12 r=2.5></circle><path d="m13.8 17.7 3.9-3.9"></path><circle cx=12 cy=19.5 r=2.5>`),
  _tmpl$1581 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=10 r=8></circle><circle cx=12 cy=10 r=3></circle><path d="M7 22h10"></path><path d="M12 22v-4">`),
  _tmpl$1582 = /*#__PURE__*/_$template(`<svg><path d="M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15"></path><path d="M9 3.4a4 4 0 0 1 6.52.66"></path><path d="m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05"></path><path d="M20.3 20.3a4 4 0 0 1-2.3.7"></path><path d="M18.6 13a4 4 0 0 1 3.357 3.414"></path><path d="m12 6 .6 1"></path><path d="m2 2 20 20">`),
  _tmpl$1583 = /*#__PURE__*/_$template(`<svg><path d="M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2"></path><path d="m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06"></path><path d="m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8">`),
  _tmpl$1584 = /*#__PURE__*/_$template(`<svg><circle cx=12 cy=5 r=3></circle><path d="M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z">`),
  _tmpl$1585 = /*#__PURE__*/_$template(`<svg><path d="m2 22 10-10"></path><path d="m16 8-1.17 1.17"></path><path d="M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"></path><path d="m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97"></path><path d="M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62"></path><path d="M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z"></path><path d="M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"></path><path d="m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98"></path><path d="M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1586 = /*#__PURE__*/_$template(`<svg><path d="M2 22 16 8"></path><path d="M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"></path><path d="M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"></path><path d="M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"></path><path d="M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z"></path><path d="M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"></path><path d="M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"></path><path d="M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z">`),
  _tmpl$1587 = /*#__PURE__*/_$template(`<svg><circle cx=7 cy=12 r=3></circle><path d="M10 9v6"></path><circle cx=17 cy=12 r=3></circle><path d="M14 7v8"></path><path d="M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1">`),
  _tmpl$1588 = /*#__PURE__*/_$template(`<svg><path d="m14.305 19.53.923-.382"></path><path d="m15.228 16.852-.923-.383"></path><path d="m16.852 15.228-.383-.923"></path><path d="m16.852 20.772-.383.924"></path><path d="m19.148 15.228.383-.923"></path><path d="m19.53 21.696-.382-.924"></path><path d="M2 7.82a15 15 0 0 1 20 0"></path><path d="m20.772 16.852.924-.383"></path><path d="m20.772 19.148.924.383"></path><path d="M5 11.858a10 10 0 0 1 11.5-1.785"></path><path d="M8.5 15.429a5 5 0 0 1 2.413-1.31"></path><circle cx=18 cy=18 r=3>`),
  _tmpl$1589 = /*#__PURE__*/_$template(`<svg><path d="M12 20h.01"></path><path d="M5 12.859a10 10 0 0 1 14 0"></path><path d="M8.5 16.429a5 5 0 0 1 7 0">`),
  _tmpl$1590 = /*#__PURE__*/_$template(`<svg><path d="M12 20h.01"></path><path d="M8.5 16.429a5 5 0 0 1 7 0">`),
  _tmpl$1591 = /*#__PURE__*/_$template(`<svg><path d="M12 20h.01"></path><path d="M8.5 16.429a5 5 0 0 1 7 0"></path><path d="M5 12.859a10 10 0 0 1 5.17-2.69"></path><path d="M19 12.859a10 10 0 0 0-2.007-1.523"></path><path d="M2 8.82a15 15 0 0 1 4.177-2.643"></path><path d="M22 8.82a15 15 0 0 0-11.288-3.764"></path><path d="m2 2 20 20">`),
  _tmpl$1592 = /*#__PURE__*/_$template(`<svg><path d="M2 8.82a15 15 0 0 1 20 0"></path><path d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"></path><path d="M5 12.859a10 10 0 0 1 10.5-2.222"></path><path d="M8.5 16.429a5 5 0 0 1 3-1.406">`),
  _tmpl$1593 = /*#__PURE__*/_$template(`<svg><path d="M12 20h.01">`),
  _tmpl$1594 = /*#__PURE__*/_$template(`<svg><path d="M12 20h.01"></path><path d="M2 8.82a15 15 0 0 1 20 0"></path><path d="M5 12.859a10 10 0 0 1 14 0"></path><path d="M8.5 16.429a5 5 0 0 1 7 0">`),
  _tmpl$1595 = /*#__PURE__*/_$template(`<svg><path d="M10 2v8"></path><path d="M12.8 21.6A2 2 0 1 0 14 18H2"></path><path d="M17.5 10a2.5 2.5 0 1 1 2 4H2"></path><path d="m6 6 4 4 4-4">`),
  _tmpl$1596 = /*#__PURE__*/_$template(`<svg><path d="M12.8 19.6A2 2 0 1 0 14 16H2"></path><path d="M17.5 8a2.5 2.5 0 1 1 2 4H2"></path><path d="M9.8 4.4A2 2 0 1 1 11 8H2">`),
  _tmpl$1597 = /*#__PURE__*/_$template(`<svg><path d="M8 22h8"></path><path d="M7 10h3m7 0h-1.343"></path><path d="M12 15v7"></path><path d="M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198"></path><line x1=2 x2=22 y1=2 y2=22>`),
  _tmpl$1598 = /*#__PURE__*/_$template(`<svg><path d="M8 22h8"></path><path d="M7 10h10"></path><path d="M12 15v7"></path><path d="M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z">`),
  _tmpl$1599 = /*#__PURE__*/_$template(`<svg><rect width=8 height=8 x=3 y=3 rx=2></rect><path d="M7 11v4a2 2 0 0 0 2 2h4"></path><rect width=8 height=8 x=13 y=13 rx=2>`),
  _tmpl$1600 = /*#__PURE__*/_$template(`<svg><path d="m19 12-1.5 3"></path><path d="M19.63 18.81 22 20"></path><path d="M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z">`),
  _tmpl$1601 = /*#__PURE__*/_$template(`<svg><path d="m16 16-2 2 2 2"></path><path d="M3 12h15a3 3 0 1 1 0 6h-4"></path><path d="M3 18h7"></path><path d="M3 6h18">`),
  _tmpl$1602 = /*#__PURE__*/_$template(`<svg><path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z">`),
  _tmpl$1603 = /*#__PURE__*/_$template(`<svg><path d="M18 6 6 18"></path><path d="m6 6 12 12">`),
  _tmpl$1604 = /*#__PURE__*/_$template(`<svg><path d="M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17"></path><path d="m10 15 5-3-5-3z">`),
  _tmpl$1605 = /*#__PURE__*/_$template(`<svg><path d="M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317"></path><path d="M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773"></path><path d="M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643"></path><path d="m2 2 20 20">`),
  _tmpl$1606 = /*#__PURE__*/_$template(`<svg><path d="M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z">`),
  _tmpl$1607 = /*#__PURE__*/_$template(`<svg><circle cx=11 cy=11 r=8></circle><line x1=21 x2=16.65 y1=21 y2=16.65></line><line x1=11 x2=11 y1=8 y2=14></line><line x1=8 x2=14 y1=11 y2=11>`),
  _tmpl$1608 = /*#__PURE__*/_$template(`<svg><circle cx=11 cy=11 r=8></circle><line x1=21 x2=16.65 y1=21 y2=16.65></line><line x1=8 x2=14 y1=11 y2=11>`);
// AUTO-GENERATED FILE. DO NOT EDIT BY HAND.
// Icon set: lucide | License: ISC (ISC_URL)
import { mergeProps } from 'solid-js';
import { lucideDefaultProps } from './lucidedefaultProps';
export function LucideAArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$ = _$getNextElement(_tmpl$);
    _$spread(_el$, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$;
  })();
}
export function LucideAArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$2 = _$getNextElement(_tmpl$2);
    _$spread(_el$2, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$2;
  })();
}
export function LucideALargeSmall(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$3 = _$getNextElement(_tmpl$3);
    _$spread(_el$3, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$3;
  })();
}
export function LucideAccessibility(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$4 = _$getNextElement(_tmpl$4);
    _$spread(_el$4, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$4;
  })();
}
export function LucideActivity(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$5 = _$getNextElement(_tmpl$5);
    _$spread(_el$5, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$5;
  })();
}
export function LucideAirVent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$6 = _$getNextElement(_tmpl$6);
    _$spread(_el$6, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$6;
  })();
}
export function LucideAirplay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$7 = _$getNextElement(_tmpl$7);
    _$spread(_el$7, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$7;
  })();
}
export function LucideAlarmClockCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$8 = _$getNextElement(_tmpl$8);
    _$spread(_el$8, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$8;
  })();
}
export function LucideAlarmClockMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$9 = _$getNextElement(_tmpl$9);
    _$spread(_el$9, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$9;
  })();
}
export function LucideAlarmClockOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$0 = _$getNextElement(_tmpl$0);
    _$spread(_el$0, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$0;
  })();
}
export function LucideAlarmClockPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1 = _$getNextElement(_tmpl$1);
    _$spread(_el$1, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1;
  })();
}
export function LucideAlarmClock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$10 = _$getNextElement(_tmpl$10);
    _$spread(_el$10, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$10;
  })();
}
export function LucideAlarmSmoke(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$11 = _$getNextElement(_tmpl$11);
    _$spread(_el$11, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$11;
  })();
}
export function LucideAlbum(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$12 = _$getNextElement(_tmpl$12);
    _$spread(_el$12, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$12;
  })();
}
export function LucideAlignCenterHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$13 = _$getNextElement(_tmpl$13);
    _$spread(_el$13, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$13;
  })();
}
export function LucideAlignCenterVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$14 = _$getNextElement(_tmpl$14);
    _$spread(_el$14, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$14;
  })();
}
export function LucideAlignCenter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$15 = _$getNextElement(_tmpl$15);
    _$spread(_el$15, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$15;
  })();
}
export function LucideAlignEndHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$16 = _$getNextElement(_tmpl$16);
    _$spread(_el$16, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$16;
  })();
}
export function LucideAlignEndVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$17 = _$getNextElement(_tmpl$17);
    _$spread(_el$17, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$17;
  })();
}
export function LucideAlignHorizontalDistributeCenter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$18 = _$getNextElement(_tmpl$18);
    _$spread(_el$18, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$18;
  })();
}
export function LucideAlignHorizontalDistributeEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$19 = _$getNextElement(_tmpl$19);
    _$spread(_el$19, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$19;
  })();
}
export function LucideAlignHorizontalDistributeStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$20 = _$getNextElement(_tmpl$20);
    _$spread(_el$20, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$20;
  })();
}
export function LucideAlignHorizontalJustifyCenter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$21 = _$getNextElement(_tmpl$21);
    _$spread(_el$21, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$21;
  })();
}
export function LucideAlignHorizontalJustifyEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$22 = _$getNextElement(_tmpl$22);
    _$spread(_el$22, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$22;
  })();
}
export function LucideAlignHorizontalJustifyStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$23 = _$getNextElement(_tmpl$23);
    _$spread(_el$23, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$23;
  })();
}
export function LucideAlignHorizontalSpaceAround(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$24 = _$getNextElement(_tmpl$24);
    _$spread(_el$24, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$24;
  })();
}
export function LucideAlignHorizontalSpaceBetween(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$25 = _$getNextElement(_tmpl$25);
    _$spread(_el$25, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$25;
  })();
}
export function LucideAlignJustify(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$26 = _$getNextElement(_tmpl$26);
    _$spread(_el$26, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$26;
  })();
}
export function LucideAlignLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$27 = _$getNextElement(_tmpl$27);
    _$spread(_el$27, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$27;
  })();
}
export function LucideAlignRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$28 = _$getNextElement(_tmpl$28);
    _$spread(_el$28, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$28;
  })();
}
export function LucideAlignStartHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$29 = _$getNextElement(_tmpl$29);
    _$spread(_el$29, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$29;
  })();
}
export function LucideAlignStartVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$30 = _$getNextElement(_tmpl$30);
    _$spread(_el$30, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$30;
  })();
}
export function LucideAlignVerticalDistributeCenter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$31 = _$getNextElement(_tmpl$31);
    _$spread(_el$31, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$31;
  })();
}
export function LucideAlignVerticalDistributeEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$32 = _$getNextElement(_tmpl$32);
    _$spread(_el$32, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$32;
  })();
}
export function LucideAlignVerticalDistributeStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$33 = _$getNextElement(_tmpl$33);
    _$spread(_el$33, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$33;
  })();
}
export function LucideAlignVerticalJustifyCenter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$34 = _$getNextElement(_tmpl$34);
    _$spread(_el$34, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$34;
  })();
}
export function LucideAlignVerticalJustifyEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$35 = _$getNextElement(_tmpl$35);
    _$spread(_el$35, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$35;
  })();
}
export function LucideAlignVerticalJustifyStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$36 = _$getNextElement(_tmpl$36);
    _$spread(_el$36, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$36;
  })();
}
export function LucideAlignVerticalSpaceAround(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$37 = _$getNextElement(_tmpl$37);
    _$spread(_el$37, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$37;
  })();
}
export function LucideAlignVerticalSpaceBetween(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$38 = _$getNextElement(_tmpl$38);
    _$spread(_el$38, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$38;
  })();
}
export function LucideAmbulance(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$39 = _$getNextElement(_tmpl$39);
    _$spread(_el$39, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$39;
  })();
}
export function LucideAmpersand(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$40 = _$getNextElement(_tmpl$40);
    _$spread(_el$40, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$40;
  })();
}
export function LucideAmpersands(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$41 = _$getNextElement(_tmpl$41);
    _$spread(_el$41, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$41;
  })();
}
export function LucideAmphora(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$42 = _$getNextElement(_tmpl$42);
    _$spread(_el$42, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$42;
  })();
}
export function LucideAnchor(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$43 = _$getNextElement(_tmpl$43);
    _$spread(_el$43, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$43;
  })();
}
export function LucideAngry(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$44 = _$getNextElement(_tmpl$44);
    _$spread(_el$44, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$44;
  })();
}
export function LucideAnnoyed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$45 = _$getNextElement(_tmpl$45);
    _$spread(_el$45, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$45;
  })();
}
export function LucideAntenna(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$46 = _$getNextElement(_tmpl$46);
    _$spread(_el$46, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$46;
  })();
}
export function LucideAnvil(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$47 = _$getNextElement(_tmpl$47);
    _$spread(_el$47, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$47;
  })();
}
export function LucideAperture(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$48 = _$getNextElement(_tmpl$48);
    _$spread(_el$48, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$48;
  })();
}
export function LucideAppWindowMac(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$49 = _$getNextElement(_tmpl$49);
    _$spread(_el$49, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$49;
  })();
}
export function LucideAppWindow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$50 = _$getNextElement(_tmpl$50);
    _$spread(_el$50, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$50;
  })();
}
export function LucideApple(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$51 = _$getNextElement(_tmpl$51);
    _$spread(_el$51, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$51;
  })();
}
export function LucideArchiveRestore(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$52 = _$getNextElement(_tmpl$52);
    _$spread(_el$52, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$52;
  })();
}
export function LucideArchiveX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$53 = _$getNextElement(_tmpl$53);
    _$spread(_el$53, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$53;
  })();
}
export function LucideArchive(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$54 = _$getNextElement(_tmpl$54);
    _$spread(_el$54, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$54;
  })();
}
export function LucideArmchair(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$55 = _$getNextElement(_tmpl$55);
    _$spread(_el$55, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$55;
  })();
}
export function LucideArrowBigDownDash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$56 = _$getNextElement(_tmpl$56);
    _$spread(_el$56, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$56;
  })();
}
export function LucideArrowBigDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$57 = _$getNextElement(_tmpl$57);
    _$spread(_el$57, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$57;
  })();
}
export function LucideArrowBigLeftDash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$58 = _$getNextElement(_tmpl$58);
    _$spread(_el$58, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$58;
  })();
}
export function LucideArrowBigLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$59 = _$getNextElement(_tmpl$59);
    _$spread(_el$59, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$59;
  })();
}
export function LucideArrowBigRightDash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$60 = _$getNextElement(_tmpl$60);
    _$spread(_el$60, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$60;
  })();
}
export function LucideArrowBigRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$61 = _$getNextElement(_tmpl$61);
    _$spread(_el$61, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$61;
  })();
}
export function LucideArrowBigUpDash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$62 = _$getNextElement(_tmpl$62);
    _$spread(_el$62, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$62;
  })();
}
export function LucideArrowBigUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$63 = _$getNextElement(_tmpl$63);
    _$spread(_el$63, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$63;
  })();
}
export function LucideArrowDown01(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$64 = _$getNextElement(_tmpl$64);
    _$spread(_el$64, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$64;
  })();
}
export function LucideArrowDown10(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$65 = _$getNextElement(_tmpl$65);
    _$spread(_el$65, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$65;
  })();
}
export function LucideArrowDownAZ(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$66 = _$getNextElement(_tmpl$66);
    _$spread(_el$66, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$66;
  })();
}
export function LucideArrowDownFromLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$67 = _$getNextElement(_tmpl$67);
    _$spread(_el$67, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$67;
  })();
}
export function LucideArrowDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$68 = _$getNextElement(_tmpl$68);
    _$spread(_el$68, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$68;
  })();
}
export function LucideArrowDownNarrowWide(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$69 = _$getNextElement(_tmpl$69);
    _$spread(_el$69, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$69;
  })();
}
export function LucideArrowDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$70 = _$getNextElement(_tmpl$70);
    _$spread(_el$70, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$70;
  })();
}
export function LucideArrowDownToDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$71 = _$getNextElement(_tmpl$71);
    _$spread(_el$71, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$71;
  })();
}
export function LucideArrowDownToLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$72 = _$getNextElement(_tmpl$72);
    _$spread(_el$72, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$72;
  })();
}
export function LucideArrowDownUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$73 = _$getNextElement(_tmpl$73);
    _$spread(_el$73, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$73;
  })();
}
export function LucideArrowDownWideNarrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$74 = _$getNextElement(_tmpl$74);
    _$spread(_el$74, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$74;
  })();
}
export function LucideArrowDownZA(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$75 = _$getNextElement(_tmpl$75);
    _$spread(_el$75, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$75;
  })();
}
export function LucideArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$76 = _$getNextElement(_tmpl$76);
    _$spread(_el$76, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$76;
  })();
}
export function LucideArrowLeftFromLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$77 = _$getNextElement(_tmpl$77);
    _$spread(_el$77, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$77;
  })();
}
export function LucideArrowLeftRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$78 = _$getNextElement(_tmpl$78);
    _$spread(_el$78, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$78;
  })();
}
export function LucideArrowLeftToLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$79 = _$getNextElement(_tmpl$79);
    _$spread(_el$79, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$79;
  })();
}
export function LucideArrowLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$80 = _$getNextElement(_tmpl$80);
    _$spread(_el$80, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$80;
  })();
}
export function LucideArrowRightFromLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$81 = _$getNextElement(_tmpl$81);
    _$spread(_el$81, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$81;
  })();
}
export function LucideArrowRightLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$82 = _$getNextElement(_tmpl$82);
    _$spread(_el$82, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$82;
  })();
}
export function LucideArrowRightToLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$83 = _$getNextElement(_tmpl$83);
    _$spread(_el$83, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$83;
  })();
}
export function LucideArrowRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$84 = _$getNextElement(_tmpl$84);
    _$spread(_el$84, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$84;
  })();
}
export function LucideArrowUp01(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$85 = _$getNextElement(_tmpl$85);
    _$spread(_el$85, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$85;
  })();
}
export function LucideArrowUp10(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$86 = _$getNextElement(_tmpl$86);
    _$spread(_el$86, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$86;
  })();
}
export function LucideArrowUpAZ(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$87 = _$getNextElement(_tmpl$87);
    _$spread(_el$87, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$87;
  })();
}
export function LucideArrowUpDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$88 = _$getNextElement(_tmpl$88);
    _$spread(_el$88, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$88;
  })();
}
export function LucideArrowUpFromDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$89 = _$getNextElement(_tmpl$89);
    _$spread(_el$89, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$89;
  })();
}
export function LucideArrowUpFromLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$90 = _$getNextElement(_tmpl$90);
    _$spread(_el$90, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$90;
  })();
}
export function LucideArrowUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$91 = _$getNextElement(_tmpl$91);
    _$spread(_el$91, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$91;
  })();
}
export function LucideArrowUpNarrowWide(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$92 = _$getNextElement(_tmpl$92);
    _$spread(_el$92, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$92;
  })();
}
export function LucideArrowUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$93 = _$getNextElement(_tmpl$93);
    _$spread(_el$93, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$93;
  })();
}
export function LucideArrowUpToLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$94 = _$getNextElement(_tmpl$94);
    _$spread(_el$94, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$94;
  })();
}
export function LucideArrowUpWideNarrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$95 = _$getNextElement(_tmpl$95);
    _$spread(_el$95, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$95;
  })();
}
export function LucideArrowUpZA(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$96 = _$getNextElement(_tmpl$96);
    _$spread(_el$96, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$96;
  })();
}
export function LucideArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$97 = _$getNextElement(_tmpl$97);
    _$spread(_el$97, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$97;
  })();
}
export function LucideArrowsUpFromLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$98 = _$getNextElement(_tmpl$98);
    _$spread(_el$98, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$98;
  })();
}
export function LucideAsterisk(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$99 = _$getNextElement(_tmpl$99);
    _$spread(_el$99, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$99;
  })();
}
export function LucideAtSign(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$100 = _$getNextElement(_tmpl$100);
    _$spread(_el$100, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$100;
  })();
}
export function LucideAtom(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$101 = _$getNextElement(_tmpl$101);
    _$spread(_el$101, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$101;
  })();
}
export function LucideAudioLines(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$102 = _$getNextElement(_tmpl$102);
    _$spread(_el$102, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$102;
  })();
}
export function LucideAudioWaveform(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$103 = _$getNextElement(_tmpl$103);
    _$spread(_el$103, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$103;
  })();
}
export function LucideAward(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$104 = _$getNextElement(_tmpl$104);
    _$spread(_el$104, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$104;
  })();
}
export function LucideAxe(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$105 = _$getNextElement(_tmpl$105);
    _$spread(_el$105, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$105;
  })();
}
export function LucideAxis3d(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$106 = _$getNextElement(_tmpl$106);
    _$spread(_el$106, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$106;
  })();
}
export function LucideBaby(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$107 = _$getNextElement(_tmpl$107);
    _$spread(_el$107, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$107;
  })();
}
export function LucideBackpack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$108 = _$getNextElement(_tmpl$108);
    _$spread(_el$108, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$108;
  })();
}
export function LucideBadgeAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$109 = _$getNextElement(_tmpl$109);
    _$spread(_el$109, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$109;
  })();
}
export function LucideBadgeCent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$110 = _$getNextElement(_tmpl$110);
    _$spread(_el$110, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$110;
  })();
}
export function LucideBadgeCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$111 = _$getNextElement(_tmpl$111);
    _$spread(_el$111, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$111;
  })();
}
export function LucideBadgeDollarSign(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$112 = _$getNextElement(_tmpl$112);
    _$spread(_el$112, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$112;
  })();
}
export function LucideBadgeEuro(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$113 = _$getNextElement(_tmpl$113);
    _$spread(_el$113, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$113;
  })();
}
export function LucideBadgeIndianRupee(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$114 = _$getNextElement(_tmpl$114);
    _$spread(_el$114, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$114;
  })();
}
export function LucideBadgeInfo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$115 = _$getNextElement(_tmpl$115);
    _$spread(_el$115, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$115;
  })();
}
export function LucideBadgeJapaneseYen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$116 = _$getNextElement(_tmpl$116);
    _$spread(_el$116, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$116;
  })();
}
export function LucideBadgeMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$117 = _$getNextElement(_tmpl$117);
    _$spread(_el$117, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$117;
  })();
}
export function LucideBadgePercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$118 = _$getNextElement(_tmpl$118);
    _$spread(_el$118, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$118;
  })();
}
export function LucideBadgePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$119 = _$getNextElement(_tmpl$119);
    _$spread(_el$119, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$119;
  })();
}
export function LucideBadgePoundSterling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$120 = _$getNextElement(_tmpl$120);
    _$spread(_el$120, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$120;
  })();
}
export function LucideBadgeQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$121 = _$getNextElement(_tmpl$121);
    _$spread(_el$121, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$121;
  })();
}
export function LucideBadgeRussianRuble(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$122 = _$getNextElement(_tmpl$122);
    _$spread(_el$122, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$122;
  })();
}
export function LucideBadgeSwissFranc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$123 = _$getNextElement(_tmpl$123);
    _$spread(_el$123, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$123;
  })();
}
export function LucideBadgeX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$124 = _$getNextElement(_tmpl$124);
    _$spread(_el$124, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$124;
  })();
}
export function LucideBadge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$125 = _$getNextElement(_tmpl$125);
    _$spread(_el$125, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$125;
  })();
}
export function LucideBaggageClaim(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$126 = _$getNextElement(_tmpl$126);
    _$spread(_el$126, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$126;
  })();
}
export function LucideBan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$127 = _$getNextElement(_tmpl$127);
    _$spread(_el$127, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$127;
  })();
}
export function LucideBanana(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$128 = _$getNextElement(_tmpl$128);
    _$spread(_el$128, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$128;
  })();
}
export function LucideBandage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$129 = _$getNextElement(_tmpl$129);
    _$spread(_el$129, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$129;
  })();
}
export function LucideBanknoteArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$130 = _$getNextElement(_tmpl$130);
    _$spread(_el$130, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$130;
  })();
}
export function LucideBanknoteArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$131 = _$getNextElement(_tmpl$131);
    _$spread(_el$131, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$131;
  })();
}
export function LucideBanknoteX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$132 = _$getNextElement(_tmpl$132);
    _$spread(_el$132, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$132;
  })();
}
export function LucideBanknote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$133 = _$getNextElement(_tmpl$133);
    _$spread(_el$133, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$133;
  })();
}
export function LucideBarcode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$134 = _$getNextElement(_tmpl$134);
    _$spread(_el$134, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$134;
  })();
}
export function LucideBarrel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$135 = _$getNextElement(_tmpl$135);
    _$spread(_el$135, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$135;
  })();
}
export function LucideBaseline(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$136 = _$getNextElement(_tmpl$136);
    _$spread(_el$136, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$136;
  })();
}
export function LucideBath(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$137 = _$getNextElement(_tmpl$137);
    _$spread(_el$137, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$137;
  })();
}
export function LucideBatteryCharging(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$138 = _$getNextElement(_tmpl$138);
    _$spread(_el$138, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$138;
  })();
}
export function LucideBatteryFull(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$139 = _$getNextElement(_tmpl$139);
    _$spread(_el$139, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$139;
  })();
}
export function LucideBatteryLow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$140 = _$getNextElement(_tmpl$140);
    _$spread(_el$140, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$140;
  })();
}
export function LucideBatteryMedium(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$141 = _$getNextElement(_tmpl$141);
    _$spread(_el$141, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$141;
  })();
}
export function LucideBatteryPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$142 = _$getNextElement(_tmpl$142);
    _$spread(_el$142, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$142;
  })();
}
export function LucideBatteryWarning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$143 = _$getNextElement(_tmpl$143);
    _$spread(_el$143, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$143;
  })();
}
export function LucideBattery(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$144 = _$getNextElement(_tmpl$144);
    _$spread(_el$144, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$144;
  })();
}
export function LucideBeaker(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$145 = _$getNextElement(_tmpl$145);
    _$spread(_el$145, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$145;
  })();
}
export function LucideBeanOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$146 = _$getNextElement(_tmpl$146);
    _$spread(_el$146, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$146;
  })();
}
export function LucideBean(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$147 = _$getNextElement(_tmpl$147);
    _$spread(_el$147, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$147;
  })();
}
export function LucideBedDouble(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$148 = _$getNextElement(_tmpl$148);
    _$spread(_el$148, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$148;
  })();
}
export function LucideBedSingle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$149 = _$getNextElement(_tmpl$149);
    _$spread(_el$149, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$149;
  })();
}
export function LucideBed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$150 = _$getNextElement(_tmpl$150);
    _$spread(_el$150, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$150;
  })();
}
export function LucideBeef(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$151 = _$getNextElement(_tmpl$151);
    _$spread(_el$151, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$151;
  })();
}
export function LucideBeerOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$152 = _$getNextElement(_tmpl$152);
    _$spread(_el$152, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$152;
  })();
}
export function LucideBeer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$153 = _$getNextElement(_tmpl$153);
    _$spread(_el$153, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$153;
  })();
}
export function LucideBellDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$154 = _$getNextElement(_tmpl$154);
    _$spread(_el$154, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$154;
  })();
}
export function LucideBellElectric(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$155 = _$getNextElement(_tmpl$155);
    _$spread(_el$155, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$155;
  })();
}
export function LucideBellMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$156 = _$getNextElement(_tmpl$156);
    _$spread(_el$156, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$156;
  })();
}
export function LucideBellOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$157 = _$getNextElement(_tmpl$157);
    _$spread(_el$157, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$157;
  })();
}
export function LucideBellPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$158 = _$getNextElement(_tmpl$158);
    _$spread(_el$158, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$158;
  })();
}
export function LucideBellRing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$159 = _$getNextElement(_tmpl$159);
    _$spread(_el$159, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$159;
  })();
}
export function LucideBell(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$160 = _$getNextElement(_tmpl$160);
    _$spread(_el$160, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$160;
  })();
}
export function LucideBetweenHorizontalEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$161 = _$getNextElement(_tmpl$161);
    _$spread(_el$161, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$161;
  })();
}
export function LucideBetweenHorizontalStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$162 = _$getNextElement(_tmpl$162);
    _$spread(_el$162, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$162;
  })();
}
export function LucideBetweenVerticalEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$163 = _$getNextElement(_tmpl$163);
    _$spread(_el$163, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$163;
  })();
}
export function LucideBetweenVerticalStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$164 = _$getNextElement(_tmpl$164);
    _$spread(_el$164, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$164;
  })();
}
export function LucideBicepsFlexed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$165 = _$getNextElement(_tmpl$165);
    _$spread(_el$165, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$165;
  })();
}
export function LucideBike(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$166 = _$getNextElement(_tmpl$166);
    _$spread(_el$166, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$166;
  })();
}
export function LucideBinary(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$167 = _$getNextElement(_tmpl$167);
    _$spread(_el$167, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$167;
  })();
}
export function LucideBinoculars(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$168 = _$getNextElement(_tmpl$168);
    _$spread(_el$168, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$168;
  })();
}
export function LucideBiohazard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$169 = _$getNextElement(_tmpl$169);
    _$spread(_el$169, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$169;
  })();
}
export function LucideBird(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$170 = _$getNextElement(_tmpl$170);
    _$spread(_el$170, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$170;
  })();
}
export function LucideBitcoin(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$171 = _$getNextElement(_tmpl$171);
    _$spread(_el$171, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$171;
  })();
}
export function LucideBlend(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$172 = _$getNextElement(_tmpl$172);
    _$spread(_el$172, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$172;
  })();
}
export function LucideBlinds(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$173 = _$getNextElement(_tmpl$173);
    _$spread(_el$173, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$173;
  })();
}
export function LucideBlocks(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$174 = _$getNextElement(_tmpl$174);
    _$spread(_el$174, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$174;
  })();
}
export function LucideBluetoothConnected(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$175 = _$getNextElement(_tmpl$175);
    _$spread(_el$175, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$175;
  })();
}
export function LucideBluetoothOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$176 = _$getNextElement(_tmpl$176);
    _$spread(_el$176, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$176;
  })();
}
export function LucideBluetoothSearching(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$177 = _$getNextElement(_tmpl$177);
    _$spread(_el$177, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$177;
  })();
}
export function LucideBluetooth(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$178 = _$getNextElement(_tmpl$178);
    _$spread(_el$178, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$178;
  })();
}
export function LucideBold(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$179 = _$getNextElement(_tmpl$179);
    _$spread(_el$179, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$179;
  })();
}
export function LucideBolt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$180 = _$getNextElement(_tmpl$180);
    _$spread(_el$180, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$180;
  })();
}
export function LucideBomb(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$181 = _$getNextElement(_tmpl$181);
    _$spread(_el$181, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$181;
  })();
}
export function LucideBone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$182 = _$getNextElement(_tmpl$182);
    _$spread(_el$182, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$182;
  })();
}
export function LucideBookA(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$183 = _$getNextElement(_tmpl$183);
    _$spread(_el$183, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$183;
  })();
}
export function LucideBookAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$184 = _$getNextElement(_tmpl$184);
    _$spread(_el$184, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$184;
  })();
}
export function LucideBookAudio(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$185 = _$getNextElement(_tmpl$185);
    _$spread(_el$185, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$185;
  })();
}
export function LucideBookCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$186 = _$getNextElement(_tmpl$186);
    _$spread(_el$186, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$186;
  })();
}
export function LucideBookCopy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$187 = _$getNextElement(_tmpl$187);
    _$spread(_el$187, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$187;
  })();
}
export function LucideBookDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$188 = _$getNextElement(_tmpl$188);
    _$spread(_el$188, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$188;
  })();
}
export function LucideBookDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$189 = _$getNextElement(_tmpl$189);
    _$spread(_el$189, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$189;
  })();
}
export function LucideBookHeadphones(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$190 = _$getNextElement(_tmpl$190);
    _$spread(_el$190, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$190;
  })();
}
export function LucideBookHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$191 = _$getNextElement(_tmpl$191);
    _$spread(_el$191, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$191;
  })();
}
export function LucideBookImage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$192 = _$getNextElement(_tmpl$192);
    _$spread(_el$192, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$192;
  })();
}
export function LucideBookKey(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$193 = _$getNextElement(_tmpl$193);
    _$spread(_el$193, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$193;
  })();
}
export function LucideBookLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$194 = _$getNextElement(_tmpl$194);
    _$spread(_el$194, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$194;
  })();
}
export function LucideBookMarked(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$195 = _$getNextElement(_tmpl$195);
    _$spread(_el$195, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$195;
  })();
}
export function LucideBookMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$196 = _$getNextElement(_tmpl$196);
    _$spread(_el$196, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$196;
  })();
}
export function LucideBookOpenCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$197 = _$getNextElement(_tmpl$197);
    _$spread(_el$197, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$197;
  })();
}
export function LucideBookOpenText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$198 = _$getNextElement(_tmpl$198);
    _$spread(_el$198, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$198;
  })();
}
export function LucideBookOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$199 = _$getNextElement(_tmpl$199);
    _$spread(_el$199, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$199;
  })();
}
export function LucideBookPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$200 = _$getNextElement(_tmpl$200);
    _$spread(_el$200, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$200;
  })();
}
export function LucideBookText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$201 = _$getNextElement(_tmpl$201);
    _$spread(_el$201, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$201;
  })();
}
export function LucideBookType(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$202 = _$getNextElement(_tmpl$202);
    _$spread(_el$202, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$202;
  })();
}
export function LucideBookUp2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$203 = _$getNextElement(_tmpl$203);
    _$spread(_el$203, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$203;
  })();
}
export function LucideBookUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$204 = _$getNextElement(_tmpl$204);
    _$spread(_el$204, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$204;
  })();
}
export function LucideBookUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$205 = _$getNextElement(_tmpl$205);
    _$spread(_el$205, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$205;
  })();
}
export function LucideBookX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$206 = _$getNextElement(_tmpl$206);
    _$spread(_el$206, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$206;
  })();
}
export function LucideBook(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$207 = _$getNextElement(_tmpl$207);
    _$spread(_el$207, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$207;
  })();
}
export function LucideBookmarkCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$208 = _$getNextElement(_tmpl$208);
    _$spread(_el$208, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$208;
  })();
}
export function LucideBookmarkMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$209 = _$getNextElement(_tmpl$209);
    _$spread(_el$209, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$209;
  })();
}
export function LucideBookmarkPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$210 = _$getNextElement(_tmpl$210);
    _$spread(_el$210, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$210;
  })();
}
export function LucideBookmarkX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$211 = _$getNextElement(_tmpl$211);
    _$spread(_el$211, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$211;
  })();
}
export function LucideBookmark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$212 = _$getNextElement(_tmpl$212);
    _$spread(_el$212, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$212;
  })();
}
export function LucideBoomBox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$213 = _$getNextElement(_tmpl$213);
    _$spread(_el$213, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$213;
  })();
}
export function LucideBotMessageSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$214 = _$getNextElement(_tmpl$214);
    _$spread(_el$214, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$214;
  })();
}
export function LucideBotOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$215 = _$getNextElement(_tmpl$215);
    _$spread(_el$215, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$215;
  })();
}
export function LucideBot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$216 = _$getNextElement(_tmpl$216);
    _$spread(_el$216, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$216;
  })();
}
export function LucideBottleWine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$217 = _$getNextElement(_tmpl$217);
    _$spread(_el$217, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$217;
  })();
}
export function LucideBowArrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$218 = _$getNextElement(_tmpl$218);
    _$spread(_el$218, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$218;
  })();
}
export function LucideBox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$219 = _$getNextElement(_tmpl$219);
    _$spread(_el$219, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$219;
  })();
}
export function LucideBoxes(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$220 = _$getNextElement(_tmpl$220);
    _$spread(_el$220, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$220;
  })();
}
export function LucideBraces(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$221 = _$getNextElement(_tmpl$221);
    _$spread(_el$221, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$221;
  })();
}
export function LucideBrackets(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$222 = _$getNextElement(_tmpl$222);
    _$spread(_el$222, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$222;
  })();
}
export function LucideBrainCircuit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$223 = _$getNextElement(_tmpl$223);
    _$spread(_el$223, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$223;
  })();
}
export function LucideBrainCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$224 = _$getNextElement(_tmpl$224);
    _$spread(_el$224, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$224;
  })();
}
export function LucideBrain(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$225 = _$getNextElement(_tmpl$225);
    _$spread(_el$225, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$225;
  })();
}
export function LucideBrickWallFire(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$226 = _$getNextElement(_tmpl$226);
    _$spread(_el$226, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$226;
  })();
}
export function LucideBrickWall(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$227 = _$getNextElement(_tmpl$227);
    _$spread(_el$227, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$227;
  })();
}
export function LucideBriefcaseBusiness(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$228 = _$getNextElement(_tmpl$228);
    _$spread(_el$228, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$228;
  })();
}
export function LucideBriefcaseConveyorBelt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$229 = _$getNextElement(_tmpl$229);
    _$spread(_el$229, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$229;
  })();
}
export function LucideBriefcaseMedical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$230 = _$getNextElement(_tmpl$230);
    _$spread(_el$230, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$230;
  })();
}
export function LucideBriefcase(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$231 = _$getNextElement(_tmpl$231);
    _$spread(_el$231, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$231;
  })();
}
export function LucideBringToFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$232 = _$getNextElement(_tmpl$232);
    _$spread(_el$232, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$232;
  })();
}
export function LucideBrushCleaning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$233 = _$getNextElement(_tmpl$233);
    _$spread(_el$233, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$233;
  })();
}
export function LucideBrush(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$234 = _$getNextElement(_tmpl$234);
    _$spread(_el$234, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$234;
  })();
}
export function LucideBubbles(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$235 = _$getNextElement(_tmpl$235);
    _$spread(_el$235, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$235;
  })();
}
export function LucideBugOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$236 = _$getNextElement(_tmpl$236);
    _$spread(_el$236, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$236;
  })();
}
export function LucideBugPlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$237 = _$getNextElement(_tmpl$237);
    _$spread(_el$237, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$237;
  })();
}
export function LucideBug(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$238 = _$getNextElement(_tmpl$238);
    _$spread(_el$238, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$238;
  })();
}
export function LucideBuilding2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$239 = _$getNextElement(_tmpl$239);
    _$spread(_el$239, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$239;
  })();
}
export function LucideBuilding(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$240 = _$getNextElement(_tmpl$240);
    _$spread(_el$240, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$240;
  })();
}
export function LucideBusFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$241 = _$getNextElement(_tmpl$241);
    _$spread(_el$241, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$241;
  })();
}
export function LucideBus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$242 = _$getNextElement(_tmpl$242);
    _$spread(_el$242, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$242;
  })();
}
export function LucideCableCar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$243 = _$getNextElement(_tmpl$243);
    _$spread(_el$243, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$243;
  })();
}
export function LucideCable(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$244 = _$getNextElement(_tmpl$244);
    _$spread(_el$244, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$244;
  })();
}
export function LucideCakeSlice(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$245 = _$getNextElement(_tmpl$245);
    _$spread(_el$245, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$245;
  })();
}
export function LucideCake(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$246 = _$getNextElement(_tmpl$246);
    _$spread(_el$246, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$246;
  })();
}
export function LucideCalculator(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$247 = _$getNextElement(_tmpl$247);
    _$spread(_el$247, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$247;
  })();
}
export function LucideCalendar1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$248 = _$getNextElement(_tmpl$248);
    _$spread(_el$248, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$248;
  })();
}
export function LucideCalendarArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$249 = _$getNextElement(_tmpl$249);
    _$spread(_el$249, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$249;
  })();
}
export function LucideCalendarArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$250 = _$getNextElement(_tmpl$250);
    _$spread(_el$250, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$250;
  })();
}
export function LucideCalendarCheck2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$251 = _$getNextElement(_tmpl$251);
    _$spread(_el$251, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$251;
  })();
}
export function LucideCalendarCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$252 = _$getNextElement(_tmpl$252);
    _$spread(_el$252, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$252;
  })();
}
export function LucideCalendarClock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$253 = _$getNextElement(_tmpl$253);
    _$spread(_el$253, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$253;
  })();
}
export function LucideCalendarCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$254 = _$getNextElement(_tmpl$254);
    _$spread(_el$254, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$254;
  })();
}
export function LucideCalendarDays(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$255 = _$getNextElement(_tmpl$255);
    _$spread(_el$255, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$255;
  })();
}
export function LucideCalendarFold(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$256 = _$getNextElement(_tmpl$256);
    _$spread(_el$256, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$256;
  })();
}
export function LucideCalendarHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$257 = _$getNextElement(_tmpl$257);
    _$spread(_el$257, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$257;
  })();
}
export function LucideCalendarMinus2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$258 = _$getNextElement(_tmpl$258);
    _$spread(_el$258, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$258;
  })();
}
export function LucideCalendarMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$259 = _$getNextElement(_tmpl$259);
    _$spread(_el$259, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$259;
  })();
}
export function LucideCalendarOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$260 = _$getNextElement(_tmpl$260);
    _$spread(_el$260, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$260;
  })();
}
export function LucideCalendarPlus2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$261 = _$getNextElement(_tmpl$261);
    _$spread(_el$261, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$261;
  })();
}
export function LucideCalendarPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$262 = _$getNextElement(_tmpl$262);
    _$spread(_el$262, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$262;
  })();
}
export function LucideCalendarRange(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$263 = _$getNextElement(_tmpl$263);
    _$spread(_el$263, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$263;
  })();
}
export function LucideCalendarSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$264 = _$getNextElement(_tmpl$264);
    _$spread(_el$264, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$264;
  })();
}
export function LucideCalendarSync(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$265 = _$getNextElement(_tmpl$265);
    _$spread(_el$265, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$265;
  })();
}
export function LucideCalendarX2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$266 = _$getNextElement(_tmpl$266);
    _$spread(_el$266, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$266;
  })();
}
export function LucideCalendarX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$267 = _$getNextElement(_tmpl$267);
    _$spread(_el$267, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$267;
  })();
}
export function LucideCalendar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$268 = _$getNextElement(_tmpl$268);
    _$spread(_el$268, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$268;
  })();
}
export function LucideCameraOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$269 = _$getNextElement(_tmpl$269);
    _$spread(_el$269, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$269;
  })();
}
export function LucideCamera(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$270 = _$getNextElement(_tmpl$270);
    _$spread(_el$270, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$270;
  })();
}
export function LucideCandyCane(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$271 = _$getNextElement(_tmpl$271);
    _$spread(_el$271, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$271;
  })();
}
export function LucideCandyOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$272 = _$getNextElement(_tmpl$272);
    _$spread(_el$272, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$272;
  })();
}
export function LucideCandy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$273 = _$getNextElement(_tmpl$273);
    _$spread(_el$273, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$273;
  })();
}
export function LucideCannabis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$274 = _$getNextElement(_tmpl$274);
    _$spread(_el$274, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$274;
  })();
}
export function LucideCaptionsOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$275 = _$getNextElement(_tmpl$275);
    _$spread(_el$275, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$275;
  })();
}
export function LucideCaptions(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$276 = _$getNextElement(_tmpl$276);
    _$spread(_el$276, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$276;
  })();
}
export function LucideCarFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$277 = _$getNextElement(_tmpl$277);
    _$spread(_el$277, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$277;
  })();
}
export function LucideCarTaxiFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$278 = _$getNextElement(_tmpl$278);
    _$spread(_el$278, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$278;
  })();
}
export function LucideCar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$279 = _$getNextElement(_tmpl$279);
    _$spread(_el$279, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$279;
  })();
}
export function LucideCaravan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$280 = _$getNextElement(_tmpl$280);
    _$spread(_el$280, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$280;
  })();
}
export function LucideCardSim(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$281 = _$getNextElement(_tmpl$281);
    _$spread(_el$281, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$281;
  })();
}
export function LucideCarrot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$282 = _$getNextElement(_tmpl$282);
    _$spread(_el$282, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$282;
  })();
}
export function LucideCaseLower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$283 = _$getNextElement(_tmpl$283);
    _$spread(_el$283, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$283;
  })();
}
export function LucideCaseSensitive(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$284 = _$getNextElement(_tmpl$284);
    _$spread(_el$284, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$284;
  })();
}
export function LucideCaseUpper(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$285 = _$getNextElement(_tmpl$285);
    _$spread(_el$285, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$285;
  })();
}
export function LucideCassetteTape(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$286 = _$getNextElement(_tmpl$286);
    _$spread(_el$286, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$286;
  })();
}
export function LucideCast(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$287 = _$getNextElement(_tmpl$287);
    _$spread(_el$287, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$287;
  })();
}
export function LucideCastle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$288 = _$getNextElement(_tmpl$288);
    _$spread(_el$288, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$288;
  })();
}
export function LucideCat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$289 = _$getNextElement(_tmpl$289);
    _$spread(_el$289, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$289;
  })();
}
export function LucideCctv(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$290 = _$getNextElement(_tmpl$290);
    _$spread(_el$290, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$290;
  })();
}
export function LucideChartArea(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$291 = _$getNextElement(_tmpl$291);
    _$spread(_el$291, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$291;
  })();
}
export function LucideChartBarBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$292 = _$getNextElement(_tmpl$292);
    _$spread(_el$292, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$292;
  })();
}
export function LucideChartBarDecreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$293 = _$getNextElement(_tmpl$293);
    _$spread(_el$293, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$293;
  })();
}
export function LucideChartBarIncreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$294 = _$getNextElement(_tmpl$294);
    _$spread(_el$294, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$294;
  })();
}
export function LucideChartBarStacked(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$295 = _$getNextElement(_tmpl$295);
    _$spread(_el$295, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$295;
  })();
}
export function LucideChartBar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$296 = _$getNextElement(_tmpl$296);
    _$spread(_el$296, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$296;
  })();
}
export function LucideChartCandlestick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$297 = _$getNextElement(_tmpl$297);
    _$spread(_el$297, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$297;
  })();
}
export function LucideChartColumnBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$298 = _$getNextElement(_tmpl$298);
    _$spread(_el$298, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$298;
  })();
}
export function LucideChartColumnDecreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$299 = _$getNextElement(_tmpl$299);
    _$spread(_el$299, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$299;
  })();
}
export function LucideChartColumnIncreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$300 = _$getNextElement(_tmpl$300);
    _$spread(_el$300, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$300;
  })();
}
export function LucideChartColumnStacked(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$301 = _$getNextElement(_tmpl$301);
    _$spread(_el$301, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$301;
  })();
}
export function LucideChartColumn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$302 = _$getNextElement(_tmpl$302);
    _$spread(_el$302, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$302;
  })();
}
export function LucideChartGantt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$303 = _$getNextElement(_tmpl$303);
    _$spread(_el$303, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$303;
  })();
}
export function LucideChartLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$304 = _$getNextElement(_tmpl$304);
    _$spread(_el$304, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$304;
  })();
}
export function LucideChartNetwork(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$305 = _$getNextElement(_tmpl$305);
    _$spread(_el$305, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$305;
  })();
}
export function LucideChartNoAxesColumnDecreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$306 = _$getNextElement(_tmpl$306);
    _$spread(_el$306, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$306;
  })();
}
export function LucideChartNoAxesColumnIncreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$307 = _$getNextElement(_tmpl$307);
    _$spread(_el$307, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$307;
  })();
}
export function LucideChartNoAxesColumn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$308 = _$getNextElement(_tmpl$308);
    _$spread(_el$308, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$308;
  })();
}
export function LucideChartNoAxesCombined(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$309 = _$getNextElement(_tmpl$309);
    _$spread(_el$309, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$309;
  })();
}
export function LucideChartNoAxesGantt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$310 = _$getNextElement(_tmpl$310);
    _$spread(_el$310, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$310;
  })();
}
export function LucideChartPie(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$311 = _$getNextElement(_tmpl$311);
    _$spread(_el$311, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$311;
  })();
}
export function LucideChartScatter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$312 = _$getNextElement(_tmpl$312);
    _$spread(_el$312, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$312;
  })();
}
export function LucideChartSpline(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$313 = _$getNextElement(_tmpl$313);
    _$spread(_el$313, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$313;
  })();
}
export function LucideCheckCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$314 = _$getNextElement(_tmpl$314);
    _$spread(_el$314, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$314;
  })();
}
export function LucideCheckLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$315 = _$getNextElement(_tmpl$315);
    _$spread(_el$315, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$315;
  })();
}
export function LucideCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$316 = _$getNextElement(_tmpl$316);
    _$spread(_el$316, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$316;
  })();
}
export function LucideChefHat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$317 = _$getNextElement(_tmpl$317);
    _$spread(_el$317, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$317;
  })();
}
export function LucideCherry(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$318 = _$getNextElement(_tmpl$318);
    _$spread(_el$318, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$318;
  })();
}
export function LucideChevronDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$319 = _$getNextElement(_tmpl$319);
    _$spread(_el$319, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$319;
  })();
}
export function LucideChevronFirst(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$320 = _$getNextElement(_tmpl$320);
    _$spread(_el$320, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$320;
  })();
}
export function LucideChevronLast(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$321 = _$getNextElement(_tmpl$321);
    _$spread(_el$321, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$321;
  })();
}
export function LucideChevronLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$322 = _$getNextElement(_tmpl$322);
    _$spread(_el$322, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$322;
  })();
}
export function LucideChevronRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$323 = _$getNextElement(_tmpl$323);
    _$spread(_el$323, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$323;
  })();
}
export function LucideChevronUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$324 = _$getNextElement(_tmpl$324);
    _$spread(_el$324, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$324;
  })();
}
export function LucideChevronsDownUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$325 = _$getNextElement(_tmpl$325);
    _$spread(_el$325, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$325;
  })();
}
export function LucideChevronsDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$326 = _$getNextElement(_tmpl$326);
    _$spread(_el$326, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$326;
  })();
}
export function LucideChevronsLeftRightEllipsis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$327 = _$getNextElement(_tmpl$327);
    _$spread(_el$327, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$327;
  })();
}
export function LucideChevronsLeftRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$328 = _$getNextElement(_tmpl$328);
    _$spread(_el$328, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$328;
  })();
}
export function LucideChevronsLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$329 = _$getNextElement(_tmpl$329);
    _$spread(_el$329, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$329;
  })();
}
export function LucideChevronsRightLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$330 = _$getNextElement(_tmpl$330);
    _$spread(_el$330, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$330;
  })();
}
export function LucideChevronsRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$331 = _$getNextElement(_tmpl$331);
    _$spread(_el$331, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$331;
  })();
}
export function LucideChevronsUpDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$332 = _$getNextElement(_tmpl$332);
    _$spread(_el$332, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$332;
  })();
}
export function LucideChevronsUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$333 = _$getNextElement(_tmpl$333);
    _$spread(_el$333, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$333;
  })();
}
export function LucideChrome(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$334 = _$getNextElement(_tmpl$334);
    _$spread(_el$334, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$334;
  })();
}
export function LucideChurch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$335 = _$getNextElement(_tmpl$335);
    _$spread(_el$335, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$335;
  })();
}
export function LucideCigaretteOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$336 = _$getNextElement(_tmpl$336);
    _$spread(_el$336, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$336;
  })();
}
export function LucideCigarette(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$337 = _$getNextElement(_tmpl$337);
    _$spread(_el$337, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$337;
  })();
}
export function LucideCircleAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$338 = _$getNextElement(_tmpl$338);
    _$spread(_el$338, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$338;
  })();
}
export function LucideCircleArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$339 = _$getNextElement(_tmpl$339);
    _$spread(_el$339, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$339;
  })();
}
export function LucideCircleArrowLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$340 = _$getNextElement(_tmpl$340);
    _$spread(_el$340, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$340;
  })();
}
export function LucideCircleArrowOutDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$341 = _$getNextElement(_tmpl$341);
    _$spread(_el$341, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$341;
  })();
}
export function LucideCircleArrowOutDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$342 = _$getNextElement(_tmpl$342);
    _$spread(_el$342, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$342;
  })();
}
export function LucideCircleArrowOutUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$343 = _$getNextElement(_tmpl$343);
    _$spread(_el$343, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$343;
  })();
}
export function LucideCircleArrowOutUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$344 = _$getNextElement(_tmpl$344);
    _$spread(_el$344, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$344;
  })();
}
export function LucideCircleArrowRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$345 = _$getNextElement(_tmpl$345);
    _$spread(_el$345, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$345;
  })();
}
export function LucideCircleArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$346 = _$getNextElement(_tmpl$346);
    _$spread(_el$346, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$346;
  })();
}
export function LucideCircleCheckBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$347 = _$getNextElement(_tmpl$347);
    _$spread(_el$347, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$347;
  })();
}
export function LucideCircleCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$348 = _$getNextElement(_tmpl$348);
    _$spread(_el$348, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$348;
  })();
}
export function LucideCircleChevronDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$349 = _$getNextElement(_tmpl$349);
    _$spread(_el$349, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$349;
  })();
}
export function LucideCircleChevronLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$350 = _$getNextElement(_tmpl$350);
    _$spread(_el$350, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$350;
  })();
}
export function LucideCircleChevronRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$351 = _$getNextElement(_tmpl$351);
    _$spread(_el$351, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$351;
  })();
}
export function LucideCircleChevronUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$352 = _$getNextElement(_tmpl$352);
    _$spread(_el$352, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$352;
  })();
}
export function LucideCircleDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$353 = _$getNextElement(_tmpl$353);
    _$spread(_el$353, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$353;
  })();
}
export function LucideCircleDivide(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$354 = _$getNextElement(_tmpl$354);
    _$spread(_el$354, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$354;
  })();
}
export function LucideCircleDollarSign(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$355 = _$getNextElement(_tmpl$355);
    _$spread(_el$355, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$355;
  })();
}
export function LucideCircleDotDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$356 = _$getNextElement(_tmpl$356);
    _$spread(_el$356, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$356;
  })();
}
export function LucideCircleDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$357 = _$getNextElement(_tmpl$357);
    _$spread(_el$357, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$357;
  })();
}
export function LucideCircleEllipsis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$358 = _$getNextElement(_tmpl$358);
    _$spread(_el$358, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$358;
  })();
}
export function LucideCircleEqual(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$359 = _$getNextElement(_tmpl$359);
    _$spread(_el$359, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$359;
  })();
}
export function LucideCircleFadingArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$360 = _$getNextElement(_tmpl$360);
    _$spread(_el$360, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$360;
  })();
}
export function LucideCircleFadingPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$361 = _$getNextElement(_tmpl$361);
    _$spread(_el$361, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$361;
  })();
}
export function LucideCircleGauge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$362 = _$getNextElement(_tmpl$362);
    _$spread(_el$362, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$362;
  })();
}
export function LucideCircleMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$363 = _$getNextElement(_tmpl$363);
    _$spread(_el$363, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$363;
  })();
}
export function LucideCircleOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$364 = _$getNextElement(_tmpl$364);
    _$spread(_el$364, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$364;
  })();
}
export function LucideCircleParkingOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$365 = _$getNextElement(_tmpl$365);
    _$spread(_el$365, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$365;
  })();
}
export function LucideCircleParking(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$366 = _$getNextElement(_tmpl$366);
    _$spread(_el$366, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$366;
  })();
}
export function LucideCirclePause(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$367 = _$getNextElement(_tmpl$367);
    _$spread(_el$367, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$367;
  })();
}
export function LucideCirclePercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$368 = _$getNextElement(_tmpl$368);
    _$spread(_el$368, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$368;
  })();
}
export function LucideCirclePlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$369 = _$getNextElement(_tmpl$369);
    _$spread(_el$369, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$369;
  })();
}
export function LucideCirclePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$370 = _$getNextElement(_tmpl$370);
    _$spread(_el$370, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$370;
  })();
}
export function LucideCirclePoundSterling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$371 = _$getNextElement(_tmpl$371);
    _$spread(_el$371, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$371;
  })();
}
export function LucideCirclePower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$372 = _$getNextElement(_tmpl$372);
    _$spread(_el$372, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$372;
  })();
}
export function LucideCircleQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$373 = _$getNextElement(_tmpl$373);
    _$spread(_el$373, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$373;
  })();
}
export function LucideCircleSlash2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$374 = _$getNextElement(_tmpl$374);
    _$spread(_el$374, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$374;
  })();
}
export function LucideCircleSlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$375 = _$getNextElement(_tmpl$375);
    _$spread(_el$375, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$375;
  })();
}
export function LucideCircleSmall(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$376 = _$getNextElement(_tmpl$376);
    _$spread(_el$376, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$376;
  })();
}
export function LucideCircleStop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$377 = _$getNextElement(_tmpl$377);
    _$spread(_el$377, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$377;
  })();
}
export function LucideCircleUserRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$378 = _$getNextElement(_tmpl$378);
    _$spread(_el$378, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$378;
  })();
}
export function LucideCircleUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$379 = _$getNextElement(_tmpl$379);
    _$spread(_el$379, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$379;
  })();
}
export function LucideCircleX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$380 = _$getNextElement(_tmpl$380);
    _$spread(_el$380, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$380;
  })();
}
export function LucideCircle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$381 = _$getNextElement(_tmpl$381);
    _$spread(_el$381, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$381;
  })();
}
export function LucideCircuitBoard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$382 = _$getNextElement(_tmpl$382);
    _$spread(_el$382, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$382;
  })();
}
export function LucideCitrus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$383 = _$getNextElement(_tmpl$383);
    _$spread(_el$383, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$383;
  })();
}
export function LucideClapperboard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$384 = _$getNextElement(_tmpl$384);
    _$spread(_el$384, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$384;
  })();
}
export function LucideClipboardCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$385 = _$getNextElement(_tmpl$385);
    _$spread(_el$385, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$385;
  })();
}
export function LucideClipboardCopy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$386 = _$getNextElement(_tmpl$386);
    _$spread(_el$386, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$386;
  })();
}
export function LucideClipboardList(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$387 = _$getNextElement(_tmpl$387);
    _$spread(_el$387, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$387;
  })();
}
export function LucideClipboardMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$388 = _$getNextElement(_tmpl$388);
    _$spread(_el$388, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$388;
  })();
}
export function LucideClipboardPaste(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$389 = _$getNextElement(_tmpl$389);
    _$spread(_el$389, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$389;
  })();
}
export function LucideClipboardPenLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$390 = _$getNextElement(_tmpl$390);
    _$spread(_el$390, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$390;
  })();
}
export function LucideClipboardPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$391 = _$getNextElement(_tmpl$391);
    _$spread(_el$391, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$391;
  })();
}
export function LucideClipboardPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$392 = _$getNextElement(_tmpl$392);
    _$spread(_el$392, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$392;
  })();
}
export function LucideClipboardType(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$393 = _$getNextElement(_tmpl$393);
    _$spread(_el$393, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$393;
  })();
}
export function LucideClipboardX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$394 = _$getNextElement(_tmpl$394);
    _$spread(_el$394, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$394;
  })();
}
export function LucideClipboard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$395 = _$getNextElement(_tmpl$395);
    _$spread(_el$395, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$395;
  })();
}
export function LucideClock1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$396 = _$getNextElement(_tmpl$396);
    _$spread(_el$396, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$396;
  })();
}
export function LucideClock10(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$397 = _$getNextElement(_tmpl$397);
    _$spread(_el$397, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$397;
  })();
}
export function LucideClock11(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$398 = _$getNextElement(_tmpl$398);
    _$spread(_el$398, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$398;
  })();
}
export function LucideClock12(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$399 = _$getNextElement(_tmpl$399);
    _$spread(_el$399, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$399;
  })();
}
export function LucideClock2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$400 = _$getNextElement(_tmpl$400);
    _$spread(_el$400, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$400;
  })();
}
export function LucideClock3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$401 = _$getNextElement(_tmpl$401);
    _$spread(_el$401, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$401;
  })();
}
export function LucideClock4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$402 = _$getNextElement(_tmpl$402);
    _$spread(_el$402, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$402;
  })();
}
export function LucideClock5(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$403 = _$getNextElement(_tmpl$403);
    _$spread(_el$403, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$403;
  })();
}
export function LucideClock6(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$404 = _$getNextElement(_tmpl$404);
    _$spread(_el$404, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$404;
  })();
}
export function LucideClock7(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$405 = _$getNextElement(_tmpl$405);
    _$spread(_el$405, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$405;
  })();
}
export function LucideClock8(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$406 = _$getNextElement(_tmpl$406);
    _$spread(_el$406, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$406;
  })();
}
export function LucideClock9(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$407 = _$getNextElement(_tmpl$407);
    _$spread(_el$407, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$407;
  })();
}
export function LucideClockAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$408 = _$getNextElement(_tmpl$408);
    _$spread(_el$408, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$408;
  })();
}
export function LucideClockArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$409 = _$getNextElement(_tmpl$409);
    _$spread(_el$409, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$409;
  })();
}
export function LucideClockArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$410 = _$getNextElement(_tmpl$410);
    _$spread(_el$410, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$410;
  })();
}
export function LucideClockFading(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$411 = _$getNextElement(_tmpl$411);
    _$spread(_el$411, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$411;
  })();
}
export function LucideClockPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$412 = _$getNextElement(_tmpl$412);
    _$spread(_el$412, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$412;
  })();
}
export function LucideClock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$413 = _$getNextElement(_tmpl$402);
    _$spread(_el$413, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$413;
  })();
}
export function LucideCloudAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$414 = _$getNextElement(_tmpl$413);
    _$spread(_el$414, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$414;
  })();
}
export function LucideCloudCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$415 = _$getNextElement(_tmpl$414);
    _$spread(_el$415, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$415;
  })();
}
export function LucideCloudCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$416 = _$getNextElement(_tmpl$415);
    _$spread(_el$416, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$416;
  })();
}
export function LucideCloudDownload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$417 = _$getNextElement(_tmpl$416);
    _$spread(_el$417, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$417;
  })();
}
export function LucideCloudDrizzle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$418 = _$getNextElement(_tmpl$417);
    _$spread(_el$418, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$418;
  })();
}
export function LucideCloudFog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$419 = _$getNextElement(_tmpl$418);
    _$spread(_el$419, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$419;
  })();
}
export function LucideCloudHail(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$420 = _$getNextElement(_tmpl$419);
    _$spread(_el$420, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$420;
  })();
}
export function LucideCloudLightning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$421 = _$getNextElement(_tmpl$420);
    _$spread(_el$421, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$421;
  })();
}
export function LucideCloudMoonRain(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$422 = _$getNextElement(_tmpl$421);
    _$spread(_el$422, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$422;
  })();
}
export function LucideCloudMoon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$423 = _$getNextElement(_tmpl$422);
    _$spread(_el$423, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$423;
  })();
}
export function LucideCloudOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$424 = _$getNextElement(_tmpl$423);
    _$spread(_el$424, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$424;
  })();
}
export function LucideCloudRainWind(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$425 = _$getNextElement(_tmpl$424);
    _$spread(_el$425, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$425;
  })();
}
export function LucideCloudRain(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$426 = _$getNextElement(_tmpl$425);
    _$spread(_el$426, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$426;
  })();
}
export function LucideCloudSnow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$427 = _$getNextElement(_tmpl$426);
    _$spread(_el$427, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$427;
  })();
}
export function LucideCloudSunRain(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$428 = _$getNextElement(_tmpl$427);
    _$spread(_el$428, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$428;
  })();
}
export function LucideCloudSun(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$429 = _$getNextElement(_tmpl$428);
    _$spread(_el$429, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$429;
  })();
}
export function LucideCloudUpload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$430 = _$getNextElement(_tmpl$429);
    _$spread(_el$430, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$430;
  })();
}
export function LucideCloud(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$431 = _$getNextElement(_tmpl$430);
    _$spread(_el$431, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$431;
  })();
}
export function LucideCloudy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$432 = _$getNextElement(_tmpl$431);
    _$spread(_el$432, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$432;
  })();
}
export function LucideClover(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$433 = _$getNextElement(_tmpl$432);
    _$spread(_el$433, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$433;
  })();
}
export function LucideClub(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$434 = _$getNextElement(_tmpl$433);
    _$spread(_el$434, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$434;
  })();
}
export function LucideCodeXml(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$435 = _$getNextElement(_tmpl$434);
    _$spread(_el$435, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$435;
  })();
}
export function LucideCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$436 = _$getNextElement(_tmpl$435);
    _$spread(_el$436, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$436;
  })();
}
export function LucideCodepen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$437 = _$getNextElement(_tmpl$436);
    _$spread(_el$437, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$437;
  })();
}
export function LucideCodesandbox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$438 = _$getNextElement(_tmpl$437);
    _$spread(_el$438, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$438;
  })();
}
export function LucideCoffee(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$439 = _$getNextElement(_tmpl$438);
    _$spread(_el$439, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$439;
  })();
}
export function LucideCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$440 = _$getNextElement(_tmpl$439);
    _$spread(_el$440, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$440;
  })();
}
export function LucideCoins(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$441 = _$getNextElement(_tmpl$440);
    _$spread(_el$441, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$441;
  })();
}
export function LucideColumns2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$442 = _$getNextElement(_tmpl$441);
    _$spread(_el$442, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$442;
  })();
}
export function LucideColumns3Cog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$443 = _$getNextElement(_tmpl$442);
    _$spread(_el$443, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$443;
  })();
}
export function LucideColumns3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$444 = _$getNextElement(_tmpl$443);
    _$spread(_el$444, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$444;
  })();
}
export function LucideColumns4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$445 = _$getNextElement(_tmpl$444);
    _$spread(_el$445, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$445;
  })();
}
export function LucideCombine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$446 = _$getNextElement(_tmpl$445);
    _$spread(_el$446, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$446;
  })();
}
export function LucideCommand(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$447 = _$getNextElement(_tmpl$446);
    _$spread(_el$447, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$447;
  })();
}
export function LucideCompass(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$448 = _$getNextElement(_tmpl$447);
    _$spread(_el$448, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$448;
  })();
}
export function LucideComponent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$449 = _$getNextElement(_tmpl$448);
    _$spread(_el$449, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$449;
  })();
}
export function LucideComputer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$450 = _$getNextElement(_tmpl$449);
    _$spread(_el$450, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$450;
  })();
}
export function LucideConciergeBell(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$451 = _$getNextElement(_tmpl$450);
    _$spread(_el$451, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$451;
  })();
}
export function LucideCone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$452 = _$getNextElement(_tmpl$451);
    _$spread(_el$452, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$452;
  })();
}
export function LucideConstruction(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$453 = _$getNextElement(_tmpl$452);
    _$spread(_el$453, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$453;
  })();
}
export function LucideContactRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$454 = _$getNextElement(_tmpl$453);
    _$spread(_el$454, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$454;
  })();
}
export function LucideContact(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$455 = _$getNextElement(_tmpl$454);
    _$spread(_el$455, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$455;
  })();
}
export function LucideContainer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$456 = _$getNextElement(_tmpl$455);
    _$spread(_el$456, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$456;
  })();
}
export function LucideContrast(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$457 = _$getNextElement(_tmpl$456);
    _$spread(_el$457, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$457;
  })();
}
export function LucideCookie(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$458 = _$getNextElement(_tmpl$457);
    _$spread(_el$458, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$458;
  })();
}
export function LucideCookingPot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$459 = _$getNextElement(_tmpl$458);
    _$spread(_el$459, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$459;
  })();
}
export function LucideCopyCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$460 = _$getNextElement(_tmpl$459);
    _$spread(_el$460, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$460;
  })();
}
export function LucideCopyMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$461 = _$getNextElement(_tmpl$460);
    _$spread(_el$461, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$461;
  })();
}
export function LucideCopyPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$462 = _$getNextElement(_tmpl$461);
    _$spread(_el$462, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$462;
  })();
}
export function LucideCopySlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$463 = _$getNextElement(_tmpl$462);
    _$spread(_el$463, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$463;
  })();
}
export function LucideCopyX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$464 = _$getNextElement(_tmpl$463);
    _$spread(_el$464, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$464;
  })();
}
export function LucideCopy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$465 = _$getNextElement(_tmpl$464);
    _$spread(_el$465, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$465;
  })();
}
export function LucideCopyleft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$466 = _$getNextElement(_tmpl$465);
    _$spread(_el$466, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$466;
  })();
}
export function LucideCopyright(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$467 = _$getNextElement(_tmpl$466);
    _$spread(_el$467, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$467;
  })();
}
export function LucideCornerDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$468 = _$getNextElement(_tmpl$467);
    _$spread(_el$468, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$468;
  })();
}
export function LucideCornerDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$469 = _$getNextElement(_tmpl$468);
    _$spread(_el$469, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$469;
  })();
}
export function LucideCornerLeftDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$470 = _$getNextElement(_tmpl$469);
    _$spread(_el$470, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$470;
  })();
}
export function LucideCornerLeftUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$471 = _$getNextElement(_tmpl$470);
    _$spread(_el$471, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$471;
  })();
}
export function LucideCornerRightDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$472 = _$getNextElement(_tmpl$471);
    _$spread(_el$472, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$472;
  })();
}
export function LucideCornerRightUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$473 = _$getNextElement(_tmpl$472);
    _$spread(_el$473, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$473;
  })();
}
export function LucideCornerUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$474 = _$getNextElement(_tmpl$473);
    _$spread(_el$474, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$474;
  })();
}
export function LucideCornerUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$475 = _$getNextElement(_tmpl$474);
    _$spread(_el$475, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$475;
  })();
}
export function LucideCpu(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$476 = _$getNextElement(_tmpl$475);
    _$spread(_el$476, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$476;
  })();
}
export function LucideCreativeCommons(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$477 = _$getNextElement(_tmpl$476);
    _$spread(_el$477, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$477;
  })();
}
export function LucideCreditCard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$478 = _$getNextElement(_tmpl$477);
    _$spread(_el$478, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$478;
  })();
}
export function LucideCroissant(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$479 = _$getNextElement(_tmpl$478);
    _$spread(_el$479, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$479;
  })();
}
export function LucideCrop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$480 = _$getNextElement(_tmpl$479);
    _$spread(_el$480, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$480;
  })();
}
export function LucideCross(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$481 = _$getNextElement(_tmpl$480);
    _$spread(_el$481, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$481;
  })();
}
export function LucideCrosshair(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$482 = _$getNextElement(_tmpl$481);
    _$spread(_el$482, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$482;
  })();
}
export function LucideCrown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$483 = _$getNextElement(_tmpl$482);
    _$spread(_el$483, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$483;
  })();
}
export function LucideCuboid(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$484 = _$getNextElement(_tmpl$483);
    _$spread(_el$484, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$484;
  })();
}
export function LucideCupSoda(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$485 = _$getNextElement(_tmpl$484);
    _$spread(_el$485, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$485;
  })();
}
export function LucideCurrency(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$486 = _$getNextElement(_tmpl$485);
    _$spread(_el$486, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$486;
  })();
}
export function LucideCylinder(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$487 = _$getNextElement(_tmpl$486);
    _$spread(_el$487, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$487;
  })();
}
export function LucideDam(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$488 = _$getNextElement(_tmpl$487);
    _$spread(_el$488, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$488;
  })();
}
export function LucideDatabaseBackup(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$489 = _$getNextElement(_tmpl$488);
    _$spread(_el$489, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$489;
  })();
}
export function LucideDatabaseZap(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$490 = _$getNextElement(_tmpl$489);
    _$spread(_el$490, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$490;
  })();
}
export function LucideDatabase(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$491 = _$getNextElement(_tmpl$490);
    _$spread(_el$491, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$491;
  })();
}
export function LucideDecimalsArrowLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$492 = _$getNextElement(_tmpl$491);
    _$spread(_el$492, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$492;
  })();
}
export function LucideDecimalsArrowRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$493 = _$getNextElement(_tmpl$492);
    _$spread(_el$493, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$493;
  })();
}
export function LucideDelete(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$494 = _$getNextElement(_tmpl$493);
    _$spread(_el$494, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$494;
  })();
}
export function LucideDessert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$495 = _$getNextElement(_tmpl$494);
    _$spread(_el$495, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$495;
  })();
}
export function LucideDiameter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$496 = _$getNextElement(_tmpl$495);
    _$spread(_el$496, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$496;
  })();
}
export function LucideDiamondMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$497 = _$getNextElement(_tmpl$496);
    _$spread(_el$497, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$497;
  })();
}
export function LucideDiamondPercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$498 = _$getNextElement(_tmpl$497);
    _$spread(_el$498, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$498;
  })();
}
export function LucideDiamondPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$499 = _$getNextElement(_tmpl$498);
    _$spread(_el$499, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$499;
  })();
}
export function LucideDiamond(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$500 = _$getNextElement(_tmpl$499);
    _$spread(_el$500, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$500;
  })();
}
export function LucideDice1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$501 = _$getNextElement(_tmpl$500);
    _$spread(_el$501, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$501;
  })();
}
export function LucideDice2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$502 = _$getNextElement(_tmpl$501);
    _$spread(_el$502, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$502;
  })();
}
export function LucideDice3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$503 = _$getNextElement(_tmpl$502);
    _$spread(_el$503, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$503;
  })();
}
export function LucideDice4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$504 = _$getNextElement(_tmpl$503);
    _$spread(_el$504, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$504;
  })();
}
export function LucideDice5(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$505 = _$getNextElement(_tmpl$504);
    _$spread(_el$505, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$505;
  })();
}
export function LucideDice6(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$506 = _$getNextElement(_tmpl$505);
    _$spread(_el$506, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$506;
  })();
}
export function LucideDices(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$507 = _$getNextElement(_tmpl$506);
    _$spread(_el$507, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$507;
  })();
}
export function LucideDiff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$508 = _$getNextElement(_tmpl$507);
    _$spread(_el$508, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$508;
  })();
}
export function LucideDisc2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$509 = _$getNextElement(_tmpl$508);
    _$spread(_el$509, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$509;
  })();
}
export function LucideDisc3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$510 = _$getNextElement(_tmpl$509);
    _$spread(_el$510, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$510;
  })();
}
export function LucideDiscAlbum(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$511 = _$getNextElement(_tmpl$510);
    _$spread(_el$511, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$511;
  })();
}
export function LucideDisc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$512 = _$getNextElement(_tmpl$511);
    _$spread(_el$512, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$512;
  })();
}
export function LucideDivide(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$513 = _$getNextElement(_tmpl$512);
    _$spread(_el$513, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$513;
  })();
}
export function LucideDnaOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$514 = _$getNextElement(_tmpl$513);
    _$spread(_el$514, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$514;
  })();
}
export function LucideDna(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$515 = _$getNextElement(_tmpl$514);
    _$spread(_el$515, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$515;
  })();
}
export function LucideDock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$516 = _$getNextElement(_tmpl$515);
    _$spread(_el$516, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$516;
  })();
}
export function LucideDog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$517 = _$getNextElement(_tmpl$516);
    _$spread(_el$517, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$517;
  })();
}
export function LucideDollarSign(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$518 = _$getNextElement(_tmpl$517);
    _$spread(_el$518, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$518;
  })();
}
export function LucideDonut(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$519 = _$getNextElement(_tmpl$518);
    _$spread(_el$519, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$519;
  })();
}
export function LucideDoorClosedLocked(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$520 = _$getNextElement(_tmpl$519);
    _$spread(_el$520, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$520;
  })();
}
export function LucideDoorClosed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$521 = _$getNextElement(_tmpl$520);
    _$spread(_el$521, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$521;
  })();
}
export function LucideDoorOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$522 = _$getNextElement(_tmpl$521);
    _$spread(_el$522, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$522;
  })();
}
export function LucideDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$523 = _$getNextElement(_tmpl$522);
    _$spread(_el$523, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$523;
  })();
}
export function LucideDownload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$524 = _$getNextElement(_tmpl$523);
    _$spread(_el$524, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$524;
  })();
}
export function LucideDraftingCompass(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$525 = _$getNextElement(_tmpl$524);
    _$spread(_el$525, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$525;
  })();
}
export function LucideDrama(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$526 = _$getNextElement(_tmpl$525);
    _$spread(_el$526, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$526;
  })();
}
export function LucideDribbble(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$527 = _$getNextElement(_tmpl$526);
    _$spread(_el$527, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$527;
  })();
}
export function LucideDrill(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$528 = _$getNextElement(_tmpl$527);
    _$spread(_el$528, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$528;
  })();
}
export function LucideDrone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$529 = _$getNextElement(_tmpl$528);
    _$spread(_el$529, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$529;
  })();
}
export function LucideDropletOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$530 = _$getNextElement(_tmpl$529);
    _$spread(_el$530, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$530;
  })();
}
export function LucideDroplet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$531 = _$getNextElement(_tmpl$530);
    _$spread(_el$531, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$531;
  })();
}
export function LucideDroplets(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$532 = _$getNextElement(_tmpl$531);
    _$spread(_el$532, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$532;
  })();
}
export function LucideDrum(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$533 = _$getNextElement(_tmpl$532);
    _$spread(_el$533, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$533;
  })();
}
export function LucideDrumstick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$534 = _$getNextElement(_tmpl$533);
    _$spread(_el$534, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$534;
  })();
}
export function LucideDumbbell(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$535 = _$getNextElement(_tmpl$534);
    _$spread(_el$535, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$535;
  })();
}
export function LucideEarOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$536 = _$getNextElement(_tmpl$535);
    _$spread(_el$536, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$536;
  })();
}
export function LucideEar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$537 = _$getNextElement(_tmpl$536);
    _$spread(_el$537, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$537;
  })();
}
export function LucideEarthLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$538 = _$getNextElement(_tmpl$537);
    _$spread(_el$538, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$538;
  })();
}
export function LucideEarth(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$539 = _$getNextElement(_tmpl$538);
    _$spread(_el$539, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$539;
  })();
}
export function LucideEclipse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$540 = _$getNextElement(_tmpl$539);
    _$spread(_el$540, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$540;
  })();
}
export function LucideEggFried(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$541 = _$getNextElement(_tmpl$540);
    _$spread(_el$541, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$541;
  })();
}
export function LucideEggOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$542 = _$getNextElement(_tmpl$541);
    _$spread(_el$542, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$542;
  })();
}
export function LucideEgg(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$543 = _$getNextElement(_tmpl$542);
    _$spread(_el$543, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$543;
  })();
}
export function LucideEllipsisVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$544 = _$getNextElement(_tmpl$543);
    _$spread(_el$544, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$544;
  })();
}
export function LucideEllipsis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$545 = _$getNextElement(_tmpl$544);
    _$spread(_el$545, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$545;
  })();
}
export function LucideEqualApproximately(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$546 = _$getNextElement(_tmpl$545);
    _$spread(_el$546, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$546;
  })();
}
export function LucideEqualNot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$547 = _$getNextElement(_tmpl$546);
    _$spread(_el$547, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$547;
  })();
}
export function LucideEqual(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$548 = _$getNextElement(_tmpl$547);
    _$spread(_el$548, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$548;
  })();
}
export function LucideEraser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$549 = _$getNextElement(_tmpl$548);
    _$spread(_el$549, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$549;
  })();
}
export function LucideEthernetPort(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$550 = _$getNextElement(_tmpl$549);
    _$spread(_el$550, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$550;
  })();
}
export function LucideEuro(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$551 = _$getNextElement(_tmpl$550);
    _$spread(_el$551, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$551;
  })();
}
export function LucideExpand(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$552 = _$getNextElement(_tmpl$551);
    _$spread(_el$552, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$552;
  })();
}
export function LucideExternalLink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$553 = _$getNextElement(_tmpl$552);
    _$spread(_el$553, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$553;
  })();
}
export function LucideEyeClosed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$554 = _$getNextElement(_tmpl$553);
    _$spread(_el$554, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$554;
  })();
}
export function LucideEyeOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$555 = _$getNextElement(_tmpl$554);
    _$spread(_el$555, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$555;
  })();
}
export function LucideEye(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$556 = _$getNextElement(_tmpl$555);
    _$spread(_el$556, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$556;
  })();
}
export function LucideFacebook(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$557 = _$getNextElement(_tmpl$556);
    _$spread(_el$557, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$557;
  })();
}
export function LucideFactory(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$558 = _$getNextElement(_tmpl$557);
    _$spread(_el$558, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$558;
  })();
}
export function LucideFan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$559 = _$getNextElement(_tmpl$558);
    _$spread(_el$559, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$559;
  })();
}
export function LucideFastForward(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$560 = _$getNextElement(_tmpl$559);
    _$spread(_el$560, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$560;
  })();
}
export function LucideFeather(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$561 = _$getNextElement(_tmpl$560);
    _$spread(_el$561, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$561;
  })();
}
export function LucideFence(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$562 = _$getNextElement(_tmpl$561);
    _$spread(_el$562, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$562;
  })();
}
export function LucideFerrisWheel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$563 = _$getNextElement(_tmpl$562);
    _$spread(_el$563, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$563;
  })();
}
export function LucideFigma(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$564 = _$getNextElement(_tmpl$563);
    _$spread(_el$564, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$564;
  })();
}
export function LucideFileArchive(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$565 = _$getNextElement(_tmpl$564);
    _$spread(_el$565, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$565;
  })();
}
export function LucideFileAudio2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$566 = _$getNextElement(_tmpl$565);
    _$spread(_el$566, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$566;
  })();
}
export function LucideFileAudio(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$567 = _$getNextElement(_tmpl$566);
    _$spread(_el$567, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$567;
  })();
}
export function LucideFileAxis3d(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$568 = _$getNextElement(_tmpl$567);
    _$spread(_el$568, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$568;
  })();
}
export function LucideFileBadge2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$569 = _$getNextElement(_tmpl$568);
    _$spread(_el$569, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$569;
  })();
}
export function LucideFileBadge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$570 = _$getNextElement(_tmpl$569);
    _$spread(_el$570, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$570;
  })();
}
export function LucideFileBox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$571 = _$getNextElement(_tmpl$570);
    _$spread(_el$571, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$571;
  })();
}
export function LucideFileChartColumnIncreasing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$572 = _$getNextElement(_tmpl$571);
    _$spread(_el$572, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$572;
  })();
}
export function LucideFileChartColumn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$573 = _$getNextElement(_tmpl$572);
    _$spread(_el$573, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$573;
  })();
}
export function LucideFileChartLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$574 = _$getNextElement(_tmpl$573);
    _$spread(_el$574, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$574;
  })();
}
export function LucideFileChartPie(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$575 = _$getNextElement(_tmpl$574);
    _$spread(_el$575, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$575;
  })();
}
export function LucideFileCheck2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$576 = _$getNextElement(_tmpl$575);
    _$spread(_el$576, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$576;
  })();
}
export function LucideFileCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$577 = _$getNextElement(_tmpl$576);
    _$spread(_el$577, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$577;
  })();
}
export function LucideFileClock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$578 = _$getNextElement(_tmpl$577);
    _$spread(_el$578, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$578;
  })();
}
export function LucideFileCode2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$579 = _$getNextElement(_tmpl$578);
    _$spread(_el$579, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$579;
  })();
}
export function LucideFileCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$580 = _$getNextElement(_tmpl$579);
    _$spread(_el$580, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$580;
  })();
}
export function LucideFileCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$581 = _$getNextElement(_tmpl$580);
    _$spread(_el$581, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$581;
  })();
}
export function LucideFileDiff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$582 = _$getNextElement(_tmpl$581);
    _$spread(_el$582, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$582;
  })();
}
export function LucideFileDigit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$583 = _$getNextElement(_tmpl$582);
    _$spread(_el$583, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$583;
  })();
}
export function LucideFileDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$584 = _$getNextElement(_tmpl$583);
    _$spread(_el$584, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$584;
  })();
}
export function LucideFileHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$585 = _$getNextElement(_tmpl$584);
    _$spread(_el$585, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$585;
  })();
}
export function LucideFileImage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$586 = _$getNextElement(_tmpl$585);
    _$spread(_el$586, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$586;
  })();
}
export function LucideFileInput(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$587 = _$getNextElement(_tmpl$586);
    _$spread(_el$587, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$587;
  })();
}
export function LucideFileJson2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$588 = _$getNextElement(_tmpl$587);
    _$spread(_el$588, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$588;
  })();
}
export function LucideFileJson(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$589 = _$getNextElement(_tmpl$588);
    _$spread(_el$589, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$589;
  })();
}
export function LucideFileKey2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$590 = _$getNextElement(_tmpl$589);
    _$spread(_el$590, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$590;
  })();
}
export function LucideFileKey(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$591 = _$getNextElement(_tmpl$590);
    _$spread(_el$591, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$591;
  })();
}
export function LucideFileLock2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$592 = _$getNextElement(_tmpl$591);
    _$spread(_el$592, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$592;
  })();
}
export function LucideFileLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$593 = _$getNextElement(_tmpl$592);
    _$spread(_el$593, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$593;
  })();
}
export function LucideFileMinus2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$594 = _$getNextElement(_tmpl$593);
    _$spread(_el$594, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$594;
  })();
}
export function LucideFileMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$595 = _$getNextElement(_tmpl$594);
    _$spread(_el$595, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$595;
  })();
}
export function LucideFileMusic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$596 = _$getNextElement(_tmpl$595);
    _$spread(_el$596, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$596;
  })();
}
export function LucideFileOutput(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$597 = _$getNextElement(_tmpl$596);
    _$spread(_el$597, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$597;
  })();
}
export function LucideFilePenLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$598 = _$getNextElement(_tmpl$597);
    _$spread(_el$598, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$598;
  })();
}
export function LucideFilePen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$599 = _$getNextElement(_tmpl$598);
    _$spread(_el$599, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$599;
  })();
}
export function LucideFilePlus2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$600 = _$getNextElement(_tmpl$599);
    _$spread(_el$600, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$600;
  })();
}
export function LucideFilePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$601 = _$getNextElement(_tmpl$600);
    _$spread(_el$601, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$601;
  })();
}
export function LucideFileQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$602 = _$getNextElement(_tmpl$601);
    _$spread(_el$602, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$602;
  })();
}
export function LucideFileScan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$603 = _$getNextElement(_tmpl$602);
    _$spread(_el$603, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$603;
  })();
}
export function LucideFileSearch2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$604 = _$getNextElement(_tmpl$603);
    _$spread(_el$604, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$604;
  })();
}
export function LucideFileSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$605 = _$getNextElement(_tmpl$604);
    _$spread(_el$605, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$605;
  })();
}
export function LucideFileSliders(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$606 = _$getNextElement(_tmpl$605);
    _$spread(_el$606, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$606;
  })();
}
export function LucideFileSpreadsheet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$607 = _$getNextElement(_tmpl$606);
    _$spread(_el$607, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$607;
  })();
}
export function LucideFileStack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$608 = _$getNextElement(_tmpl$607);
    _$spread(_el$608, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$608;
  })();
}
export function LucideFileSymlink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$609 = _$getNextElement(_tmpl$608);
    _$spread(_el$609, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$609;
  })();
}
export function LucideFileTerminal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$610 = _$getNextElement(_tmpl$609);
    _$spread(_el$610, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$610;
  })();
}
export function LucideFileText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$611 = _$getNextElement(_tmpl$610);
    _$spread(_el$611, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$611;
  })();
}
export function LucideFileType2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$612 = _$getNextElement(_tmpl$611);
    _$spread(_el$612, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$612;
  })();
}
export function LucideFileType(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$613 = _$getNextElement(_tmpl$612);
    _$spread(_el$613, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$613;
  })();
}
export function LucideFileUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$614 = _$getNextElement(_tmpl$613);
    _$spread(_el$614, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$614;
  })();
}
export function LucideFileUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$615 = _$getNextElement(_tmpl$614);
    _$spread(_el$615, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$615;
  })();
}
export function LucideFileVideo2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$616 = _$getNextElement(_tmpl$615);
    _$spread(_el$616, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$616;
  })();
}
export function LucideFileVideo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$617 = _$getNextElement(_tmpl$616);
    _$spread(_el$617, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$617;
  })();
}
export function LucideFileVolume2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$618 = _$getNextElement(_tmpl$617);
    _$spread(_el$618, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$618;
  })();
}
export function LucideFileVolume(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$619 = _$getNextElement(_tmpl$618);
    _$spread(_el$619, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$619;
  })();
}
export function LucideFileWarning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$620 = _$getNextElement(_tmpl$619);
    _$spread(_el$620, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$620;
  })();
}
export function LucideFileX2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$621 = _$getNextElement(_tmpl$620);
    _$spread(_el$621, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$621;
  })();
}
export function LucideFileX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$622 = _$getNextElement(_tmpl$621);
    _$spread(_el$622, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$622;
  })();
}
export function LucideFile(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$623 = _$getNextElement(_tmpl$622);
    _$spread(_el$623, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$623;
  })();
}
export function LucideFiles(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$624 = _$getNextElement(_tmpl$623);
    _$spread(_el$624, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$624;
  })();
}
export function LucideFilm(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$625 = _$getNextElement(_tmpl$624);
    _$spread(_el$625, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$625;
  })();
}
export function LucideFingerprint(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$626 = _$getNextElement(_tmpl$625);
    _$spread(_el$626, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$626;
  })();
}
export function LucideFireExtinguisher(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$627 = _$getNextElement(_tmpl$626);
    _$spread(_el$627, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$627;
  })();
}
export function LucideFishOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$628 = _$getNextElement(_tmpl$627);
    _$spread(_el$628, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$628;
  })();
}
export function LucideFishSymbol(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$629 = _$getNextElement(_tmpl$628);
    _$spread(_el$629, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$629;
  })();
}
export function LucideFish(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$630 = _$getNextElement(_tmpl$629);
    _$spread(_el$630, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$630;
  })();
}
export function LucideFlagOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$631 = _$getNextElement(_tmpl$630);
    _$spread(_el$631, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$631;
  })();
}
export function LucideFlagTriangleLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$632 = _$getNextElement(_tmpl$631);
    _$spread(_el$632, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$632;
  })();
}
export function LucideFlagTriangleRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$633 = _$getNextElement(_tmpl$632);
    _$spread(_el$633, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$633;
  })();
}
export function LucideFlag(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$634 = _$getNextElement(_tmpl$633);
    _$spread(_el$634, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$634;
  })();
}
export function LucideFlameKindling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$635 = _$getNextElement(_tmpl$634);
    _$spread(_el$635, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$635;
  })();
}
export function LucideFlame(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$636 = _$getNextElement(_tmpl$635);
    _$spread(_el$636, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$636;
  })();
}
export function LucideFlashlightOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$637 = _$getNextElement(_tmpl$636);
    _$spread(_el$637, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$637;
  })();
}
export function LucideFlashlight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$638 = _$getNextElement(_tmpl$637);
    _$spread(_el$638, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$638;
  })();
}
export function LucideFlaskConicalOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$639 = _$getNextElement(_tmpl$638);
    _$spread(_el$639, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$639;
  })();
}
export function LucideFlaskConical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$640 = _$getNextElement(_tmpl$639);
    _$spread(_el$640, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$640;
  })();
}
export function LucideFlaskRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$641 = _$getNextElement(_tmpl$640);
    _$spread(_el$641, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$641;
  })();
}
export function LucideFlipHorizontal2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$642 = _$getNextElement(_tmpl$641);
    _$spread(_el$642, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$642;
  })();
}
export function LucideFlipHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$643 = _$getNextElement(_tmpl$642);
    _$spread(_el$643, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$643;
  })();
}
export function LucideFlipVertical2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$644 = _$getNextElement(_tmpl$643);
    _$spread(_el$644, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$644;
  })();
}
export function LucideFlipVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$645 = _$getNextElement(_tmpl$644);
    _$spread(_el$645, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$645;
  })();
}
export function LucideFlower2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$646 = _$getNextElement(_tmpl$645);
    _$spread(_el$646, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$646;
  })();
}
export function LucideFlower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$647 = _$getNextElement(_tmpl$646);
    _$spread(_el$647, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$647;
  })();
}
export function LucideFocus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$648 = _$getNextElement(_tmpl$647);
    _$spread(_el$648, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$648;
  })();
}
export function LucideFoldHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$649 = _$getNextElement(_tmpl$648);
    _$spread(_el$649, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$649;
  })();
}
export function LucideFoldVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$650 = _$getNextElement(_tmpl$649);
    _$spread(_el$650, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$650;
  })();
}
export function LucideFolderArchive(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$651 = _$getNextElement(_tmpl$650);
    _$spread(_el$651, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$651;
  })();
}
export function LucideFolderCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$652 = _$getNextElement(_tmpl$651);
    _$spread(_el$652, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$652;
  })();
}
export function LucideFolderClock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$653 = _$getNextElement(_tmpl$652);
    _$spread(_el$653, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$653;
  })();
}
export function LucideFolderClosed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$654 = _$getNextElement(_tmpl$653);
    _$spread(_el$654, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$654;
  })();
}
export function LucideFolderCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$655 = _$getNextElement(_tmpl$654);
    _$spread(_el$655, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$655;
  })();
}
export function LucideFolderCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$656 = _$getNextElement(_tmpl$655);
    _$spread(_el$656, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$656;
  })();
}
export function LucideFolderDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$657 = _$getNextElement(_tmpl$656);
    _$spread(_el$657, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$657;
  })();
}
export function LucideFolderDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$658 = _$getNextElement(_tmpl$657);
    _$spread(_el$658, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$658;
  })();
}
export function LucideFolderGit2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$659 = _$getNextElement(_tmpl$658);
    _$spread(_el$659, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$659;
  })();
}
export function LucideFolderGit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$660 = _$getNextElement(_tmpl$659);
    _$spread(_el$660, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$660;
  })();
}
export function LucideFolderHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$661 = _$getNextElement(_tmpl$660);
    _$spread(_el$661, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$661;
  })();
}
export function LucideFolderInput(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$662 = _$getNextElement(_tmpl$661);
    _$spread(_el$662, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$662;
  })();
}
export function LucideFolderKanban(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$663 = _$getNextElement(_tmpl$662);
    _$spread(_el$663, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$663;
  })();
}
export function LucideFolderKey(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$664 = _$getNextElement(_tmpl$663);
    _$spread(_el$664, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$664;
  })();
}
export function LucideFolderLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$665 = _$getNextElement(_tmpl$664);
    _$spread(_el$665, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$665;
  })();
}
export function LucideFolderMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$666 = _$getNextElement(_tmpl$665);
    _$spread(_el$666, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$666;
  })();
}
export function LucideFolderOpenDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$667 = _$getNextElement(_tmpl$666);
    _$spread(_el$667, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$667;
  })();
}
export function LucideFolderOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$668 = _$getNextElement(_tmpl$667);
    _$spread(_el$668, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$668;
  })();
}
export function LucideFolderOutput(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$669 = _$getNextElement(_tmpl$668);
    _$spread(_el$669, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$669;
  })();
}
export function LucideFolderPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$670 = _$getNextElement(_tmpl$669);
    _$spread(_el$670, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$670;
  })();
}
export function LucideFolderPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$671 = _$getNextElement(_tmpl$670);
    _$spread(_el$671, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$671;
  })();
}
export function LucideFolderRoot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$672 = _$getNextElement(_tmpl$671);
    _$spread(_el$672, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$672;
  })();
}
export function LucideFolderSearch2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$673 = _$getNextElement(_tmpl$672);
    _$spread(_el$673, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$673;
  })();
}
export function LucideFolderSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$674 = _$getNextElement(_tmpl$673);
    _$spread(_el$674, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$674;
  })();
}
export function LucideFolderSymlink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$675 = _$getNextElement(_tmpl$674);
    _$spread(_el$675, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$675;
  })();
}
export function LucideFolderSync(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$676 = _$getNextElement(_tmpl$675);
    _$spread(_el$676, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$676;
  })();
}
export function LucideFolderTree(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$677 = _$getNextElement(_tmpl$676);
    _$spread(_el$677, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$677;
  })();
}
export function LucideFolderUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$678 = _$getNextElement(_tmpl$677);
    _$spread(_el$678, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$678;
  })();
}
export function LucideFolderX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$679 = _$getNextElement(_tmpl$678);
    _$spread(_el$679, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$679;
  })();
}
export function LucideFolder(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$680 = _$getNextElement(_tmpl$679);
    _$spread(_el$680, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$680;
  })();
}
export function LucideFolders(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$681 = _$getNextElement(_tmpl$680);
    _$spread(_el$681, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$681;
  })();
}
export function LucideFootprints(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$682 = _$getNextElement(_tmpl$681);
    _$spread(_el$682, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$682;
  })();
}
export function LucideForklift(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$683 = _$getNextElement(_tmpl$682);
    _$spread(_el$683, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$683;
  })();
}
export function LucideForward(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$684 = _$getNextElement(_tmpl$683);
    _$spread(_el$684, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$684;
  })();
}
export function LucideFrame(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$685 = _$getNextElement(_tmpl$684);
    _$spread(_el$685, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$685;
  })();
}
export function LucideFramer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$686 = _$getNextElement(_tmpl$685);
    _$spread(_el$686, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$686;
  })();
}
export function LucideFrown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$687 = _$getNextElement(_tmpl$686);
    _$spread(_el$687, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$687;
  })();
}
export function LucideFuel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$688 = _$getNextElement(_tmpl$687);
    _$spread(_el$688, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$688;
  })();
}
export function LucideFullscreen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$689 = _$getNextElement(_tmpl$688);
    _$spread(_el$689, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$689;
  })();
}
export function LucideFunnelPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$690 = _$getNextElement(_tmpl$689);
    _$spread(_el$690, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$690;
  })();
}
export function LucideFunnelX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$691 = _$getNextElement(_tmpl$690);
    _$spread(_el$691, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$691;
  })();
}
export function LucideFunnel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$692 = _$getNextElement(_tmpl$691);
    _$spread(_el$692, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$692;
  })();
}
export function LucideGalleryHorizontalEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$693 = _$getNextElement(_tmpl$692);
    _$spread(_el$693, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$693;
  })();
}
export function LucideGalleryHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$694 = _$getNextElement(_tmpl$693);
    _$spread(_el$694, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$694;
  })();
}
export function LucideGalleryThumbnails(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$695 = _$getNextElement(_tmpl$694);
    _$spread(_el$695, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$695;
  })();
}
export function LucideGalleryVerticalEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$696 = _$getNextElement(_tmpl$695);
    _$spread(_el$696, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$696;
  })();
}
export function LucideGalleryVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$697 = _$getNextElement(_tmpl$696);
    _$spread(_el$697, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$697;
  })();
}
export function LucideGamepad2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$698 = _$getNextElement(_tmpl$697);
    _$spread(_el$698, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$698;
  })();
}
export function LucideGamepad(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$699 = _$getNextElement(_tmpl$698);
    _$spread(_el$699, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$699;
  })();
}
export function LucideGauge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$700 = _$getNextElement(_tmpl$699);
    _$spread(_el$700, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$700;
  })();
}
export function LucideGavel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$701 = _$getNextElement(_tmpl$700);
    _$spread(_el$701, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$701;
  })();
}
export function LucideGem(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$702 = _$getNextElement(_tmpl$701);
    _$spread(_el$702, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$702;
  })();
}
export function LucideGeorgianLari(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$703 = _$getNextElement(_tmpl$702);
    _$spread(_el$703, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$703;
  })();
}
export function LucideGhost(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$704 = _$getNextElement(_tmpl$703);
    _$spread(_el$704, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$704;
  })();
}
export function LucideGift(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$705 = _$getNextElement(_tmpl$704);
    _$spread(_el$705, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$705;
  })();
}
export function LucideGitBranchPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$706 = _$getNextElement(_tmpl$705);
    _$spread(_el$706, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$706;
  })();
}
export function LucideGitBranch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$707 = _$getNextElement(_tmpl$706);
    _$spread(_el$707, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$707;
  })();
}
export function LucideGitCommitHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$708 = _$getNextElement(_tmpl$707);
    _$spread(_el$708, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$708;
  })();
}
export function LucideGitCommitVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$709 = _$getNextElement(_tmpl$708);
    _$spread(_el$709, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$709;
  })();
}
export function LucideGitCompareArrows(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$710 = _$getNextElement(_tmpl$709);
    _$spread(_el$710, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$710;
  })();
}
export function LucideGitCompare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$711 = _$getNextElement(_tmpl$710);
    _$spread(_el$711, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$711;
  })();
}
export function LucideGitFork(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$712 = _$getNextElement(_tmpl$711);
    _$spread(_el$712, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$712;
  })();
}
export function LucideGitGraph(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$713 = _$getNextElement(_tmpl$712);
    _$spread(_el$713, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$713;
  })();
}
export function LucideGitMerge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$714 = _$getNextElement(_tmpl$713);
    _$spread(_el$714, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$714;
  })();
}
export function LucideGitPullRequestArrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$715 = _$getNextElement(_tmpl$714);
    _$spread(_el$715, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$715;
  })();
}
export function LucideGitPullRequestClosed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$716 = _$getNextElement(_tmpl$715);
    _$spread(_el$716, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$716;
  })();
}
export function LucideGitPullRequestCreateArrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$717 = _$getNextElement(_tmpl$716);
    _$spread(_el$717, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$717;
  })();
}
export function LucideGitPullRequestCreate(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$718 = _$getNextElement(_tmpl$717);
    _$spread(_el$718, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$718;
  })();
}
export function LucideGitPullRequestDraft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$719 = _$getNextElement(_tmpl$718);
    _$spread(_el$719, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$719;
  })();
}
export function LucideGitPullRequest(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$720 = _$getNextElement(_tmpl$719);
    _$spread(_el$720, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$720;
  })();
}
export function LucideGithub(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$721 = _$getNextElement(_tmpl$720);
    _$spread(_el$721, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$721;
  })();
}
export function LucideGitlab(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$722 = _$getNextElement(_tmpl$721);
    _$spread(_el$722, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$722;
  })();
}
export function LucideGlassWater(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$723 = _$getNextElement(_tmpl$722);
    _$spread(_el$723, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$723;
  })();
}
export function LucideGlasses(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$724 = _$getNextElement(_tmpl$723);
    _$spread(_el$724, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$724;
  })();
}
export function LucideGlobeLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$725 = _$getNextElement(_tmpl$724);
    _$spread(_el$725, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$725;
  })();
}
export function LucideGlobe(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$726 = _$getNextElement(_tmpl$725);
    _$spread(_el$726, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$726;
  })();
}
export function LucideGoal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$727 = _$getNextElement(_tmpl$726);
    _$spread(_el$727, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$727;
  })();
}
export function LucideGpu(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$728 = _$getNextElement(_tmpl$727);
    _$spread(_el$728, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$728;
  })();
}
export function LucideGrab(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$729 = _$getNextElement(_tmpl$728);
    _$spread(_el$729, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$729;
  })();
}
export function LucideGraduationCap(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$730 = _$getNextElement(_tmpl$729);
    _$spread(_el$730, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$730;
  })();
}
export function LucideGrape(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$731 = _$getNextElement(_tmpl$730);
    _$spread(_el$731, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$731;
  })();
}
export function LucideGrid2x2Check(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$732 = _$getNextElement(_tmpl$731);
    _$spread(_el$732, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$732;
  })();
}
export function LucideGrid2x2Plus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$733 = _$getNextElement(_tmpl$732);
    _$spread(_el$733, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$733;
  })();
}
export function LucideGrid2x2X(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$734 = _$getNextElement(_tmpl$733);
    _$spread(_el$734, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$734;
  })();
}
export function LucideGrid2x2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$735 = _$getNextElement(_tmpl$734);
    _$spread(_el$735, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$735;
  })();
}
export function LucideGrid3x2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$736 = _$getNextElement(_tmpl$735);
    _$spread(_el$736, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$736;
  })();
}
export function LucideGrid3x3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$737 = _$getNextElement(_tmpl$736);
    _$spread(_el$737, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$737;
  })();
}
export function LucideGripHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$738 = _$getNextElement(_tmpl$737);
    _$spread(_el$738, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$738;
  })();
}
export function LucideGripVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$739 = _$getNextElement(_tmpl$738);
    _$spread(_el$739, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$739;
  })();
}
export function LucideGrip(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$740 = _$getNextElement(_tmpl$739);
    _$spread(_el$740, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$740;
  })();
}
export function LucideGroup(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$741 = _$getNextElement(_tmpl$740);
    _$spread(_el$741, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$741;
  })();
}
export function LucideGuitar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$742 = _$getNextElement(_tmpl$741);
    _$spread(_el$742, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$742;
  })();
}
export function LucideHam(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$743 = _$getNextElement(_tmpl$742);
    _$spread(_el$743, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$743;
  })();
}
export function LucideHamburger(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$744 = _$getNextElement(_tmpl$743);
    _$spread(_el$744, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$744;
  })();
}
export function LucideHammer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$745 = _$getNextElement(_tmpl$744);
    _$spread(_el$745, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$745;
  })();
}
export function LucideHandCoins(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$746 = _$getNextElement(_tmpl$745);
    _$spread(_el$746, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$746;
  })();
}
export function LucideHandHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$747 = _$getNextElement(_tmpl$746);
    _$spread(_el$747, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$747;
  })();
}
export function LucideHandHelping(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$748 = _$getNextElement(_tmpl$747);
    _$spread(_el$748, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$748;
  })();
}
export function LucideHandMetal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$749 = _$getNextElement(_tmpl$748);
    _$spread(_el$749, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$749;
  })();
}
export function LucideHandPlatter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$750 = _$getNextElement(_tmpl$749);
    _$spread(_el$750, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$750;
  })();
}
export function LucideHand(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$751 = _$getNextElement(_tmpl$750);
    _$spread(_el$751, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$751;
  })();
}
export function LucideHandshake(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$752 = _$getNextElement(_tmpl$751);
    _$spread(_el$752, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$752;
  })();
}
export function LucideHardDriveDownload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$753 = _$getNextElement(_tmpl$752);
    _$spread(_el$753, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$753;
  })();
}
export function LucideHardDriveUpload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$754 = _$getNextElement(_tmpl$753);
    _$spread(_el$754, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$754;
  })();
}
export function LucideHardDrive(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$755 = _$getNextElement(_tmpl$754);
    _$spread(_el$755, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$755;
  })();
}
export function LucideHardHat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$756 = _$getNextElement(_tmpl$755);
    _$spread(_el$756, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$756;
  })();
}
export function LucideHash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$757 = _$getNextElement(_tmpl$756);
    _$spread(_el$757, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$757;
  })();
}
export function LucideHaze(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$758 = _$getNextElement(_tmpl$757);
    _$spread(_el$758, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$758;
  })();
}
export function LucideHdmiPort(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$759 = _$getNextElement(_tmpl$758);
    _$spread(_el$759, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$759;
  })();
}
export function LucideHeading1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$760 = _$getNextElement(_tmpl$759);
    _$spread(_el$760, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$760;
  })();
}
export function LucideHeading2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$761 = _$getNextElement(_tmpl$760);
    _$spread(_el$761, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$761;
  })();
}
export function LucideHeading3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$762 = _$getNextElement(_tmpl$761);
    _$spread(_el$762, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$762;
  })();
}
export function LucideHeading4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$763 = _$getNextElement(_tmpl$762);
    _$spread(_el$763, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$763;
  })();
}
export function LucideHeading5(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$764 = _$getNextElement(_tmpl$763);
    _$spread(_el$764, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$764;
  })();
}
export function LucideHeading6(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$765 = _$getNextElement(_tmpl$764);
    _$spread(_el$765, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$765;
  })();
}
export function LucideHeading(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$766 = _$getNextElement(_tmpl$765);
    _$spread(_el$766, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$766;
  })();
}
export function LucideHeadphoneOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$767 = _$getNextElement(_tmpl$766);
    _$spread(_el$767, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$767;
  })();
}
export function LucideHeadphones(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$768 = _$getNextElement(_tmpl$767);
    _$spread(_el$768, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$768;
  })();
}
export function LucideHeadset(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$769 = _$getNextElement(_tmpl$768);
    _$spread(_el$769, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$769;
  })();
}
export function LucideHeartCrack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$770 = _$getNextElement(_tmpl$769);
    _$spread(_el$770, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$770;
  })();
}
export function LucideHeartHandshake(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$771 = _$getNextElement(_tmpl$770);
    _$spread(_el$771, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$771;
  })();
}
export function LucideHeartMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$772 = _$getNextElement(_tmpl$771);
    _$spread(_el$772, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$772;
  })();
}
export function LucideHeartOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$773 = _$getNextElement(_tmpl$772);
    _$spread(_el$773, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$773;
  })();
}
export function LucideHeartPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$774 = _$getNextElement(_tmpl$773);
    _$spread(_el$774, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$774;
  })();
}
export function LucideHeartPulse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$775 = _$getNextElement(_tmpl$774);
    _$spread(_el$775, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$775;
  })();
}
export function LucideHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$776 = _$getNextElement(_tmpl$775);
    _$spread(_el$776, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$776;
  })();
}
export function LucideHeater(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$777 = _$getNextElement(_tmpl$776);
    _$spread(_el$777, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$777;
  })();
}
export function LucideHexagon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$778 = _$getNextElement(_tmpl$777);
    _$spread(_el$778, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$778;
  })();
}
export function LucideHighlighter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$779 = _$getNextElement(_tmpl$778);
    _$spread(_el$779, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$779;
  })();
}
export function LucideHistory(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$780 = _$getNextElement(_tmpl$779);
    _$spread(_el$780, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$780;
  })();
}
export function LucideHopOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$781 = _$getNextElement(_tmpl$780);
    _$spread(_el$781, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$781;
  })();
}
export function LucideHop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$782 = _$getNextElement(_tmpl$781);
    _$spread(_el$782, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$782;
  })();
}
export function LucideHospital(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$783 = _$getNextElement(_tmpl$782);
    _$spread(_el$783, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$783;
  })();
}
export function LucideHotel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$784 = _$getNextElement(_tmpl$783);
    _$spread(_el$784, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$784;
  })();
}
export function LucideHourglass(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$785 = _$getNextElement(_tmpl$784);
    _$spread(_el$785, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$785;
  })();
}
export function LucideHousePlug(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$786 = _$getNextElement(_tmpl$785);
    _$spread(_el$786, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$786;
  })();
}
export function LucideHousePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$787 = _$getNextElement(_tmpl$786);
    _$spread(_el$787, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$787;
  })();
}
export function LucideHouseWifi(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$788 = _$getNextElement(_tmpl$787);
    _$spread(_el$788, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$788;
  })();
}
export function LucideHouse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$789 = _$getNextElement(_tmpl$788);
    _$spread(_el$789, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$789;
  })();
}
export function LucideIceCreamBowl(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$790 = _$getNextElement(_tmpl$789);
    _$spread(_el$790, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$790;
  })();
}
export function LucideIceCreamCone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$791 = _$getNextElement(_tmpl$790);
    _$spread(_el$791, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$791;
  })();
}
export function LucideIdCardLanyard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$792 = _$getNextElement(_tmpl$791);
    _$spread(_el$792, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$792;
  })();
}
export function LucideIdCard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$793 = _$getNextElement(_tmpl$792);
    _$spread(_el$793, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$793;
  })();
}
export function LucideImageDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$794 = _$getNextElement(_tmpl$793);
    _$spread(_el$794, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$794;
  })();
}
export function LucideImageMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$795 = _$getNextElement(_tmpl$794);
    _$spread(_el$795, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$795;
  })();
}
export function LucideImageOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$796 = _$getNextElement(_tmpl$795);
    _$spread(_el$796, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$796;
  })();
}
export function LucideImagePlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$797 = _$getNextElement(_tmpl$796);
    _$spread(_el$797, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$797;
  })();
}
export function LucideImagePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$798 = _$getNextElement(_tmpl$797);
    _$spread(_el$798, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$798;
  })();
}
export function LucideImageUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$799 = _$getNextElement(_tmpl$798);
    _$spread(_el$799, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$799;
  })();
}
export function LucideImageUpscale(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$800 = _$getNextElement(_tmpl$799);
    _$spread(_el$800, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$800;
  })();
}
export function LucideImage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$801 = _$getNextElement(_tmpl$800);
    _$spread(_el$801, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$801;
  })();
}
export function LucideImages(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$802 = _$getNextElement(_tmpl$801);
    _$spread(_el$802, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$802;
  })();
}
export function LucideImport(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$803 = _$getNextElement(_tmpl$802);
    _$spread(_el$803, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$803;
  })();
}
export function LucideInbox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$804 = _$getNextElement(_tmpl$803);
    _$spread(_el$804, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$804;
  })();
}
export function LucideIndentDecrease(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$805 = _$getNextElement(_tmpl$804);
    _$spread(_el$805, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$805;
  })();
}
export function LucideIndentIncrease(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$806 = _$getNextElement(_tmpl$805);
    _$spread(_el$806, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$806;
  })();
}
export function LucideIndianRupee(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$807 = _$getNextElement(_tmpl$806);
    _$spread(_el$807, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$807;
  })();
}
export function LucideInfinity(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$808 = _$getNextElement(_tmpl$807);
    _$spread(_el$808, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$808;
  })();
}
export function LucideInfo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$809 = _$getNextElement(_tmpl$808);
    _$spread(_el$809, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$809;
  })();
}
export function LucideInspectionPanel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$810 = _$getNextElement(_tmpl$809);
    _$spread(_el$810, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$810;
  })();
}
export function LucideInstagram(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$811 = _$getNextElement(_tmpl$810);
    _$spread(_el$811, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$811;
  })();
}
export function LucideItalic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$812 = _$getNextElement(_tmpl$811);
    _$spread(_el$812, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$812;
  })();
}
export function LucideIterationCcw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$813 = _$getNextElement(_tmpl$812);
    _$spread(_el$813, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$813;
  })();
}
export function LucideIterationCw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$814 = _$getNextElement(_tmpl$813);
    _$spread(_el$814, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$814;
  })();
}
export function LucideJapaneseYen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$815 = _$getNextElement(_tmpl$814);
    _$spread(_el$815, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$815;
  })();
}
export function LucideJoystick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$816 = _$getNextElement(_tmpl$815);
    _$spread(_el$816, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$816;
  })();
}
export function LucideKanban(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$817 = _$getNextElement(_tmpl$816);
    _$spread(_el$817, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$817;
  })();
}
export function LucideKeyRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$818 = _$getNextElement(_tmpl$817);
    _$spread(_el$818, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$818;
  })();
}
export function LucideKeySquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$819 = _$getNextElement(_tmpl$818);
    _$spread(_el$819, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$819;
  })();
}
export function LucideKey(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$820 = _$getNextElement(_tmpl$819);
    _$spread(_el$820, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$820;
  })();
}
export function LucideKeyboardMusic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$821 = _$getNextElement(_tmpl$820);
    _$spread(_el$821, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$821;
  })();
}
export function LucideKeyboardOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$822 = _$getNextElement(_tmpl$821);
    _$spread(_el$822, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$822;
  })();
}
export function LucideKeyboard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$823 = _$getNextElement(_tmpl$822);
    _$spread(_el$823, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$823;
  })();
}
export function LucideLampCeiling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$824 = _$getNextElement(_tmpl$823);
    _$spread(_el$824, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$824;
  })();
}
export function LucideLampDesk(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$825 = _$getNextElement(_tmpl$824);
    _$spread(_el$825, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$825;
  })();
}
export function LucideLampFloor(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$826 = _$getNextElement(_tmpl$825);
    _$spread(_el$826, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$826;
  })();
}
export function LucideLampWallDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$827 = _$getNextElement(_tmpl$826);
    _$spread(_el$827, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$827;
  })();
}
export function LucideLampWallUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$828 = _$getNextElement(_tmpl$827);
    _$spread(_el$828, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$828;
  })();
}
export function LucideLamp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$829 = _$getNextElement(_tmpl$828);
    _$spread(_el$829, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$829;
  })();
}
export function LucideLandPlot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$830 = _$getNextElement(_tmpl$829);
    _$spread(_el$830, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$830;
  })();
}
export function LucideLandmark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$831 = _$getNextElement(_tmpl$830);
    _$spread(_el$831, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$831;
  })();
}
export function LucideLanguages(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$832 = _$getNextElement(_tmpl$831);
    _$spread(_el$832, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$832;
  })();
}
export function LucideLaptopMinimalCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$833 = _$getNextElement(_tmpl$832);
    _$spread(_el$833, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$833;
  })();
}
export function LucideLaptopMinimal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$834 = _$getNextElement(_tmpl$833);
    _$spread(_el$834, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$834;
  })();
}
export function LucideLaptop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$835 = _$getNextElement(_tmpl$834);
    _$spread(_el$835, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$835;
  })();
}
export function LucideLassoSelect(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$836 = _$getNextElement(_tmpl$835);
    _$spread(_el$836, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$836;
  })();
}
export function LucideLasso(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$837 = _$getNextElement(_tmpl$836);
    _$spread(_el$837, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$837;
  })();
}
export function LucideLaugh(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$838 = _$getNextElement(_tmpl$837);
    _$spread(_el$838, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$838;
  })();
}
export function LucideLayers2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$839 = _$getNextElement(_tmpl$838);
    _$spread(_el$839, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$839;
  })();
}
export function LucideLayers(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$840 = _$getNextElement(_tmpl$839);
    _$spread(_el$840, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$840;
  })();
}
export function LucideLayoutDashboard(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$841 = _$getNextElement(_tmpl$840);
    _$spread(_el$841, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$841;
  })();
}
export function LucideLayoutGrid(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$842 = _$getNextElement(_tmpl$841);
    _$spread(_el$842, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$842;
  })();
}
export function LucideLayoutList(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$843 = _$getNextElement(_tmpl$842);
    _$spread(_el$843, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$843;
  })();
}
export function LucideLayoutPanelLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$844 = _$getNextElement(_tmpl$843);
    _$spread(_el$844, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$844;
  })();
}
export function LucideLayoutPanelTop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$845 = _$getNextElement(_tmpl$844);
    _$spread(_el$845, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$845;
  })();
}
export function LucideLayoutTemplate(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$846 = _$getNextElement(_tmpl$845);
    _$spread(_el$846, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$846;
  })();
}
export function LucideLeaf(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$847 = _$getNextElement(_tmpl$846);
    _$spread(_el$847, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$847;
  })();
}
export function LucideLeafyGreen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$848 = _$getNextElement(_tmpl$847);
    _$spread(_el$848, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$848;
  })();
}
export function LucideLectern(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$849 = _$getNextElement(_tmpl$848);
    _$spread(_el$849, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$849;
  })();
}
export function LucideLetterText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$850 = _$getNextElement(_tmpl$849);
    _$spread(_el$850, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$850;
  })();
}
export function LucideLibraryBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$851 = _$getNextElement(_tmpl$850);
    _$spread(_el$851, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$851;
  })();
}
export function LucideLibrary(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$852 = _$getNextElement(_tmpl$851);
    _$spread(_el$852, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$852;
  })();
}
export function LucideLifeBuoy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$853 = _$getNextElement(_tmpl$852);
    _$spread(_el$853, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$853;
  })();
}
export function LucideLigature(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$854 = _$getNextElement(_tmpl$853);
    _$spread(_el$854, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$854;
  })();
}
export function LucideLightbulbOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$855 = _$getNextElement(_tmpl$854);
    _$spread(_el$855, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$855;
  })();
}
export function LucideLightbulb(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$856 = _$getNextElement(_tmpl$855);
    _$spread(_el$856, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$856;
  })();
}
export function LucideLineSquiggle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$857 = _$getNextElement(_tmpl$856);
    _$spread(_el$857, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$857;
  })();
}
export function LucideLink2Off(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$858 = _$getNextElement(_tmpl$857);
    _$spread(_el$858, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$858;
  })();
}
export function LucideLink2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$859 = _$getNextElement(_tmpl$858);
    _$spread(_el$859, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$859;
  })();
}
export function LucideLink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$860 = _$getNextElement(_tmpl$859);
    _$spread(_el$860, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$860;
  })();
}
export function LucideLinkedin(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$861 = _$getNextElement(_tmpl$860);
    _$spread(_el$861, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$861;
  })();
}
export function LucideListCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$862 = _$getNextElement(_tmpl$861);
    _$spread(_el$862, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$862;
  })();
}
export function LucideListChecks(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$863 = _$getNextElement(_tmpl$862);
    _$spread(_el$863, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$863;
  })();
}
export function LucideListCollapse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$864 = _$getNextElement(_tmpl$863);
    _$spread(_el$864, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$864;
  })();
}
export function LucideListEnd(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$865 = _$getNextElement(_tmpl$864);
    _$spread(_el$865, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$865;
  })();
}
export function LucideListFilterPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$866 = _$getNextElement(_tmpl$865);
    _$spread(_el$866, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$866;
  })();
}
export function LucideListFilter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$867 = _$getNextElement(_tmpl$866);
    _$spread(_el$867, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$867;
  })();
}
export function LucideListMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$868 = _$getNextElement(_tmpl$867);
    _$spread(_el$868, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$868;
  })();
}
export function LucideListMusic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$869 = _$getNextElement(_tmpl$868);
    _$spread(_el$869, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$869;
  })();
}
export function LucideListOrdered(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$870 = _$getNextElement(_tmpl$869);
    _$spread(_el$870, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$870;
  })();
}
export function LucideListPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$871 = _$getNextElement(_tmpl$870);
    _$spread(_el$871, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$871;
  })();
}
export function LucideListRestart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$872 = _$getNextElement(_tmpl$871);
    _$spread(_el$872, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$872;
  })();
}
export function LucideListStart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$873 = _$getNextElement(_tmpl$872);
    _$spread(_el$873, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$873;
  })();
}
export function LucideListTodo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$874 = _$getNextElement(_tmpl$873);
    _$spread(_el$874, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$874;
  })();
}
export function LucideListTree(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$875 = _$getNextElement(_tmpl$874);
    _$spread(_el$875, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$875;
  })();
}
export function LucideListVideo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$876 = _$getNextElement(_tmpl$875);
    _$spread(_el$876, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$876;
  })();
}
export function LucideListX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$877 = _$getNextElement(_tmpl$876);
    _$spread(_el$877, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$877;
  })();
}
export function LucideList(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$878 = _$getNextElement(_tmpl$877);
    _$spread(_el$878, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$878;
  })();
}
export function LucideLoaderCircle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$879 = _$getNextElement(_tmpl$878);
    _$spread(_el$879, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$879;
  })();
}
export function LucideLoaderPinwheel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$880 = _$getNextElement(_tmpl$879);
    _$spread(_el$880, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$880;
  })();
}
export function LucideLoader(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$881 = _$getNextElement(_tmpl$880);
    _$spread(_el$881, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$881;
  })();
}
export function LucideLocateFixed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$882 = _$getNextElement(_tmpl$881);
    _$spread(_el$882, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$882;
  })();
}
export function LucideLocateOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$883 = _$getNextElement(_tmpl$882);
    _$spread(_el$883, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$883;
  })();
}
export function LucideLocate(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$884 = _$getNextElement(_tmpl$883);
    _$spread(_el$884, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$884;
  })();
}
export function LucideLocationEdit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$885 = _$getNextElement(_tmpl$884);
    _$spread(_el$885, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$885;
  })();
}
export function LucideLockKeyholeOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$886 = _$getNextElement(_tmpl$885);
    _$spread(_el$886, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$886;
  })();
}
export function LucideLockKeyhole(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$887 = _$getNextElement(_tmpl$886);
    _$spread(_el$887, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$887;
  })();
}
export function LucideLockOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$888 = _$getNextElement(_tmpl$887);
    _$spread(_el$888, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$888;
  })();
}
export function LucideLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$889 = _$getNextElement(_tmpl$888);
    _$spread(_el$889, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$889;
  })();
}
export function LucideLogIn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$890 = _$getNextElement(_tmpl$889);
    _$spread(_el$890, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$890;
  })();
}
export function LucideLogOut(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$891 = _$getNextElement(_tmpl$890);
    _$spread(_el$891, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$891;
  })();
}
export function LucideLogs(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$892 = _$getNextElement(_tmpl$891);
    _$spread(_el$892, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$892;
  })();
}
export function LucideLollipop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$893 = _$getNextElement(_tmpl$892);
    _$spread(_el$893, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$893;
  })();
}
export function LucideLuggage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$894 = _$getNextElement(_tmpl$893);
    _$spread(_el$894, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$894;
  })();
}
export function LucideMagnet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$895 = _$getNextElement(_tmpl$894);
    _$spread(_el$895, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$895;
  })();
}
export function LucideMailCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$896 = _$getNextElement(_tmpl$895);
    _$spread(_el$896, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$896;
  })();
}
export function LucideMailMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$897 = _$getNextElement(_tmpl$896);
    _$spread(_el$897, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$897;
  })();
}
export function LucideMailOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$898 = _$getNextElement(_tmpl$897);
    _$spread(_el$898, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$898;
  })();
}
export function LucideMailPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$899 = _$getNextElement(_tmpl$898);
    _$spread(_el$899, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$899;
  })();
}
export function LucideMailQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$900 = _$getNextElement(_tmpl$899);
    _$spread(_el$900, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$900;
  })();
}
export function LucideMailSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$901 = _$getNextElement(_tmpl$900);
    _$spread(_el$901, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$901;
  })();
}
export function LucideMailWarning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$902 = _$getNextElement(_tmpl$901);
    _$spread(_el$902, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$902;
  })();
}
export function LucideMailX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$903 = _$getNextElement(_tmpl$902);
    _$spread(_el$903, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$903;
  })();
}
export function LucideMail(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$904 = _$getNextElement(_tmpl$903);
    _$spread(_el$904, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$904;
  })();
}
export function LucideMailbox(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$905 = _$getNextElement(_tmpl$904);
    _$spread(_el$905, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$905;
  })();
}
export function LucideMails(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$906 = _$getNextElement(_tmpl$905);
    _$spread(_el$906, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$906;
  })();
}
export function LucideMapPinCheckInside(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$907 = _$getNextElement(_tmpl$906);
    _$spread(_el$907, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$907;
  })();
}
export function LucideMapPinCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$908 = _$getNextElement(_tmpl$907);
    _$spread(_el$908, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$908;
  })();
}
export function LucideMapPinHouse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$909 = _$getNextElement(_tmpl$908);
    _$spread(_el$909, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$909;
  })();
}
export function LucideMapPinMinusInside(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$910 = _$getNextElement(_tmpl$909);
    _$spread(_el$910, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$910;
  })();
}
export function LucideMapPinMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$911 = _$getNextElement(_tmpl$910);
    _$spread(_el$911, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$911;
  })();
}
export function LucideMapPinOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$912 = _$getNextElement(_tmpl$911);
    _$spread(_el$912, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$912;
  })();
}
export function LucideMapPinPlusInside(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$913 = _$getNextElement(_tmpl$912);
    _$spread(_el$913, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$913;
  })();
}
export function LucideMapPinPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$914 = _$getNextElement(_tmpl$913);
    _$spread(_el$914, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$914;
  })();
}
export function LucideMapPinXInside(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$915 = _$getNextElement(_tmpl$914);
    _$spread(_el$915, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$915;
  })();
}
export function LucideMapPinX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$916 = _$getNextElement(_tmpl$915);
    _$spread(_el$916, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$916;
  })();
}
export function LucideMapPin(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$917 = _$getNextElement(_tmpl$916);
    _$spread(_el$917, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$917;
  })();
}
export function LucideMapPinned(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$918 = _$getNextElement(_tmpl$917);
    _$spread(_el$918, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$918;
  })();
}
export function LucideMapPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$919 = _$getNextElement(_tmpl$918);
    _$spread(_el$919, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$919;
  })();
}
export function LucideMap(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$920 = _$getNextElement(_tmpl$919);
    _$spread(_el$920, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$920;
  })();
}
export function LucideMarsStroke(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$921 = _$getNextElement(_tmpl$920);
    _$spread(_el$921, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$921;
  })();
}
export function LucideMars(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$922 = _$getNextElement(_tmpl$921);
    _$spread(_el$922, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$922;
  })();
}
export function LucideMartini(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$923 = _$getNextElement(_tmpl$922);
    _$spread(_el$923, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$923;
  })();
}
export function LucideMaximize2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$924 = _$getNextElement(_tmpl$923);
    _$spread(_el$924, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$924;
  })();
}
export function LucideMaximize(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$925 = _$getNextElement(_tmpl$924);
    _$spread(_el$925, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$925;
  })();
}
export function LucideMedal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$926 = _$getNextElement(_tmpl$925);
    _$spread(_el$926, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$926;
  })();
}
export function LucideMegaphoneOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$927 = _$getNextElement(_tmpl$926);
    _$spread(_el$927, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$927;
  })();
}
export function LucideMegaphone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$928 = _$getNextElement(_tmpl$927);
    _$spread(_el$928, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$928;
  })();
}
export function LucideMeh(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$929 = _$getNextElement(_tmpl$928);
    _$spread(_el$929, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$929;
  })();
}
export function LucideMemoryStick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$930 = _$getNextElement(_tmpl$929);
    _$spread(_el$930, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$930;
  })();
}
export function LucideMenu(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$931 = _$getNextElement(_tmpl$930);
    _$spread(_el$931, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$931;
  })();
}
export function LucideMerge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$932 = _$getNextElement(_tmpl$931);
    _$spread(_el$932, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$932;
  })();
}
export function LucideMessageCircleCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$933 = _$getNextElement(_tmpl$932);
    _$spread(_el$933, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$933;
  })();
}
export function LucideMessageCircleDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$934 = _$getNextElement(_tmpl$933);
    _$spread(_el$934, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$934;
  })();
}
export function LucideMessageCircleHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$935 = _$getNextElement(_tmpl$934);
    _$spread(_el$935, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$935;
  })();
}
export function LucideMessageCircleMore(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$936 = _$getNextElement(_tmpl$935);
    _$spread(_el$936, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$936;
  })();
}
export function LucideMessageCircleOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$937 = _$getNextElement(_tmpl$936);
    _$spread(_el$937, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$937;
  })();
}
export function LucideMessageCirclePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$938 = _$getNextElement(_tmpl$937);
    _$spread(_el$938, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$938;
  })();
}
export function LucideMessageCircleQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$939 = _$getNextElement(_tmpl$938);
    _$spread(_el$939, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$939;
  })();
}
export function LucideMessageCircleReply(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$940 = _$getNextElement(_tmpl$939);
    _$spread(_el$940, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$940;
  })();
}
export function LucideMessageCircleWarning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$941 = _$getNextElement(_tmpl$940);
    _$spread(_el$941, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$941;
  })();
}
export function LucideMessageCircleX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$942 = _$getNextElement(_tmpl$941);
    _$spread(_el$942, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$942;
  })();
}
export function LucideMessageCircle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$943 = _$getNextElement(_tmpl$942);
    _$spread(_el$943, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$943;
  })();
}
export function LucideMessageSquareCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$944 = _$getNextElement(_tmpl$943);
    _$spread(_el$944, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$944;
  })();
}
export function LucideMessageSquareDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$945 = _$getNextElement(_tmpl$944);
    _$spread(_el$945, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$945;
  })();
}
export function LucideMessageSquareDiff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$946 = _$getNextElement(_tmpl$945);
    _$spread(_el$946, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$946;
  })();
}
export function LucideMessageSquareDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$947 = _$getNextElement(_tmpl$946);
    _$spread(_el$947, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$947;
  })();
}
export function LucideMessageSquareHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$948 = _$getNextElement(_tmpl$947);
    _$spread(_el$948, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$948;
  })();
}
export function LucideMessageSquareLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$949 = _$getNextElement(_tmpl$948);
    _$spread(_el$949, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$949;
  })();
}
export function LucideMessageSquareMore(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$950 = _$getNextElement(_tmpl$949);
    _$spread(_el$950, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$950;
  })();
}
export function LucideMessageSquareOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$951 = _$getNextElement(_tmpl$950);
    _$spread(_el$951, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$951;
  })();
}
export function LucideMessageSquarePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$952 = _$getNextElement(_tmpl$951);
    _$spread(_el$952, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$952;
  })();
}
export function LucideMessageSquareQuote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$953 = _$getNextElement(_tmpl$952);
    _$spread(_el$953, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$953;
  })();
}
export function LucideMessageSquareReply(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$954 = _$getNextElement(_tmpl$953);
    _$spread(_el$954, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$954;
  })();
}
export function LucideMessageSquareShare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$955 = _$getNextElement(_tmpl$954);
    _$spread(_el$955, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$955;
  })();
}
export function LucideMessageSquareText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$956 = _$getNextElement(_tmpl$955);
    _$spread(_el$956, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$956;
  })();
}
export function LucideMessageSquareWarning(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$957 = _$getNextElement(_tmpl$956);
    _$spread(_el$957, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$957;
  })();
}
export function LucideMessageSquareX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$958 = _$getNextElement(_tmpl$957);
    _$spread(_el$958, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$958;
  })();
}
export function LucideMessageSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$959 = _$getNextElement(_tmpl$958);
    _$spread(_el$959, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$959;
  })();
}
export function LucideMessagesSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$960 = _$getNextElement(_tmpl$959);
    _$spread(_el$960, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$960;
  })();
}
export function LucideMicOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$961 = _$getNextElement(_tmpl$960);
    _$spread(_el$961, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$961;
  })();
}
export function LucideMicVocal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$962 = _$getNextElement(_tmpl$961);
    _$spread(_el$962, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$962;
  })();
}
export function LucideMic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$963 = _$getNextElement(_tmpl$962);
    _$spread(_el$963, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$963;
  })();
}
export function LucideMicrochip(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$964 = _$getNextElement(_tmpl$963);
    _$spread(_el$964, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$964;
  })();
}
export function LucideMicroscope(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$965 = _$getNextElement(_tmpl$964);
    _$spread(_el$965, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$965;
  })();
}
export function LucideMicrowave(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$966 = _$getNextElement(_tmpl$965);
    _$spread(_el$966, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$966;
  })();
}
export function LucideMilestone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$967 = _$getNextElement(_tmpl$966);
    _$spread(_el$967, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$967;
  })();
}
export function LucideMilkOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$968 = _$getNextElement(_tmpl$967);
    _$spread(_el$968, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$968;
  })();
}
export function LucideMilk(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$969 = _$getNextElement(_tmpl$968);
    _$spread(_el$969, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$969;
  })();
}
export function LucideMinimize2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$970 = _$getNextElement(_tmpl$969);
    _$spread(_el$970, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$970;
  })();
}
export function LucideMinimize(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$971 = _$getNextElement(_tmpl$970);
    _$spread(_el$971, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$971;
  })();
}
export function LucideMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$972 = _$getNextElement(_tmpl$971);
    _$spread(_el$972, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$972;
  })();
}
export function LucideMonitorCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$973 = _$getNextElement(_tmpl$972);
    _$spread(_el$973, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$973;
  })();
}
export function LucideMonitorCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$974 = _$getNextElement(_tmpl$973);
    _$spread(_el$974, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$974;
  })();
}
export function LucideMonitorDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$975 = _$getNextElement(_tmpl$974);
    _$spread(_el$975, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$975;
  })();
}
export function LucideMonitorDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$976 = _$getNextElement(_tmpl$975);
    _$spread(_el$976, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$976;
  })();
}
export function LucideMonitorOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$977 = _$getNextElement(_tmpl$976);
    _$spread(_el$977, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$977;
  })();
}
export function LucideMonitorPause(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$978 = _$getNextElement(_tmpl$977);
    _$spread(_el$978, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$978;
  })();
}
export function LucideMonitorPlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$979 = _$getNextElement(_tmpl$978);
    _$spread(_el$979, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$979;
  })();
}
export function LucideMonitorSmartphone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$980 = _$getNextElement(_tmpl$979);
    _$spread(_el$980, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$980;
  })();
}
export function LucideMonitorSpeaker(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$981 = _$getNextElement(_tmpl$980);
    _$spread(_el$981, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$981;
  })();
}
export function LucideMonitorStop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$982 = _$getNextElement(_tmpl$981);
    _$spread(_el$982, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$982;
  })();
}
export function LucideMonitorUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$983 = _$getNextElement(_tmpl$982);
    _$spread(_el$983, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$983;
  })();
}
export function LucideMonitorX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$984 = _$getNextElement(_tmpl$983);
    _$spread(_el$984, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$984;
  })();
}
export function LucideMonitor(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$985 = _$getNextElement(_tmpl$984);
    _$spread(_el$985, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$985;
  })();
}
export function LucideMoonStar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$986 = _$getNextElement(_tmpl$985);
    _$spread(_el$986, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$986;
  })();
}
export function LucideMoon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$987 = _$getNextElement(_tmpl$986);
    _$spread(_el$987, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$987;
  })();
}
export function LucideMountainSnow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$988 = _$getNextElement(_tmpl$987);
    _$spread(_el$988, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$988;
  })();
}
export function LucideMountain(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$989 = _$getNextElement(_tmpl$988);
    _$spread(_el$989, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$989;
  })();
}
export function LucideMouseOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$990 = _$getNextElement(_tmpl$989);
    _$spread(_el$990, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$990;
  })();
}
export function LucideMousePointer2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$991 = _$getNextElement(_tmpl$990);
    _$spread(_el$991, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$991;
  })();
}
export function LucideMousePointerBan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$992 = _$getNextElement(_tmpl$991);
    _$spread(_el$992, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$992;
  })();
}
export function LucideMousePointerClick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$993 = _$getNextElement(_tmpl$992);
    _$spread(_el$993, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$993;
  })();
}
export function LucideMousePointer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$994 = _$getNextElement(_tmpl$993);
    _$spread(_el$994, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$994;
  })();
}
export function LucideMouse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$995 = _$getNextElement(_tmpl$994);
    _$spread(_el$995, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$995;
  })();
}
export function LucideMove3d(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$996 = _$getNextElement(_tmpl$995);
    _$spread(_el$996, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$996;
  })();
}
export function LucideMoveDiagonal2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$997 = _$getNextElement(_tmpl$996);
    _$spread(_el$997, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$997;
  })();
}
export function LucideMoveDiagonal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$998 = _$getNextElement(_tmpl$997);
    _$spread(_el$998, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$998;
  })();
}
export function LucideMoveDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$999 = _$getNextElement(_tmpl$998);
    _$spread(_el$999, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$999;
  })();
}
export function LucideMoveDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1000 = _$getNextElement(_tmpl$999);
    _$spread(_el$1000, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1000;
  })();
}
export function LucideMoveDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1001 = _$getNextElement(_tmpl$1000);
    _$spread(_el$1001, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1001;
  })();
}
export function LucideMoveHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1002 = _$getNextElement(_tmpl$1001);
    _$spread(_el$1002, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1002;
  })();
}
export function LucideMoveLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1003 = _$getNextElement(_tmpl$1002);
    _$spread(_el$1003, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1003;
  })();
}
export function LucideMoveRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1004 = _$getNextElement(_tmpl$1003);
    _$spread(_el$1004, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1004;
  })();
}
export function LucideMoveUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1005 = _$getNextElement(_tmpl$1004);
    _$spread(_el$1005, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1005;
  })();
}
export function LucideMoveUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1006 = _$getNextElement(_tmpl$1005);
    _$spread(_el$1006, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1006;
  })();
}
export function LucideMoveUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1007 = _$getNextElement(_tmpl$1006);
    _$spread(_el$1007, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1007;
  })();
}
export function LucideMoveVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1008 = _$getNextElement(_tmpl$1007);
    _$spread(_el$1008, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1008;
  })();
}
export function LucideMove(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1009 = _$getNextElement(_tmpl$1008);
    _$spread(_el$1009, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1009;
  })();
}
export function LucideMusic2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1010 = _$getNextElement(_tmpl$1009);
    _$spread(_el$1010, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1010;
  })();
}
export function LucideMusic3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1011 = _$getNextElement(_tmpl$1010);
    _$spread(_el$1011, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1011;
  })();
}
export function LucideMusic4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1012 = _$getNextElement(_tmpl$1011);
    _$spread(_el$1012, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1012;
  })();
}
export function LucideMusic(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1013 = _$getNextElement(_tmpl$1012);
    _$spread(_el$1013, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1013;
  })();
}
export function LucideNavigation2Off(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1014 = _$getNextElement(_tmpl$1013);
    _$spread(_el$1014, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1014;
  })();
}
export function LucideNavigation2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1015 = _$getNextElement(_tmpl$1014);
    _$spread(_el$1015, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1015;
  })();
}
export function LucideNavigationOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1016 = _$getNextElement(_tmpl$1015);
    _$spread(_el$1016, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1016;
  })();
}
export function LucideNavigation(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1017 = _$getNextElement(_tmpl$1016);
    _$spread(_el$1017, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1017;
  })();
}
export function LucideNetwork(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1018 = _$getNextElement(_tmpl$1017);
    _$spread(_el$1018, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1018;
  })();
}
export function LucideNewspaper(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1019 = _$getNextElement(_tmpl$1018);
    _$spread(_el$1019, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1019;
  })();
}
export function LucideNfc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1020 = _$getNextElement(_tmpl$1019);
    _$spread(_el$1020, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1020;
  })();
}
export function LucideNonBinary(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1021 = _$getNextElement(_tmpl$1020);
    _$spread(_el$1021, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1021;
  })();
}
export function LucideNotebookPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1022 = _$getNextElement(_tmpl$1021);
    _$spread(_el$1022, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1022;
  })();
}
export function LucideNotebookTabs(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1023 = _$getNextElement(_tmpl$1022);
    _$spread(_el$1023, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1023;
  })();
}
export function LucideNotebookText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1024 = _$getNextElement(_tmpl$1023);
    _$spread(_el$1024, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1024;
  })();
}
export function LucideNotebook(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1025 = _$getNextElement(_tmpl$1024);
    _$spread(_el$1025, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1025;
  })();
}
export function LucideNotepadTextDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1026 = _$getNextElement(_tmpl$1025);
    _$spread(_el$1026, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1026;
  })();
}
export function LucideNotepadText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1027 = _$getNextElement(_tmpl$1026);
    _$spread(_el$1027, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1027;
  })();
}
export function LucideNutOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1028 = _$getNextElement(_tmpl$1027);
    _$spread(_el$1028, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1028;
  })();
}
export function LucideNut(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1029 = _$getNextElement(_tmpl$1028);
    _$spread(_el$1029, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1029;
  })();
}
export function LucideOctagonAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1030 = _$getNextElement(_tmpl$1029);
    _$spread(_el$1030, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1030;
  })();
}
export function LucideOctagonMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1031 = _$getNextElement(_tmpl$1030);
    _$spread(_el$1031, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1031;
  })();
}
export function LucideOctagonPause(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1032 = _$getNextElement(_tmpl$1031);
    _$spread(_el$1032, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1032;
  })();
}
export function LucideOctagonX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1033 = _$getNextElement(_tmpl$1032);
    _$spread(_el$1033, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1033;
  })();
}
export function LucideOctagon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1034 = _$getNextElement(_tmpl$1033);
    _$spread(_el$1034, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1034;
  })();
}
export function LucideOmega(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1035 = _$getNextElement(_tmpl$1034);
    _$spread(_el$1035, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1035;
  })();
}
export function LucideOption(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1036 = _$getNextElement(_tmpl$1035);
    _$spread(_el$1036, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1036;
  })();
}
export function LucideOrbit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1037 = _$getNextElement(_tmpl$1036);
    _$spread(_el$1037, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1037;
  })();
}
export function LucideOrigami(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1038 = _$getNextElement(_tmpl$1037);
    _$spread(_el$1038, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1038;
  })();
}
export function LucidePackage2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1039 = _$getNextElement(_tmpl$1038);
    _$spread(_el$1039, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1039;
  })();
}
export function LucidePackageCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1040 = _$getNextElement(_tmpl$1039);
    _$spread(_el$1040, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1040;
  })();
}
export function LucidePackageMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1041 = _$getNextElement(_tmpl$1040);
    _$spread(_el$1041, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1041;
  })();
}
export function LucidePackageOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1042 = _$getNextElement(_tmpl$1041);
    _$spread(_el$1042, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1042;
  })();
}
export function LucidePackagePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1043 = _$getNextElement(_tmpl$1042);
    _$spread(_el$1043, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1043;
  })();
}
export function LucidePackageSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1044 = _$getNextElement(_tmpl$1043);
    _$spread(_el$1044, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1044;
  })();
}
export function LucidePackageX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1045 = _$getNextElement(_tmpl$1044);
    _$spread(_el$1045, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1045;
  })();
}
export function LucidePackage(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1046 = _$getNextElement(_tmpl$1045);
    _$spread(_el$1046, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1046;
  })();
}
export function LucidePaintBucket(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1047 = _$getNextElement(_tmpl$1046);
    _$spread(_el$1047, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1047;
  })();
}
export function LucidePaintRoller(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1048 = _$getNextElement(_tmpl$1047);
    _$spread(_el$1048, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1048;
  })();
}
export function LucidePaintbrushVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1049 = _$getNextElement(_tmpl$1048);
    _$spread(_el$1049, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1049;
  })();
}
export function LucidePaintbrush(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1050 = _$getNextElement(_tmpl$1049);
    _$spread(_el$1050, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1050;
  })();
}
export function LucidePalette(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1051 = _$getNextElement(_tmpl$1050);
    _$spread(_el$1051, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1051;
  })();
}
export function LucidePanda(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1052 = _$getNextElement(_tmpl$1051);
    _$spread(_el$1052, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1052;
  })();
}
export function LucidePanelBottomClose(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1053 = _$getNextElement(_tmpl$1052);
    _$spread(_el$1053, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1053;
  })();
}
export function LucidePanelBottomDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1054 = _$getNextElement(_tmpl$1053);
    _$spread(_el$1054, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1054;
  })();
}
export function LucidePanelBottomOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1055 = _$getNextElement(_tmpl$1054);
    _$spread(_el$1055, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1055;
  })();
}
export function LucidePanelBottom(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1056 = _$getNextElement(_tmpl$1055);
    _$spread(_el$1056, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1056;
  })();
}
export function LucidePanelLeftClose(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1057 = _$getNextElement(_tmpl$1056);
    _$spread(_el$1057, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1057;
  })();
}
export function LucidePanelLeftDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1058 = _$getNextElement(_tmpl$1057);
    _$spread(_el$1058, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1058;
  })();
}
export function LucidePanelLeftOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1059 = _$getNextElement(_tmpl$1058);
    _$spread(_el$1059, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1059;
  })();
}
export function LucidePanelLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1060 = _$getNextElement(_tmpl$1059);
    _$spread(_el$1060, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1060;
  })();
}
export function LucidePanelRightClose(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1061 = _$getNextElement(_tmpl$1060);
    _$spread(_el$1061, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1061;
  })();
}
export function LucidePanelRightDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1062 = _$getNextElement(_tmpl$1061);
    _$spread(_el$1062, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1062;
  })();
}
export function LucidePanelRightOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1063 = _$getNextElement(_tmpl$1062);
    _$spread(_el$1063, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1063;
  })();
}
export function LucidePanelRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1064 = _$getNextElement(_tmpl$1063);
    _$spread(_el$1064, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1064;
  })();
}
export function LucidePanelTopClose(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1065 = _$getNextElement(_tmpl$1064);
    _$spread(_el$1065, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1065;
  })();
}
export function LucidePanelTopDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1066 = _$getNextElement(_tmpl$1065);
    _$spread(_el$1066, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1066;
  })();
}
export function LucidePanelTopOpen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1067 = _$getNextElement(_tmpl$1066);
    _$spread(_el$1067, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1067;
  })();
}
export function LucidePanelTop(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1068 = _$getNextElement(_tmpl$1067);
    _$spread(_el$1068, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1068;
  })();
}
export function LucidePanelsLeftBottom(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1069 = _$getNextElement(_tmpl$1068);
    _$spread(_el$1069, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1069;
  })();
}
export function LucidePanelsRightBottom(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1070 = _$getNextElement(_tmpl$1069);
    _$spread(_el$1070, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1070;
  })();
}
export function LucidePanelsTopLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1071 = _$getNextElement(_tmpl$1070);
    _$spread(_el$1071, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1071;
  })();
}
export function LucidePaperclip(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1072 = _$getNextElement(_tmpl$1071);
    _$spread(_el$1072, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1072;
  })();
}
export function LucideParentheses(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1073 = _$getNextElement(_tmpl$1072);
    _$spread(_el$1073, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1073;
  })();
}
export function LucideParkingMeter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1074 = _$getNextElement(_tmpl$1073);
    _$spread(_el$1074, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1074;
  })();
}
export function LucidePartyPopper(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1075 = _$getNextElement(_tmpl$1074);
    _$spread(_el$1075, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1075;
  })();
}
export function LucidePause(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1076 = _$getNextElement(_tmpl$1075);
    _$spread(_el$1076, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1076;
  })();
}
export function LucidePawPrint(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1077 = _$getNextElement(_tmpl$1076);
    _$spread(_el$1077, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1077;
  })();
}
export function LucidePcCase(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1078 = _$getNextElement(_tmpl$1077);
    _$spread(_el$1078, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1078;
  })();
}
export function LucidePenLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1079 = _$getNextElement(_tmpl$1078);
    _$spread(_el$1079, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1079;
  })();
}
export function LucidePenOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1080 = _$getNextElement(_tmpl$1079);
    _$spread(_el$1080, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1080;
  })();
}
export function LucidePenTool(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1081 = _$getNextElement(_tmpl$1080);
    _$spread(_el$1081, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1081;
  })();
}
export function LucidePen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1082 = _$getNextElement(_tmpl$1081);
    _$spread(_el$1082, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1082;
  })();
}
export function LucidePencilLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1083 = _$getNextElement(_tmpl$1082);
    _$spread(_el$1083, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1083;
  })();
}
export function LucidePencilOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1084 = _$getNextElement(_tmpl$1083);
    _$spread(_el$1084, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1084;
  })();
}
export function LucidePencilRuler(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1085 = _$getNextElement(_tmpl$1084);
    _$spread(_el$1085, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1085;
  })();
}
export function LucidePencil(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1086 = _$getNextElement(_tmpl$1085);
    _$spread(_el$1086, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1086;
  })();
}
export function LucidePentagon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1087 = _$getNextElement(_tmpl$1086);
    _$spread(_el$1087, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1087;
  })();
}
export function LucidePercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1088 = _$getNextElement(_tmpl$1087);
    _$spread(_el$1088, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1088;
  })();
}
export function LucidePersonStanding(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1089 = _$getNextElement(_tmpl$1088);
    _$spread(_el$1089, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1089;
  })();
}
export function LucidePhilippinePeso(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1090 = _$getNextElement(_tmpl$1089);
    _$spread(_el$1090, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1090;
  })();
}
export function LucidePhoneCall(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1091 = _$getNextElement(_tmpl$1090);
    _$spread(_el$1091, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1091;
  })();
}
export function LucidePhoneForwarded(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1092 = _$getNextElement(_tmpl$1091);
    _$spread(_el$1092, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1092;
  })();
}
export function LucidePhoneIncoming(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1093 = _$getNextElement(_tmpl$1092);
    _$spread(_el$1093, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1093;
  })();
}
export function LucidePhoneMissed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1094 = _$getNextElement(_tmpl$1093);
    _$spread(_el$1094, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1094;
  })();
}
export function LucidePhoneOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1095 = _$getNextElement(_tmpl$1094);
    _$spread(_el$1095, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1095;
  })();
}
export function LucidePhoneOutgoing(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1096 = _$getNextElement(_tmpl$1095);
    _$spread(_el$1096, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1096;
  })();
}
export function LucidePhone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1097 = _$getNextElement(_tmpl$1096);
    _$spread(_el$1097, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1097;
  })();
}
export function LucidePi(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1098 = _$getNextElement(_tmpl$1097);
    _$spread(_el$1098, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1098;
  })();
}
export function LucidePiano(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1099 = _$getNextElement(_tmpl$1098);
    _$spread(_el$1099, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1099;
  })();
}
export function LucidePickaxe(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1100 = _$getNextElement(_tmpl$1099);
    _$spread(_el$1100, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1100;
  })();
}
export function LucidePictureInPicture2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1101 = _$getNextElement(_tmpl$1100);
    _$spread(_el$1101, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1101;
  })();
}
export function LucidePictureInPicture(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1102 = _$getNextElement(_tmpl$1101);
    _$spread(_el$1102, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1102;
  })();
}
export function LucidePiggyBank(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1103 = _$getNextElement(_tmpl$1102);
    _$spread(_el$1103, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1103;
  })();
}
export function LucidePilcrowLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1104 = _$getNextElement(_tmpl$1103);
    _$spread(_el$1104, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1104;
  })();
}
export function LucidePilcrowRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1105 = _$getNextElement(_tmpl$1104);
    _$spread(_el$1105, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1105;
  })();
}
export function LucidePilcrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1106 = _$getNextElement(_tmpl$1105);
    _$spread(_el$1106, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1106;
  })();
}
export function LucidePillBottle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1107 = _$getNextElement(_tmpl$1106);
    _$spread(_el$1107, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1107;
  })();
}
export function LucidePill(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1108 = _$getNextElement(_tmpl$1107);
    _$spread(_el$1108, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1108;
  })();
}
export function LucidePinOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1109 = _$getNextElement(_tmpl$1108);
    _$spread(_el$1109, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1109;
  })();
}
export function LucidePin(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1110 = _$getNextElement(_tmpl$1109);
    _$spread(_el$1110, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1110;
  })();
}
export function LucidePipette(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1111 = _$getNextElement(_tmpl$1110);
    _$spread(_el$1111, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1111;
  })();
}
export function LucidePizza(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1112 = _$getNextElement(_tmpl$1111);
    _$spread(_el$1112, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1112;
  })();
}
export function LucidePlaneLanding(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1113 = _$getNextElement(_tmpl$1112);
    _$spread(_el$1113, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1113;
  })();
}
export function LucidePlaneTakeoff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1114 = _$getNextElement(_tmpl$1113);
    _$spread(_el$1114, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1114;
  })();
}
export function LucidePlane(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1115 = _$getNextElement(_tmpl$1114);
    _$spread(_el$1115, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1115;
  })();
}
export function LucidePlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1116 = _$getNextElement(_tmpl$1115);
    _$spread(_el$1116, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1116;
  })();
}
export function LucidePlug2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1117 = _$getNextElement(_tmpl$1116);
    _$spread(_el$1117, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1117;
  })();
}
export function LucidePlugZap(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1118 = _$getNextElement(_tmpl$1117);
    _$spread(_el$1118, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1118;
  })();
}
export function LucidePlug(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1119 = _$getNextElement(_tmpl$1118);
    _$spread(_el$1119, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1119;
  })();
}
export function LucidePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1120 = _$getNextElement(_tmpl$1119);
    _$spread(_el$1120, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1120;
  })();
}
export function LucidePocketKnife(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1121 = _$getNextElement(_tmpl$1120);
    _$spread(_el$1121, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1121;
  })();
}
export function LucidePocket(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1122 = _$getNextElement(_tmpl$1121);
    _$spread(_el$1122, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1122;
  })();
}
export function LucidePodcast(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1123 = _$getNextElement(_tmpl$1122);
    _$spread(_el$1123, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1123;
  })();
}
export function LucidePointerOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1124 = _$getNextElement(_tmpl$1123);
    _$spread(_el$1124, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1124;
  })();
}
export function LucidePointer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1125 = _$getNextElement(_tmpl$1124);
    _$spread(_el$1125, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1125;
  })();
}
export function LucidePopcorn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1126 = _$getNextElement(_tmpl$1125);
    _$spread(_el$1126, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1126;
  })();
}
export function LucidePopsicle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1127 = _$getNextElement(_tmpl$1126);
    _$spread(_el$1127, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1127;
  })();
}
export function LucidePoundSterling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1128 = _$getNextElement(_tmpl$1127);
    _$spread(_el$1128, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1128;
  })();
}
export function LucidePowerOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1129 = _$getNextElement(_tmpl$1128);
    _$spread(_el$1129, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1129;
  })();
}
export function LucidePower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1130 = _$getNextElement(_tmpl$1129);
    _$spread(_el$1130, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1130;
  })();
}
export function LucidePresentation(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1131 = _$getNextElement(_tmpl$1130);
    _$spread(_el$1131, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1131;
  })();
}
export function LucidePrinterCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1132 = _$getNextElement(_tmpl$1131);
    _$spread(_el$1132, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1132;
  })();
}
export function LucidePrinter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1133 = _$getNextElement(_tmpl$1132);
    _$spread(_el$1133, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1133;
  })();
}
export function LucideProjector(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1134 = _$getNextElement(_tmpl$1133);
    _$spread(_el$1134, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1134;
  })();
}
export function LucideProportions(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1135 = _$getNextElement(_tmpl$1134);
    _$spread(_el$1135, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1135;
  })();
}
export function LucidePuzzle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1136 = _$getNextElement(_tmpl$1135);
    _$spread(_el$1136, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1136;
  })();
}
export function LucidePyramid(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1137 = _$getNextElement(_tmpl$1136);
    _$spread(_el$1137, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1137;
  })();
}
export function LucideQrCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1138 = _$getNextElement(_tmpl$1137);
    _$spread(_el$1138, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1138;
  })();
}
export function LucideQuote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1139 = _$getNextElement(_tmpl$1138);
    _$spread(_el$1139, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1139;
  })();
}
export function LucideRabbit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1140 = _$getNextElement(_tmpl$1139);
    _$spread(_el$1140, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1140;
  })();
}
export function LucideRadar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1141 = _$getNextElement(_tmpl$1140);
    _$spread(_el$1141, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1141;
  })();
}
export function LucideRadiation(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1142 = _$getNextElement(_tmpl$1141);
    _$spread(_el$1142, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1142;
  })();
}
export function LucideRadical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1143 = _$getNextElement(_tmpl$1142);
    _$spread(_el$1143, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1143;
  })();
}
export function LucideRadioReceiver(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1144 = _$getNextElement(_tmpl$1143);
    _$spread(_el$1144, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1144;
  })();
}
export function LucideRadioTower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1145 = _$getNextElement(_tmpl$1144);
    _$spread(_el$1145, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1145;
  })();
}
export function LucideRadio(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1146 = _$getNextElement(_tmpl$1145);
    _$spread(_el$1146, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1146;
  })();
}
export function LucideRadius(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1147 = _$getNextElement(_tmpl$1146);
    _$spread(_el$1147, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1147;
  })();
}
export function LucideRailSymbol(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1148 = _$getNextElement(_tmpl$1147);
    _$spread(_el$1148, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1148;
  })();
}
export function LucideRainbow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1149 = _$getNextElement(_tmpl$1148);
    _$spread(_el$1149, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1149;
  })();
}
export function LucideRat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1150 = _$getNextElement(_tmpl$1149);
    _$spread(_el$1150, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1150;
  })();
}
export function LucideRatio(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1151 = _$getNextElement(_tmpl$1150);
    _$spread(_el$1151, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1151;
  })();
}
export function LucideReceiptCent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1152 = _$getNextElement(_tmpl$1151);
    _$spread(_el$1152, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1152;
  })();
}
export function LucideReceiptEuro(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1153 = _$getNextElement(_tmpl$1152);
    _$spread(_el$1153, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1153;
  })();
}
export function LucideReceiptIndianRupee(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1154 = _$getNextElement(_tmpl$1153);
    _$spread(_el$1154, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1154;
  })();
}
export function LucideReceiptJapaneseYen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1155 = _$getNextElement(_tmpl$1154);
    _$spread(_el$1155, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1155;
  })();
}
export function LucideReceiptPoundSterling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1156 = _$getNextElement(_tmpl$1155);
    _$spread(_el$1156, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1156;
  })();
}
export function LucideReceiptRussianRuble(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1157 = _$getNextElement(_tmpl$1156);
    _$spread(_el$1157, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1157;
  })();
}
export function LucideReceiptSwissFranc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1158 = _$getNextElement(_tmpl$1157);
    _$spread(_el$1158, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1158;
  })();
}
export function LucideReceiptText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1159 = _$getNextElement(_tmpl$1158);
    _$spread(_el$1159, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1159;
  })();
}
export function LucideReceipt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1160 = _$getNextElement(_tmpl$1159);
    _$spread(_el$1160, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1160;
  })();
}
export function LucideRectangleCircle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1161 = _$getNextElement(_tmpl$1160);
    _$spread(_el$1161, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1161;
  })();
}
export function LucideRectangleEllipsis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1162 = _$getNextElement(_tmpl$1161);
    _$spread(_el$1162, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1162;
  })();
}
export function LucideRectangleGoggles(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1163 = _$getNextElement(_tmpl$1162);
    _$spread(_el$1163, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1163;
  })();
}
export function LucideRectangleHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1164 = _$getNextElement(_tmpl$1163);
    _$spread(_el$1164, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1164;
  })();
}
export function LucideRectangleVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1165 = _$getNextElement(_tmpl$1164);
    _$spread(_el$1165, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1165;
  })();
}
export function LucideRecycle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1166 = _$getNextElement(_tmpl$1165);
    _$spread(_el$1166, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1166;
  })();
}
export function LucideRedo2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1167 = _$getNextElement(_tmpl$1166);
    _$spread(_el$1167, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1167;
  })();
}
export function LucideRedoDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1168 = _$getNextElement(_tmpl$1167);
    _$spread(_el$1168, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1168;
  })();
}
export function LucideRedo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1169 = _$getNextElement(_tmpl$1168);
    _$spread(_el$1169, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1169;
  })();
}
export function LucideRefreshCcwDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1170 = _$getNextElement(_tmpl$1169);
    _$spread(_el$1170, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1170;
  })();
}
export function LucideRefreshCcw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1171 = _$getNextElement(_tmpl$1170);
    _$spread(_el$1171, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1171;
  })();
}
export function LucideRefreshCwOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1172 = _$getNextElement(_tmpl$1171);
    _$spread(_el$1172, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1172;
  })();
}
export function LucideRefreshCw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1173 = _$getNextElement(_tmpl$1172);
    _$spread(_el$1173, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1173;
  })();
}
export function LucideRefrigerator(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1174 = _$getNextElement(_tmpl$1173);
    _$spread(_el$1174, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1174;
  })();
}
export function LucideRegex(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1175 = _$getNextElement(_tmpl$1174);
    _$spread(_el$1175, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1175;
  })();
}
export function LucideRemoveFormatting(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1176 = _$getNextElement(_tmpl$1175);
    _$spread(_el$1176, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1176;
  })();
}
export function LucideRepeat1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1177 = _$getNextElement(_tmpl$1176);
    _$spread(_el$1177, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1177;
  })();
}
export function LucideRepeat2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1178 = _$getNextElement(_tmpl$1177);
    _$spread(_el$1178, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1178;
  })();
}
export function LucideRepeat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1179 = _$getNextElement(_tmpl$1178);
    _$spread(_el$1179, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1179;
  })();
}
export function LucideReplaceAll(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1180 = _$getNextElement(_tmpl$1179);
    _$spread(_el$1180, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1180;
  })();
}
export function LucideReplace(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1181 = _$getNextElement(_tmpl$1180);
    _$spread(_el$1181, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1181;
  })();
}
export function LucideReplyAll(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1182 = _$getNextElement(_tmpl$1181);
    _$spread(_el$1182, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1182;
  })();
}
export function LucideReply(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1183 = _$getNextElement(_tmpl$1182);
    _$spread(_el$1183, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1183;
  })();
}
export function LucideRewind(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1184 = _$getNextElement(_tmpl$1183);
    _$spread(_el$1184, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1184;
  })();
}
export function LucideRibbon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1185 = _$getNextElement(_tmpl$1184);
    _$spread(_el$1185, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1185;
  })();
}
export function LucideRocket(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1186 = _$getNextElement(_tmpl$1185);
    _$spread(_el$1186, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1186;
  })();
}
export function LucideRockingChair(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1187 = _$getNextElement(_tmpl$1186);
    _$spread(_el$1187, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1187;
  })();
}
export function LucideRollerCoaster(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1188 = _$getNextElement(_tmpl$1187);
    _$spread(_el$1188, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1188;
  })();
}
export function LucideRotate3d(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1189 = _$getNextElement(_tmpl$1188);
    _$spread(_el$1189, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1189;
  })();
}
export function LucideRotateCcwKey(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1190 = _$getNextElement(_tmpl$1189);
    _$spread(_el$1190, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1190;
  })();
}
export function LucideRotateCcwSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1191 = _$getNextElement(_tmpl$1190);
    _$spread(_el$1191, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1191;
  })();
}
export function LucideRotateCcw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1192 = _$getNextElement(_tmpl$1191);
    _$spread(_el$1192, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1192;
  })();
}
export function LucideRotateCwSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1193 = _$getNextElement(_tmpl$1192);
    _$spread(_el$1193, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1193;
  })();
}
export function LucideRotateCw(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1194 = _$getNextElement(_tmpl$1193);
    _$spread(_el$1194, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1194;
  })();
}
export function LucideRouteOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1195 = _$getNextElement(_tmpl$1194);
    _$spread(_el$1195, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1195;
  })();
}
export function LucideRoute(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1196 = _$getNextElement(_tmpl$1195);
    _$spread(_el$1196, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1196;
  })();
}
export function LucideRouter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1197 = _$getNextElement(_tmpl$1196);
    _$spread(_el$1197, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1197;
  })();
}
export function LucideRows2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1198 = _$getNextElement(_tmpl$1197);
    _$spread(_el$1198, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1198;
  })();
}
export function LucideRows3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1199 = _$getNextElement(_tmpl$1198);
    _$spread(_el$1199, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1199;
  })();
}
export function LucideRows4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1200 = _$getNextElement(_tmpl$1199);
    _$spread(_el$1200, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1200;
  })();
}
export function LucideRss(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1201 = _$getNextElement(_tmpl$1200);
    _$spread(_el$1201, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1201;
  })();
}
export function LucideRulerDimensionLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1202 = _$getNextElement(_tmpl$1201);
    _$spread(_el$1202, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1202;
  })();
}
export function LucideRuler(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1203 = _$getNextElement(_tmpl$1202);
    _$spread(_el$1203, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1203;
  })();
}
export function LucideRussianRuble(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1204 = _$getNextElement(_tmpl$1203);
    _$spread(_el$1204, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1204;
  })();
}
export function LucideSailboat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1205 = _$getNextElement(_tmpl$1204);
    _$spread(_el$1205, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1205;
  })();
}
export function LucideSalad(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1206 = _$getNextElement(_tmpl$1205);
    _$spread(_el$1206, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1206;
  })();
}
export function LucideSandwich(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1207 = _$getNextElement(_tmpl$1206);
    _$spread(_el$1207, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1207;
  })();
}
export function LucideSatelliteDish(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1208 = _$getNextElement(_tmpl$1207);
    _$spread(_el$1208, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1208;
  })();
}
export function LucideSatellite(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1209 = _$getNextElement(_tmpl$1208);
    _$spread(_el$1209, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1209;
  })();
}
export function LucideSaudiRiyal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1210 = _$getNextElement(_tmpl$1209);
    _$spread(_el$1210, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1210;
  })();
}
export function LucideSaveAll(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1211 = _$getNextElement(_tmpl$1210);
    _$spread(_el$1211, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1211;
  })();
}
export function LucideSaveOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1212 = _$getNextElement(_tmpl$1211);
    _$spread(_el$1212, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1212;
  })();
}
export function LucideSave(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1213 = _$getNextElement(_tmpl$1212);
    _$spread(_el$1213, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1213;
  })();
}
export function LucideScale3d(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1214 = _$getNextElement(_tmpl$1213);
    _$spread(_el$1214, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1214;
  })();
}
export function LucideScale(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1215 = _$getNextElement(_tmpl$1214);
    _$spread(_el$1215, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1215;
  })();
}
export function LucideScaling(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1216 = _$getNextElement(_tmpl$1215);
    _$spread(_el$1216, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1216;
  })();
}
export function LucideScanBarcode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1217 = _$getNextElement(_tmpl$1216);
    _$spread(_el$1217, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1217;
  })();
}
export function LucideScanEye(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1218 = _$getNextElement(_tmpl$1217);
    _$spread(_el$1218, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1218;
  })();
}
export function LucideScanFace(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1219 = _$getNextElement(_tmpl$1218);
    _$spread(_el$1219, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1219;
  })();
}
export function LucideScanHeart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1220 = _$getNextElement(_tmpl$1219);
    _$spread(_el$1220, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1220;
  })();
}
export function LucideScanLine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1221 = _$getNextElement(_tmpl$1220);
    _$spread(_el$1221, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1221;
  })();
}
export function LucideScanQrCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1222 = _$getNextElement(_tmpl$1221);
    _$spread(_el$1222, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1222;
  })();
}
export function LucideScanSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1223 = _$getNextElement(_tmpl$1222);
    _$spread(_el$1223, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1223;
  })();
}
export function LucideScanText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1224 = _$getNextElement(_tmpl$1223);
    _$spread(_el$1224, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1224;
  })();
}
export function LucideScan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1225 = _$getNextElement(_tmpl$1224);
    _$spread(_el$1225, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1225;
  })();
}
export function LucideSchool(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1226 = _$getNextElement(_tmpl$1225);
    _$spread(_el$1226, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1226;
  })();
}
export function LucideScissorsLineDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1227 = _$getNextElement(_tmpl$1226);
    _$spread(_el$1227, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1227;
  })();
}
export function LucideScissors(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1228 = _$getNextElement(_tmpl$1227);
    _$spread(_el$1228, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1228;
  })();
}
export function LucideScreenShareOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1229 = _$getNextElement(_tmpl$1228);
    _$spread(_el$1229, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1229;
  })();
}
export function LucideScreenShare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1230 = _$getNextElement(_tmpl$1229);
    _$spread(_el$1230, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1230;
  })();
}
export function LucideScrollText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1231 = _$getNextElement(_tmpl$1230);
    _$spread(_el$1231, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1231;
  })();
}
export function LucideScroll(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1232 = _$getNextElement(_tmpl$1231);
    _$spread(_el$1232, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1232;
  })();
}
export function LucideSearchCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1233 = _$getNextElement(_tmpl$1232);
    _$spread(_el$1233, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1233;
  })();
}
export function LucideSearchCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1234 = _$getNextElement(_tmpl$1233);
    _$spread(_el$1234, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1234;
  })();
}
export function LucideSearchSlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1235 = _$getNextElement(_tmpl$1234);
    _$spread(_el$1235, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1235;
  })();
}
export function LucideSearchX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1236 = _$getNextElement(_tmpl$1235);
    _$spread(_el$1236, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1236;
  })();
}
export function LucideSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1237 = _$getNextElement(_tmpl$1236);
    _$spread(_el$1237, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1237;
  })();
}
export function LucideSection(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1238 = _$getNextElement(_tmpl$1237);
    _$spread(_el$1238, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1238;
  })();
}
export function LucideSendHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1239 = _$getNextElement(_tmpl$1238);
    _$spread(_el$1239, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1239;
  })();
}
export function LucideSendToBack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1240 = _$getNextElement(_tmpl$1239);
    _$spread(_el$1240, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1240;
  })();
}
export function LucideSend(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1241 = _$getNextElement(_tmpl$1240);
    _$spread(_el$1241, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1241;
  })();
}
export function LucideSeparatorHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1242 = _$getNextElement(_tmpl$1241);
    _$spread(_el$1242, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1242;
  })();
}
export function LucideSeparatorVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1243 = _$getNextElement(_tmpl$1242);
    _$spread(_el$1243, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1243;
  })();
}
export function LucideServerCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1244 = _$getNextElement(_tmpl$1243);
    _$spread(_el$1244, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1244;
  })();
}
export function LucideServerCrash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1245 = _$getNextElement(_tmpl$1244);
    _$spread(_el$1245, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1245;
  })();
}
export function LucideServerOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1246 = _$getNextElement(_tmpl$1245);
    _$spread(_el$1246, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1246;
  })();
}
export function LucideServer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1247 = _$getNextElement(_tmpl$1246);
    _$spread(_el$1247, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1247;
  })();
}
export function LucideSettings2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1248 = _$getNextElement(_tmpl$1247);
    _$spread(_el$1248, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1248;
  })();
}
export function LucideSettings(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1249 = _$getNextElement(_tmpl$1248);
    _$spread(_el$1249, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1249;
  })();
}
export function LucideShapes(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1250 = _$getNextElement(_tmpl$1249);
    _$spread(_el$1250, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1250;
  })();
}
export function LucideShare2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1251 = _$getNextElement(_tmpl$1250);
    _$spread(_el$1251, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1251;
  })();
}
export function LucideShare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1252 = _$getNextElement(_tmpl$1251);
    _$spread(_el$1252, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1252;
  })();
}
export function LucideSheet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1253 = _$getNextElement(_tmpl$1252);
    _$spread(_el$1253, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1253;
  })();
}
export function LucideShell(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1254 = _$getNextElement(_tmpl$1253);
    _$spread(_el$1254, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1254;
  })();
}
export function LucideShieldAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1255 = _$getNextElement(_tmpl$1254);
    _$spread(_el$1255, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1255;
  })();
}
export function LucideShieldBan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1256 = _$getNextElement(_tmpl$1255);
    _$spread(_el$1256, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1256;
  })();
}
export function LucideShieldCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1257 = _$getNextElement(_tmpl$1256);
    _$spread(_el$1257, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1257;
  })();
}
export function LucideShieldEllipsis(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1258 = _$getNextElement(_tmpl$1257);
    _$spread(_el$1258, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1258;
  })();
}
export function LucideShieldHalf(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1259 = _$getNextElement(_tmpl$1258);
    _$spread(_el$1259, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1259;
  })();
}
export function LucideShieldMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1260 = _$getNextElement(_tmpl$1259);
    _$spread(_el$1260, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1260;
  })();
}
export function LucideShieldOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1261 = _$getNextElement(_tmpl$1260);
    _$spread(_el$1261, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1261;
  })();
}
export function LucideShieldPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1262 = _$getNextElement(_tmpl$1261);
    _$spread(_el$1262, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1262;
  })();
}
export function LucideShieldQuestionMark(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1263 = _$getNextElement(_tmpl$1262);
    _$spread(_el$1263, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1263;
  })();
}
export function LucideShieldUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1264 = _$getNextElement(_tmpl$1263);
    _$spread(_el$1264, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1264;
  })();
}
export function LucideShieldX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1265 = _$getNextElement(_tmpl$1264);
    _$spread(_el$1265, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1265;
  })();
}
export function LucideShield(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1266 = _$getNextElement(_tmpl$1265);
    _$spread(_el$1266, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1266;
  })();
}
export function LucideShipWheel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1267 = _$getNextElement(_tmpl$1266);
    _$spread(_el$1267, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1267;
  })();
}
export function LucideShip(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1268 = _$getNextElement(_tmpl$1267);
    _$spread(_el$1268, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1268;
  })();
}
export function LucideShirt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1269 = _$getNextElement(_tmpl$1268);
    _$spread(_el$1269, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1269;
  })();
}
export function LucideShoppingBag(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1270 = _$getNextElement(_tmpl$1269);
    _$spread(_el$1270, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1270;
  })();
}
export function LucideShoppingBasket(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1271 = _$getNextElement(_tmpl$1270);
    _$spread(_el$1271, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1271;
  })();
}
export function LucideShoppingCart(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1272 = _$getNextElement(_tmpl$1271);
    _$spread(_el$1272, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1272;
  })();
}
export function LucideShovel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1273 = _$getNextElement(_tmpl$1272);
    _$spread(_el$1273, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1273;
  })();
}
export function LucideShowerHead(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1274 = _$getNextElement(_tmpl$1273);
    _$spread(_el$1274, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1274;
  })();
}
export function LucideShredder(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1275 = _$getNextElement(_tmpl$1274);
    _$spread(_el$1275, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1275;
  })();
}
export function LucideShrimp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1276 = _$getNextElement(_tmpl$1275);
    _$spread(_el$1276, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1276;
  })();
}
export function LucideShrink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1277 = _$getNextElement(_tmpl$1276);
    _$spread(_el$1277, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1277;
  })();
}
export function LucideShrub(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1278 = _$getNextElement(_tmpl$1277);
    _$spread(_el$1278, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1278;
  })();
}
export function LucideShuffle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1279 = _$getNextElement(_tmpl$1278);
    _$spread(_el$1279, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1279;
  })();
}
export function LucideSigma(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1280 = _$getNextElement(_tmpl$1279);
    _$spread(_el$1280, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1280;
  })();
}
export function LucideSignalHigh(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1281 = _$getNextElement(_tmpl$1280);
    _$spread(_el$1281, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1281;
  })();
}
export function LucideSignalLow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1282 = _$getNextElement(_tmpl$1281);
    _$spread(_el$1282, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1282;
  })();
}
export function LucideSignalMedium(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1283 = _$getNextElement(_tmpl$1282);
    _$spread(_el$1283, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1283;
  })();
}
export function LucideSignalZero(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1284 = _$getNextElement(_tmpl$1283);
    _$spread(_el$1284, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1284;
  })();
}
export function LucideSignal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1285 = _$getNextElement(_tmpl$1284);
    _$spread(_el$1285, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1285;
  })();
}
export function LucideSignature(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1286 = _$getNextElement(_tmpl$1285);
    _$spread(_el$1286, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1286;
  })();
}
export function LucideSignpostBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1287 = _$getNextElement(_tmpl$1286);
    _$spread(_el$1287, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1287;
  })();
}
export function LucideSignpost(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1288 = _$getNextElement(_tmpl$1287);
    _$spread(_el$1288, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1288;
  })();
}
export function LucideSiren(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1289 = _$getNextElement(_tmpl$1288);
    _$spread(_el$1289, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1289;
  })();
}
export function LucideSkipBack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1290 = _$getNextElement(_tmpl$1289);
    _$spread(_el$1290, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1290;
  })();
}
export function LucideSkipForward(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1291 = _$getNextElement(_tmpl$1290);
    _$spread(_el$1291, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1291;
  })();
}
export function LucideSkull(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1292 = _$getNextElement(_tmpl$1291);
    _$spread(_el$1292, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1292;
  })();
}
export function LucideSlack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1293 = _$getNextElement(_tmpl$1292);
    _$spread(_el$1293, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1293;
  })();
}
export function LucideSlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1294 = _$getNextElement(_tmpl$1293);
    _$spread(_el$1294, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1294;
  })();
}
export function LucideSlice(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1295 = _$getNextElement(_tmpl$1294);
    _$spread(_el$1295, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1295;
  })();
}
export function LucideSlidersHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1296 = _$getNextElement(_tmpl$1295);
    _$spread(_el$1296, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1296;
  })();
}
export function LucideSlidersVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1297 = _$getNextElement(_tmpl$1296);
    _$spread(_el$1297, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1297;
  })();
}
export function LucideSmartphoneCharging(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1298 = _$getNextElement(_tmpl$1297);
    _$spread(_el$1298, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1298;
  })();
}
export function LucideSmartphoneNfc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1299 = _$getNextElement(_tmpl$1298);
    _$spread(_el$1299, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1299;
  })();
}
export function LucideSmartphone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1300 = _$getNextElement(_tmpl$1299);
    _$spread(_el$1300, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1300;
  })();
}
export function LucideSmilePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1301 = _$getNextElement(_tmpl$1300);
    _$spread(_el$1301, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1301;
  })();
}
export function LucideSmile(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1302 = _$getNextElement(_tmpl$1301);
    _$spread(_el$1302, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1302;
  })();
}
export function LucideSnail(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1303 = _$getNextElement(_tmpl$1302);
    _$spread(_el$1303, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1303;
  })();
}
export function LucideSnowflake(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1304 = _$getNextElement(_tmpl$1303);
    _$spread(_el$1304, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1304;
  })();
}
export function LucideSoapDispenserDroplet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1305 = _$getNextElement(_tmpl$1304);
    _$spread(_el$1305, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1305;
  })();
}
export function LucideSofa(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1306 = _$getNextElement(_tmpl$1305);
    _$spread(_el$1306, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1306;
  })();
}
export function LucideSoup(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1307 = _$getNextElement(_tmpl$1306);
    _$spread(_el$1307, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1307;
  })();
}
export function LucideSpace(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1308 = _$getNextElement(_tmpl$1307);
    _$spread(_el$1308, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1308;
  })();
}
export function LucideSpade(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1309 = _$getNextElement(_tmpl$1308);
    _$spread(_el$1309, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1309;
  })();
}
export function LucideSparkle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1310 = _$getNextElement(_tmpl$1309);
    _$spread(_el$1310, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1310;
  })();
}
export function LucideSparkles(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1311 = _$getNextElement(_tmpl$1310);
    _$spread(_el$1311, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1311;
  })();
}
export function LucideSpeaker(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1312 = _$getNextElement(_tmpl$1311);
    _$spread(_el$1312, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1312;
  })();
}
export function LucideSpeech(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1313 = _$getNextElement(_tmpl$1312);
    _$spread(_el$1313, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1313;
  })();
}
export function LucideSpellCheck2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1314 = _$getNextElement(_tmpl$1313);
    _$spread(_el$1314, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1314;
  })();
}
export function LucideSpellCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1315 = _$getNextElement(_tmpl$1314);
    _$spread(_el$1315, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1315;
  })();
}
export function LucideSplinePointer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1316 = _$getNextElement(_tmpl$1315);
    _$spread(_el$1316, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1316;
  })();
}
export function LucideSpline(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1317 = _$getNextElement(_tmpl$1316);
    _$spread(_el$1317, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1317;
  })();
}
export function LucideSplit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1318 = _$getNextElement(_tmpl$1317);
    _$spread(_el$1318, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1318;
  })();
}
export function LucideSpool(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1319 = _$getNextElement(_tmpl$1318);
    _$spread(_el$1319, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1319;
  })();
}
export function LucideSprayCan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1320 = _$getNextElement(_tmpl$1319);
    _$spread(_el$1320, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1320;
  })();
}
export function LucideSprout(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1321 = _$getNextElement(_tmpl$1320);
    _$spread(_el$1321, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1321;
  })();
}
export function LucideSquareActivity(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1322 = _$getNextElement(_tmpl$1321);
    _$spread(_el$1322, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1322;
  })();
}
export function LucideSquareArrowDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1323 = _$getNextElement(_tmpl$1322);
    _$spread(_el$1323, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1323;
  })();
}
export function LucideSquareArrowDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1324 = _$getNextElement(_tmpl$1323);
    _$spread(_el$1324, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1324;
  })();
}
export function LucideSquareArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1325 = _$getNextElement(_tmpl$1324);
    _$spread(_el$1325, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1325;
  })();
}
export function LucideSquareArrowLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1326 = _$getNextElement(_tmpl$1325);
    _$spread(_el$1326, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1326;
  })();
}
export function LucideSquareArrowOutDownLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1327 = _$getNextElement(_tmpl$1326);
    _$spread(_el$1327, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1327;
  })();
}
export function LucideSquareArrowOutDownRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1328 = _$getNextElement(_tmpl$1327);
    _$spread(_el$1328, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1328;
  })();
}
export function LucideSquareArrowOutUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1329 = _$getNextElement(_tmpl$1328);
    _$spread(_el$1329, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1329;
  })();
}
export function LucideSquareArrowOutUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1330 = _$getNextElement(_tmpl$1329);
    _$spread(_el$1330, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1330;
  })();
}
export function LucideSquareArrowRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1331 = _$getNextElement(_tmpl$1330);
    _$spread(_el$1331, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1331;
  })();
}
export function LucideSquareArrowUpLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1332 = _$getNextElement(_tmpl$1331);
    _$spread(_el$1332, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1332;
  })();
}
export function LucideSquareArrowUpRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1333 = _$getNextElement(_tmpl$1332);
    _$spread(_el$1333, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1333;
  })();
}
export function LucideSquareArrowUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1334 = _$getNextElement(_tmpl$1333);
    _$spread(_el$1334, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1334;
  })();
}
export function LucideSquareAsterisk(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1335 = _$getNextElement(_tmpl$1334);
    _$spread(_el$1335, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1335;
  })();
}
export function LucideSquareBottomDashedScissors(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1336 = _$getNextElement(_tmpl$1335);
    _$spread(_el$1336, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1336;
  })();
}
export function LucideSquareChartGantt(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1337 = _$getNextElement(_tmpl$1336);
    _$spread(_el$1337, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1337;
  })();
}
export function LucideSquareCheckBig(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1338 = _$getNextElement(_tmpl$1337);
    _$spread(_el$1338, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1338;
  })();
}
export function LucideSquareCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1339 = _$getNextElement(_tmpl$1338);
    _$spread(_el$1339, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1339;
  })();
}
export function LucideSquareChevronDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1340 = _$getNextElement(_tmpl$1339);
    _$spread(_el$1340, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1340;
  })();
}
export function LucideSquareChevronLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1341 = _$getNextElement(_tmpl$1340);
    _$spread(_el$1341, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1341;
  })();
}
export function LucideSquareChevronRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1342 = _$getNextElement(_tmpl$1341);
    _$spread(_el$1342, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1342;
  })();
}
export function LucideSquareChevronUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1343 = _$getNextElement(_tmpl$1342);
    _$spread(_el$1343, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1343;
  })();
}
export function LucideSquareCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1344 = _$getNextElement(_tmpl$1343);
    _$spread(_el$1344, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1344;
  })();
}
export function LucideSquareDashedBottomCode(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1345 = _$getNextElement(_tmpl$1344);
    _$spread(_el$1345, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1345;
  })();
}
export function LucideSquareDashedBottom(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1346 = _$getNextElement(_tmpl$1345);
    _$spread(_el$1346, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1346;
  })();
}
export function LucideSquareDashedKanban(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1347 = _$getNextElement(_tmpl$1346);
    _$spread(_el$1347, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1347;
  })();
}
export function LucideSquareDashedMousePointer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1348 = _$getNextElement(_tmpl$1347);
    _$spread(_el$1348, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1348;
  })();
}
export function LucideSquareDashedTopSolid(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1349 = _$getNextElement(_tmpl$1348);
    _$spread(_el$1349, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1349;
  })();
}
export function LucideSquareDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1350 = _$getNextElement(_tmpl$1349);
    _$spread(_el$1350, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1350;
  })();
}
export function LucideSquareDivide(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1351 = _$getNextElement(_tmpl$1350);
    _$spread(_el$1351, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1351;
  })();
}
export function LucideSquareDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1352 = _$getNextElement(_tmpl$1351);
    _$spread(_el$1352, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1352;
  })();
}
export function LucideSquareEqual(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1353 = _$getNextElement(_tmpl$1352);
    _$spread(_el$1353, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1353;
  })();
}
export function LucideSquareFunction(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1354 = _$getNextElement(_tmpl$1353);
    _$spread(_el$1354, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1354;
  })();
}
export function LucideSquareKanban(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1355 = _$getNextElement(_tmpl$1354);
    _$spread(_el$1355, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1355;
  })();
}
export function LucideSquareLibrary(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1356 = _$getNextElement(_tmpl$1355);
    _$spread(_el$1356, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1356;
  })();
}
export function LucideSquareM(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1357 = _$getNextElement(_tmpl$1356);
    _$spread(_el$1357, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1357;
  })();
}
export function LucideSquareMenu(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1358 = _$getNextElement(_tmpl$1357);
    _$spread(_el$1358, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1358;
  })();
}
export function LucideSquareMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1359 = _$getNextElement(_tmpl$1358);
    _$spread(_el$1359, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1359;
  })();
}
export function LucideSquareMousePointer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1360 = _$getNextElement(_tmpl$1359);
    _$spread(_el$1360, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1360;
  })();
}
export function LucideSquareParkingOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1361 = _$getNextElement(_tmpl$1360);
    _$spread(_el$1361, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1361;
  })();
}
export function LucideSquareParking(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1362 = _$getNextElement(_tmpl$1361);
    _$spread(_el$1362, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1362;
  })();
}
export function LucideSquarePen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1363 = _$getNextElement(_tmpl$1362);
    _$spread(_el$1363, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1363;
  })();
}
export function LucideSquarePercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1364 = _$getNextElement(_tmpl$1363);
    _$spread(_el$1364, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1364;
  })();
}
export function LucideSquarePi(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1365 = _$getNextElement(_tmpl$1364);
    _$spread(_el$1365, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1365;
  })();
}
export function LucideSquarePilcrow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1366 = _$getNextElement(_tmpl$1365);
    _$spread(_el$1366, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1366;
  })();
}
export function LucideSquarePlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1367 = _$getNextElement(_tmpl$1366);
    _$spread(_el$1367, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1367;
  })();
}
export function LucideSquarePlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1368 = _$getNextElement(_tmpl$1367);
    _$spread(_el$1368, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1368;
  })();
}
export function LucideSquarePower(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1369 = _$getNextElement(_tmpl$1368);
    _$spread(_el$1369, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1369;
  })();
}
export function LucideSquareRadical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1370 = _$getNextElement(_tmpl$1369);
    _$spread(_el$1370, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1370;
  })();
}
export function LucideSquareRoundCorner(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1371 = _$getNextElement(_tmpl$1370);
    _$spread(_el$1371, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1371;
  })();
}
export function LucideSquareScissors(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1372 = _$getNextElement(_tmpl$1371);
    _$spread(_el$1372, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1372;
  })();
}
export function LucideSquareSigma(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1373 = _$getNextElement(_tmpl$1372);
    _$spread(_el$1373, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1373;
  })();
}
export function LucideSquareSlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1374 = _$getNextElement(_tmpl$1373);
    _$spread(_el$1374, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1374;
  })();
}
export function LucideSquareSplitHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1375 = _$getNextElement(_tmpl$1374);
    _$spread(_el$1375, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1375;
  })();
}
export function LucideSquareSplitVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1376 = _$getNextElement(_tmpl$1375);
    _$spread(_el$1376, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1376;
  })();
}
export function LucideSquareSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1377 = _$getNextElement(_tmpl$1376);
    _$spread(_el$1377, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1377;
  })();
}
export function LucideSquareStack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1378 = _$getNextElement(_tmpl$1377);
    _$spread(_el$1378, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1378;
  })();
}
export function LucideSquareTerminal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1379 = _$getNextElement(_tmpl$1378);
    _$spread(_el$1379, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1379;
  })();
}
export function LucideSquareUserRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1380 = _$getNextElement(_tmpl$1379);
    _$spread(_el$1380, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1380;
  })();
}
export function LucideSquareUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1381 = _$getNextElement(_tmpl$1380);
    _$spread(_el$1381, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1381;
  })();
}
export function LucideSquareX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1382 = _$getNextElement(_tmpl$1381);
    _$spread(_el$1382, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1382;
  })();
}
export function LucideSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1383 = _$getNextElement(_tmpl$1382);
    _$spread(_el$1383, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1383;
  })();
}
export function LucideSquaresExclude(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1384 = _$getNextElement(_tmpl$1383);
    _$spread(_el$1384, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1384;
  })();
}
export function LucideSquaresIntersect(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1385 = _$getNextElement(_tmpl$1384);
    _$spread(_el$1385, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1385;
  })();
}
export function LucideSquaresSubtract(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1386 = _$getNextElement(_tmpl$1385);
    _$spread(_el$1386, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1386;
  })();
}
export function LucideSquaresUnite(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1387 = _$getNextElement(_tmpl$1386);
    _$spread(_el$1387, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1387;
  })();
}
export function LucideSquircleDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1388 = _$getNextElement(_tmpl$1387);
    _$spread(_el$1388, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1388;
  })();
}
export function LucideSquircle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1389 = _$getNextElement(_tmpl$1388);
    _$spread(_el$1389, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1389;
  })();
}
export function LucideSquirrel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1390 = _$getNextElement(_tmpl$1389);
    _$spread(_el$1390, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1390;
  })();
}
export function LucideStamp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1391 = _$getNextElement(_tmpl$1390);
    _$spread(_el$1391, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1391;
  })();
}
export function LucideStarHalf(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1392 = _$getNextElement(_tmpl$1391);
    _$spread(_el$1392, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1392;
  })();
}
export function LucideStarOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1393 = _$getNextElement(_tmpl$1392);
    _$spread(_el$1393, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1393;
  })();
}
export function LucideStar(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1394 = _$getNextElement(_tmpl$1393);
    _$spread(_el$1394, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1394;
  })();
}
export function LucideStepBack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1395 = _$getNextElement(_tmpl$1394);
    _$spread(_el$1395, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1395;
  })();
}
export function LucideStepForward(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1396 = _$getNextElement(_tmpl$1395);
    _$spread(_el$1396, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1396;
  })();
}
export function LucideStethoscope(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1397 = _$getNextElement(_tmpl$1396);
    _$spread(_el$1397, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1397;
  })();
}
export function LucideSticker(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1398 = _$getNextElement(_tmpl$1397);
    _$spread(_el$1398, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1398;
  })();
}
export function LucideStickyNote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1399 = _$getNextElement(_tmpl$1398);
    _$spread(_el$1399, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1399;
  })();
}
export function LucideStore(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1400 = _$getNextElement(_tmpl$1399);
    _$spread(_el$1400, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1400;
  })();
}
export function LucideStretchHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1401 = _$getNextElement(_tmpl$1400);
    _$spread(_el$1401, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1401;
  })();
}
export function LucideStretchVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1402 = _$getNextElement(_tmpl$1401);
    _$spread(_el$1402, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1402;
  })();
}
export function LucideStrikethrough(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1403 = _$getNextElement(_tmpl$1402);
    _$spread(_el$1403, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1403;
  })();
}
export function LucideSubscript(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1404 = _$getNextElement(_tmpl$1403);
    _$spread(_el$1404, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1404;
  })();
}
export function LucideSunDim(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1405 = _$getNextElement(_tmpl$1404);
    _$spread(_el$1405, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1405;
  })();
}
export function LucideSunMedium(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1406 = _$getNextElement(_tmpl$1405);
    _$spread(_el$1406, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1406;
  })();
}
export function LucideSunMoon(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1407 = _$getNextElement(_tmpl$1406);
    _$spread(_el$1407, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1407;
  })();
}
export function LucideSunSnow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1408 = _$getNextElement(_tmpl$1407);
    _$spread(_el$1408, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1408;
  })();
}
export function LucideSun(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1409 = _$getNextElement(_tmpl$1408);
    _$spread(_el$1409, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1409;
  })();
}
export function LucideSunrise(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1410 = _$getNextElement(_tmpl$1409);
    _$spread(_el$1410, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1410;
  })();
}
export function LucideSunset(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1411 = _$getNextElement(_tmpl$1410);
    _$spread(_el$1411, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1411;
  })();
}
export function LucideSuperscript(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1412 = _$getNextElement(_tmpl$1411);
    _$spread(_el$1412, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1412;
  })();
}
export function LucideSwatchBook(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1413 = _$getNextElement(_tmpl$1412);
    _$spread(_el$1413, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1413;
  })();
}
export function LucideSwissFranc(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1414 = _$getNextElement(_tmpl$1413);
    _$spread(_el$1414, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1414;
  })();
}
export function LucideSwitchCamera(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1415 = _$getNextElement(_tmpl$1414);
    _$spread(_el$1415, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1415;
  })();
}
export function LucideSword(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1416 = _$getNextElement(_tmpl$1415);
    _$spread(_el$1416, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1416;
  })();
}
export function LucideSwords(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1417 = _$getNextElement(_tmpl$1416);
    _$spread(_el$1417, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1417;
  })();
}
export function LucideSyringe(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1418 = _$getNextElement(_tmpl$1417);
    _$spread(_el$1418, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1418;
  })();
}
export function LucideTable2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1419 = _$getNextElement(_tmpl$1418);
    _$spread(_el$1419, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1419;
  })();
}
export function LucideTableCellsMerge(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1420 = _$getNextElement(_tmpl$1419);
    _$spread(_el$1420, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1420;
  })();
}
export function LucideTableCellsSplit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1421 = _$getNextElement(_tmpl$1420);
    _$spread(_el$1421, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1421;
  })();
}
export function LucideTableColumnsSplit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1422 = _$getNextElement(_tmpl$1421);
    _$spread(_el$1422, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1422;
  })();
}
export function LucideTableOfContents(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1423 = _$getNextElement(_tmpl$1422);
    _$spread(_el$1423, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1423;
  })();
}
export function LucideTableProperties(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1424 = _$getNextElement(_tmpl$1423);
    _$spread(_el$1424, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1424;
  })();
}
export function LucideTableRowsSplit(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1425 = _$getNextElement(_tmpl$1424);
    _$spread(_el$1425, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1425;
  })();
}
export function LucideTable(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1426 = _$getNextElement(_tmpl$1425);
    _$spread(_el$1426, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1426;
  })();
}
export function LucideTabletSmartphone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1427 = _$getNextElement(_tmpl$1426);
    _$spread(_el$1427, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1427;
  })();
}
export function LucideTablet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1428 = _$getNextElement(_tmpl$1427);
    _$spread(_el$1428, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1428;
  })();
}
export function LucideTablets(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1429 = _$getNextElement(_tmpl$1428);
    _$spread(_el$1429, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1429;
  })();
}
export function LucideTag(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1430 = _$getNextElement(_tmpl$1429);
    _$spread(_el$1430, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1430;
  })();
}
export function LucideTags(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1431 = _$getNextElement(_tmpl$1430);
    _$spread(_el$1431, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1431;
  })();
}
export function LucideTally1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1432 = _$getNextElement(_tmpl$1431);
    _$spread(_el$1432, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1432;
  })();
}
export function LucideTally2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1433 = _$getNextElement(_tmpl$1432);
    _$spread(_el$1433, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1433;
  })();
}
export function LucideTally3(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1434 = _$getNextElement(_tmpl$1433);
    _$spread(_el$1434, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1434;
  })();
}
export function LucideTally4(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1435 = _$getNextElement(_tmpl$1434);
    _$spread(_el$1435, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1435;
  })();
}
export function LucideTally5(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1436 = _$getNextElement(_tmpl$1435);
    _$spread(_el$1436, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1436;
  })();
}
export function LucideTangent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1437 = _$getNextElement(_tmpl$1436);
    _$spread(_el$1437, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1437;
  })();
}
export function LucideTarget(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1438 = _$getNextElement(_tmpl$1437);
    _$spread(_el$1438, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1438;
  })();
}
export function LucideTelescope(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1439 = _$getNextElement(_tmpl$1438);
    _$spread(_el$1439, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1439;
  })();
}
export function LucideTentTree(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1440 = _$getNextElement(_tmpl$1439);
    _$spread(_el$1440, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1440;
  })();
}
export function LucideTent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1441 = _$getNextElement(_tmpl$1440);
    _$spread(_el$1441, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1441;
  })();
}
export function LucideTerminal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1442 = _$getNextElement(_tmpl$1441);
    _$spread(_el$1442, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1442;
  })();
}
export function LucideTestTubeDiagonal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1443 = _$getNextElement(_tmpl$1442);
    _$spread(_el$1443, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1443;
  })();
}
export function LucideTestTube(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1444 = _$getNextElement(_tmpl$1443);
    _$spread(_el$1444, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1444;
  })();
}
export function LucideTestTubes(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1445 = _$getNextElement(_tmpl$1444);
    _$spread(_el$1445, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1445;
  })();
}
export function LucideTextCursorInput(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1446 = _$getNextElement(_tmpl$1445);
    _$spread(_el$1446, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1446;
  })();
}
export function LucideTextCursor(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1447 = _$getNextElement(_tmpl$1446);
    _$spread(_el$1447, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1447;
  })();
}
export function LucideTextQuote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1448 = _$getNextElement(_tmpl$1447);
    _$spread(_el$1448, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1448;
  })();
}
export function LucideTextSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1449 = _$getNextElement(_tmpl$1448);
    _$spread(_el$1449, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1449;
  })();
}
export function LucideTextSelect(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1450 = _$getNextElement(_tmpl$1449);
    _$spread(_el$1450, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1450;
  })();
}
export function LucideText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1451 = _$getNextElement(_tmpl$1450);
    _$spread(_el$1451, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1451;
  })();
}
export function LucideTheater(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1452 = _$getNextElement(_tmpl$1451);
    _$spread(_el$1452, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1452;
  })();
}
export function LucideThermometerSnowflake(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1453 = _$getNextElement(_tmpl$1452);
    _$spread(_el$1453, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1453;
  })();
}
export function LucideThermometerSun(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1454 = _$getNextElement(_tmpl$1453);
    _$spread(_el$1454, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1454;
  })();
}
export function LucideThermometer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1455 = _$getNextElement(_tmpl$1454);
    _$spread(_el$1455, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1455;
  })();
}
export function LucideThumbsDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1456 = _$getNextElement(_tmpl$1455);
    _$spread(_el$1456, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1456;
  })();
}
export function LucideThumbsUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1457 = _$getNextElement(_tmpl$1456);
    _$spread(_el$1457, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1457;
  })();
}
export function LucideTicketCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1458 = _$getNextElement(_tmpl$1457);
    _$spread(_el$1458, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1458;
  })();
}
export function LucideTicketMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1459 = _$getNextElement(_tmpl$1458);
    _$spread(_el$1459, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1459;
  })();
}
export function LucideTicketPercent(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1460 = _$getNextElement(_tmpl$1459);
    _$spread(_el$1460, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1460;
  })();
}
export function LucideTicketPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1461 = _$getNextElement(_tmpl$1460);
    _$spread(_el$1461, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1461;
  })();
}
export function LucideTicketSlash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1462 = _$getNextElement(_tmpl$1461);
    _$spread(_el$1462, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1462;
  })();
}
export function LucideTicketX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1463 = _$getNextElement(_tmpl$1462);
    _$spread(_el$1463, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1463;
  })();
}
export function LucideTicket(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1464 = _$getNextElement(_tmpl$1463);
    _$spread(_el$1464, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1464;
  })();
}
export function LucideTicketsPlane(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1465 = _$getNextElement(_tmpl$1464);
    _$spread(_el$1465, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1465;
  })();
}
export function LucideTickets(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1466 = _$getNextElement(_tmpl$1465);
    _$spread(_el$1466, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1466;
  })();
}
export function LucideTimerOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1467 = _$getNextElement(_tmpl$1466);
    _$spread(_el$1467, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1467;
  })();
}
export function LucideTimerReset(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1468 = _$getNextElement(_tmpl$1467);
    _$spread(_el$1468, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1468;
  })();
}
export function LucideTimer(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1469 = _$getNextElement(_tmpl$1468);
    _$spread(_el$1469, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1469;
  })();
}
export function LucideToggleLeft(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1470 = _$getNextElement(_tmpl$1469);
    _$spread(_el$1470, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1470;
  })();
}
export function LucideToggleRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1471 = _$getNextElement(_tmpl$1470);
    _$spread(_el$1471, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1471;
  })();
}
export function LucideToilet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1472 = _$getNextElement(_tmpl$1471);
    _$spread(_el$1472, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1472;
  })();
}
export function LucideToolCase(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1473 = _$getNextElement(_tmpl$1472);
    _$spread(_el$1473, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1473;
  })();
}
export function LucideTornado(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1474 = _$getNextElement(_tmpl$1473);
    _$spread(_el$1474, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1474;
  })();
}
export function LucideTorus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1475 = _$getNextElement(_tmpl$1474);
    _$spread(_el$1475, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1475;
  })();
}
export function LucideTouchpadOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1476 = _$getNextElement(_tmpl$1475);
    _$spread(_el$1476, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1476;
  })();
}
export function LucideTouchpad(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1477 = _$getNextElement(_tmpl$1476);
    _$spread(_el$1477, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1477;
  })();
}
export function LucideTowerControl(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1478 = _$getNextElement(_tmpl$1477);
    _$spread(_el$1478, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1478;
  })();
}
export function LucideToyBrick(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1479 = _$getNextElement(_tmpl$1478);
    _$spread(_el$1479, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1479;
  })();
}
export function LucideTractor(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1480 = _$getNextElement(_tmpl$1479);
    _$spread(_el$1480, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1480;
  })();
}
export function LucideTrafficCone(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1481 = _$getNextElement(_tmpl$1480);
    _$spread(_el$1481, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1481;
  })();
}
export function LucideTrainFrontTunnel(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1482 = _$getNextElement(_tmpl$1481);
    _$spread(_el$1482, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1482;
  })();
}
export function LucideTrainFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1483 = _$getNextElement(_tmpl$1482);
    _$spread(_el$1483, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1483;
  })();
}
export function LucideTrainTrack(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1484 = _$getNextElement(_tmpl$1483);
    _$spread(_el$1484, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1484;
  })();
}
export function LucideTramFront(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1485 = _$getNextElement(_tmpl$1484);
    _$spread(_el$1485, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1485;
  })();
}
export function LucideTransgender(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1486 = _$getNextElement(_tmpl$1485);
    _$spread(_el$1486, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1486;
  })();
}
export function LucideTrash2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1487 = _$getNextElement(_tmpl$1486);
    _$spread(_el$1487, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1487;
  })();
}
export function LucideTrash(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1488 = _$getNextElement(_tmpl$1487);
    _$spread(_el$1488, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1488;
  })();
}
export function LucideTreeDeciduous(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1489 = _$getNextElement(_tmpl$1488);
    _$spread(_el$1489, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1489;
  })();
}
export function LucideTreePalm(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1490 = _$getNextElement(_tmpl$1489);
    _$spread(_el$1490, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1490;
  })();
}
export function LucideTreePine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1491 = _$getNextElement(_tmpl$1490);
    _$spread(_el$1491, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1491;
  })();
}
export function LucideTrees(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1492 = _$getNextElement(_tmpl$1491);
    _$spread(_el$1492, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1492;
  })();
}
export function LucideTrello(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1493 = _$getNextElement(_tmpl$1492);
    _$spread(_el$1493, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1493;
  })();
}
export function LucideTrendingDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1494 = _$getNextElement(_tmpl$1493);
    _$spread(_el$1494, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1494;
  })();
}
export function LucideTrendingUpDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1495 = _$getNextElement(_tmpl$1494);
    _$spread(_el$1495, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1495;
  })();
}
export function LucideTrendingUp(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1496 = _$getNextElement(_tmpl$1495);
    _$spread(_el$1496, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1496;
  })();
}
export function LucideTriangleAlert(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1497 = _$getNextElement(_tmpl$1496);
    _$spread(_el$1497, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1497;
  })();
}
export function LucideTriangleDashed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1498 = _$getNextElement(_tmpl$1497);
    _$spread(_el$1498, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1498;
  })();
}
export function LucideTriangleRight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1499 = _$getNextElement(_tmpl$1498);
    _$spread(_el$1499, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1499;
  })();
}
export function LucideTriangle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1500 = _$getNextElement(_tmpl$1499);
    _$spread(_el$1500, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1500;
  })();
}
export function LucideTrophy(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1501 = _$getNextElement(_tmpl$1500);
    _$spread(_el$1501, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1501;
  })();
}
export function LucideTruckElectric(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1502 = _$getNextElement(_tmpl$1501);
    _$spread(_el$1502, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1502;
  })();
}
export function LucideTruck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1503 = _$getNextElement(_tmpl$1502);
    _$spread(_el$1503, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1503;
  })();
}
export function LucideTurtle(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1504 = _$getNextElement(_tmpl$1503);
    _$spread(_el$1504, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1504;
  })();
}
export function LucideTvMinimalPlay(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1505 = _$getNextElement(_tmpl$1504);
    _$spread(_el$1505, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1505;
  })();
}
export function LucideTvMinimal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1506 = _$getNextElement(_tmpl$1505);
    _$spread(_el$1506, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1506;
  })();
}
export function LucideTv(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1507 = _$getNextElement(_tmpl$1506);
    _$spread(_el$1507, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1507;
  })();
}
export function LucideTwitch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1508 = _$getNextElement(_tmpl$1507);
    _$spread(_el$1508, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1508;
  })();
}
export function LucideTwitter(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1509 = _$getNextElement(_tmpl$1508);
    _$spread(_el$1509, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1509;
  })();
}
export function LucideTypeOutline(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1510 = _$getNextElement(_tmpl$1509);
    _$spread(_el$1510, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1510;
  })();
}
export function LucideType(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1511 = _$getNextElement(_tmpl$1510);
    _$spread(_el$1511, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1511;
  })();
}
export function LucideUmbrellaOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1512 = _$getNextElement(_tmpl$1511);
    _$spread(_el$1512, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1512;
  })();
}
export function LucideUmbrella(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1513 = _$getNextElement(_tmpl$1512);
    _$spread(_el$1513, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1513;
  })();
}
export function LucideUnderline(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1514 = _$getNextElement(_tmpl$1513);
    _$spread(_el$1514, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1514;
  })();
}
export function LucideUndo2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1515 = _$getNextElement(_tmpl$1514);
    _$spread(_el$1515, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1515;
  })();
}
export function LucideUndoDot(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1516 = _$getNextElement(_tmpl$1515);
    _$spread(_el$1516, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1516;
  })();
}
export function LucideUndo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1517 = _$getNextElement(_tmpl$1516);
    _$spread(_el$1517, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1517;
  })();
}
export function LucideUnfoldHorizontal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1518 = _$getNextElement(_tmpl$1517);
    _$spread(_el$1518, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1518;
  })();
}
export function LucideUnfoldVertical(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1519 = _$getNextElement(_tmpl$1518);
    _$spread(_el$1519, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1519;
  })();
}
export function LucideUngroup(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1520 = _$getNextElement(_tmpl$1519);
    _$spread(_el$1520, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1520;
  })();
}
export function LucideUniversity(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1521 = _$getNextElement(_tmpl$1520);
    _$spread(_el$1521, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1521;
  })();
}
export function LucideUnlink2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1522 = _$getNextElement(_tmpl$1521);
    _$spread(_el$1522, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1522;
  })();
}
export function LucideUnlink(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1523 = _$getNextElement(_tmpl$1522);
    _$spread(_el$1523, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1523;
  })();
}
export function LucideUnplug(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1524 = _$getNextElement(_tmpl$1523);
    _$spread(_el$1524, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1524;
  })();
}
export function LucideUpload(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1525 = _$getNextElement(_tmpl$1524);
    _$spread(_el$1525, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1525;
  })();
}
export function LucideUsb(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1526 = _$getNextElement(_tmpl$1525);
    _$spread(_el$1526, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1526;
  })();
}
export function LucideUserCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1527 = _$getNextElement(_tmpl$1526);
    _$spread(_el$1527, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1527;
  })();
}
export function LucideUserCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1528 = _$getNextElement(_tmpl$1527);
    _$spread(_el$1528, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1528;
  })();
}
export function LucideUserLock(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1529 = _$getNextElement(_tmpl$1528);
    _$spread(_el$1529, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1529;
  })();
}
export function LucideUserMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1530 = _$getNextElement(_tmpl$1529);
    _$spread(_el$1530, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1530;
  })();
}
export function LucideUserPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1531 = _$getNextElement(_tmpl$1530);
    _$spread(_el$1531, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1531;
  })();
}
export function LucideUserPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1532 = _$getNextElement(_tmpl$1531);
    _$spread(_el$1532, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1532;
  })();
}
export function LucideUserRoundCheck(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1533 = _$getNextElement(_tmpl$1532);
    _$spread(_el$1533, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1533;
  })();
}
export function LucideUserRoundCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1534 = _$getNextElement(_tmpl$1533);
    _$spread(_el$1534, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1534;
  })();
}
export function LucideUserRoundMinus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1535 = _$getNextElement(_tmpl$1534);
    _$spread(_el$1535, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1535;
  })();
}
export function LucideUserRoundPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1536 = _$getNextElement(_tmpl$1535);
    _$spread(_el$1536, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1536;
  })();
}
export function LucideUserRoundPlus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1537 = _$getNextElement(_tmpl$1536);
    _$spread(_el$1537, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1537;
  })();
}
export function LucideUserRoundSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1538 = _$getNextElement(_tmpl$1537);
    _$spread(_el$1538, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1538;
  })();
}
export function LucideUserRoundX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1539 = _$getNextElement(_tmpl$1538);
    _$spread(_el$1539, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1539;
  })();
}
export function LucideUserRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1540 = _$getNextElement(_tmpl$1539);
    _$spread(_el$1540, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1540;
  })();
}
export function LucideUserSearch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1541 = _$getNextElement(_tmpl$1540);
    _$spread(_el$1541, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1541;
  })();
}
export function LucideUserX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1542 = _$getNextElement(_tmpl$1541);
    _$spread(_el$1542, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1542;
  })();
}
export function LucideUser(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1543 = _$getNextElement(_tmpl$1542);
    _$spread(_el$1543, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1543;
  })();
}
export function LucideUsersRound(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1544 = _$getNextElement(_tmpl$1543);
    _$spread(_el$1544, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1544;
  })();
}
export function LucideUsers(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1545 = _$getNextElement(_tmpl$1544);
    _$spread(_el$1545, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1545;
  })();
}
export function LucideUtensilsCrossed(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1546 = _$getNextElement(_tmpl$1545);
    _$spread(_el$1546, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1546;
  })();
}
export function LucideUtensils(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1547 = _$getNextElement(_tmpl$1546);
    _$spread(_el$1547, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1547;
  })();
}
export function LucideUtilityPole(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1548 = _$getNextElement(_tmpl$1547);
    _$spread(_el$1548, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1548;
  })();
}
export function LucideVariable(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1549 = _$getNextElement(_tmpl$1548);
    _$spread(_el$1549, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1549;
  })();
}
export function LucideVault(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1550 = _$getNextElement(_tmpl$1549);
    _$spread(_el$1550, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1550;
  })();
}
export function LucideVectorSquare(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1551 = _$getNextElement(_tmpl$1550);
    _$spread(_el$1551, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1551;
  })();
}
export function LucideVegan(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1552 = _$getNextElement(_tmpl$1551);
    _$spread(_el$1552, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1552;
  })();
}
export function LucideVenetianMask(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1553 = _$getNextElement(_tmpl$1552);
    _$spread(_el$1553, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1553;
  })();
}
export function LucideVenusAndMars(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1554 = _$getNextElement(_tmpl$1553);
    _$spread(_el$1554, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1554;
  })();
}
export function LucideVenus(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1555 = _$getNextElement(_tmpl$1554);
    _$spread(_el$1555, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1555;
  })();
}
export function LucideVibrateOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1556 = _$getNextElement(_tmpl$1555);
    _$spread(_el$1556, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1556;
  })();
}
export function LucideVibrate(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1557 = _$getNextElement(_tmpl$1556);
    _$spread(_el$1557, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1557;
  })();
}
export function LucideVideoOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1558 = _$getNextElement(_tmpl$1557);
    _$spread(_el$1558, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1558;
  })();
}
export function LucideVideo(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1559 = _$getNextElement(_tmpl$1558);
    _$spread(_el$1559, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1559;
  })();
}
export function LucideVideotape(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1560 = _$getNextElement(_tmpl$1559);
    _$spread(_el$1560, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1560;
  })();
}
export function LucideView(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1561 = _$getNextElement(_tmpl$1560);
    _$spread(_el$1561, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1561;
  })();
}
export function LucideVoicemail(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1562 = _$getNextElement(_tmpl$1561);
    _$spread(_el$1562, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1562;
  })();
}
export function LucideVolleyball(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1563 = _$getNextElement(_tmpl$1562);
    _$spread(_el$1563, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1563;
  })();
}
export function LucideVolume1(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1564 = _$getNextElement(_tmpl$1563);
    _$spread(_el$1564, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1564;
  })();
}
export function LucideVolume2(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1565 = _$getNextElement(_tmpl$1564);
    _$spread(_el$1565, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1565;
  })();
}
export function LucideVolumeOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1566 = _$getNextElement(_tmpl$1565);
    _$spread(_el$1566, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1566;
  })();
}
export function LucideVolumeX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1567 = _$getNextElement(_tmpl$1566);
    _$spread(_el$1567, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1567;
  })();
}
export function LucideVolume(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1568 = _$getNextElement(_tmpl$1567);
    _$spread(_el$1568, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1568;
  })();
}
export function LucideVote(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1569 = _$getNextElement(_tmpl$1568);
    _$spread(_el$1569, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1569;
  })();
}
export function LucideWalletCards(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1570 = _$getNextElement(_tmpl$1569);
    _$spread(_el$1570, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1570;
  })();
}
export function LucideWalletMinimal(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1571 = _$getNextElement(_tmpl$1570);
    _$spread(_el$1571, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1571;
  })();
}
export function LucideWallet(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1572 = _$getNextElement(_tmpl$1571);
    _$spread(_el$1572, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1572;
  })();
}
export function LucideWallpaper(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1573 = _$getNextElement(_tmpl$1572);
    _$spread(_el$1573, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1573;
  })();
}
export function LucideWandSparkles(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1574 = _$getNextElement(_tmpl$1573);
    _$spread(_el$1574, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1574;
  })();
}
export function LucideWand(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1575 = _$getNextElement(_tmpl$1574);
    _$spread(_el$1575, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1575;
  })();
}
export function LucideWarehouse(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1576 = _$getNextElement(_tmpl$1575);
    _$spread(_el$1576, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1576;
  })();
}
export function LucideWashingMachine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1577 = _$getNextElement(_tmpl$1576);
    _$spread(_el$1577, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1577;
  })();
}
export function LucideWatch(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1578 = _$getNextElement(_tmpl$1577);
    _$spread(_el$1578, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1578;
  })();
}
export function LucideWavesLadder(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1579 = _$getNextElement(_tmpl$1578);
    _$spread(_el$1579, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1579;
  })();
}
export function LucideWaves(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1580 = _$getNextElement(_tmpl$1579);
    _$spread(_el$1580, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1580;
  })();
}
export function LucideWaypoints(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1581 = _$getNextElement(_tmpl$1580);
    _$spread(_el$1581, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1581;
  })();
}
export function LucideWebcam(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1582 = _$getNextElement(_tmpl$1581);
    _$spread(_el$1582, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1582;
  })();
}
export function LucideWebhookOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1583 = _$getNextElement(_tmpl$1582);
    _$spread(_el$1583, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1583;
  })();
}
export function LucideWebhook(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1584 = _$getNextElement(_tmpl$1583);
    _$spread(_el$1584, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1584;
  })();
}
export function LucideWeight(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1585 = _$getNextElement(_tmpl$1584);
    _$spread(_el$1585, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1585;
  })();
}
export function LucideWheatOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1586 = _$getNextElement(_tmpl$1585);
    _$spread(_el$1586, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1586;
  })();
}
export function LucideWheat(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1587 = _$getNextElement(_tmpl$1586);
    _$spread(_el$1587, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1587;
  })();
}
export function LucideWholeWord(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1588 = _$getNextElement(_tmpl$1587);
    _$spread(_el$1588, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1588;
  })();
}
export function LucideWifiCog(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1589 = _$getNextElement(_tmpl$1588);
    _$spread(_el$1589, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1589;
  })();
}
export function LucideWifiHigh(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1590 = _$getNextElement(_tmpl$1589);
    _$spread(_el$1590, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1590;
  })();
}
export function LucideWifiLow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1591 = _$getNextElement(_tmpl$1590);
    _$spread(_el$1591, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1591;
  })();
}
export function LucideWifiOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1592 = _$getNextElement(_tmpl$1591);
    _$spread(_el$1592, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1592;
  })();
}
export function LucideWifiPen(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1593 = _$getNextElement(_tmpl$1592);
    _$spread(_el$1593, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1593;
  })();
}
export function LucideWifiZero(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1594 = _$getNextElement(_tmpl$1593);
    _$spread(_el$1594, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1594;
  })();
}
export function LucideWifi(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1595 = _$getNextElement(_tmpl$1594);
    _$spread(_el$1595, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1595;
  })();
}
export function LucideWindArrowDown(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1596 = _$getNextElement(_tmpl$1595);
    _$spread(_el$1596, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1596;
  })();
}
export function LucideWind(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1597 = _$getNextElement(_tmpl$1596);
    _$spread(_el$1597, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1597;
  })();
}
export function LucideWineOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1598 = _$getNextElement(_tmpl$1597);
    _$spread(_el$1598, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1598;
  })();
}
export function LucideWine(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1599 = _$getNextElement(_tmpl$1598);
    _$spread(_el$1599, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1599;
  })();
}
export function LucideWorkflow(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1600 = _$getNextElement(_tmpl$1599);
    _$spread(_el$1600, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1600;
  })();
}
export function LucideWorm(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1601 = _$getNextElement(_tmpl$1600);
    _$spread(_el$1601, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1601;
  })();
}
export function LucideWrapText(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1602 = _$getNextElement(_tmpl$1601);
    _$spread(_el$1602, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1602;
  })();
}
export function LucideWrench(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1603 = _$getNextElement(_tmpl$1602);
    _$spread(_el$1603, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1603;
  })();
}
export function LucideX(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1604 = _$getNextElement(_tmpl$1603);
    _$spread(_el$1604, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1604;
  })();
}
export function LucideYoutube(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1605 = _$getNextElement(_tmpl$1604);
    _$spread(_el$1605, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1605;
  })();
}
export function LucideZapOff(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1606 = _$getNextElement(_tmpl$1605);
    _$spread(_el$1606, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1606;
  })();
}
export function LucideZap(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1607 = _$getNextElement(_tmpl$1606);
    _$spread(_el$1607, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1607;
  })();
}
export function LucideZoomIn(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1608 = _$getNextElement(_tmpl$1607);
    _$spread(_el$1608, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1608;
  })();
}
export function LucideZoomOut(props) {
  const merged = mergeProps({
    ...lucideDefaultProps,
    viewBox: '0 0 24 24'
  }, props);
  return (() => {
    var _el$1609 = _$getNextElement(_tmpl$1608);
    _$spread(_el$1609, _$mergeProps(merged, {
      get width() {
        return merged.width ?? merged.size;
      },
      get height() {
        return merged.height ?? merged.size;
      },
      get stroke() {
        return merged.stroke ?? merged.color;
      },
      get fill() {
        return merged.fill;
      }
    }), true, true);
    _$runHydrationEvents();
    return _el$1609;
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,